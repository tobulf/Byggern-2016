
Node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000138  00800100  0000364c  000036e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000364c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000176  00800238  00800238  00003818  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003818  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000330  00000000  00000000  00003874  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00003d10  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013e9  00000000  00000000  000078b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000012c1  00000000  00000000  00008c9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000820  00000000  00000000  00009f60  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a18  00000000  00000000  0000a780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001cad  00000000  00000000  0000b198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000340  00000000  00000000  0000ce45  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__ctors_end>
       4:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
       8:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
       c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      10:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      14:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      18:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      1c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      20:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      24:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      28:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      2c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      30:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      34:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      38:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      3c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      40:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      44:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      48:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      4c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      50:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      54:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      58:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      5c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      60:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      64:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      68:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      6c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	08 00       	.word	0x0008	; ????
      74:	01 01       	movw	r0, r2
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 04       	cpc	r0, r0
      7c:	06 00       	.word	0x0006	; ????
      7e:	50 c0       	rjmp	.+160    	; 0x120 <__trampolines_end+0xb0>
      80:	c6 c6       	rjmp	.+3468   	; 0xe0e <tobias+0x19e>
      82:	52 52       	subi	r21, 0x22	; 34
      84:	02 02       	muls	r16, r18
      86:	01 01       	movw	r0, r2
      88:	30 30       	cpi	r19, 0x00	; 0
      8a:	30 00       	.word	0x0030	; ????
	...
      94:	00 e0       	ldi	r16, 0x00	; 0
      96:	f0 f0       	brcs	.+60     	; 0xd4 <__trampolines_end+0x64>
      98:	e0 e0       	ldi	r30, 0x00	; 0
      9a:	e0 c0       	rjmp	.+448    	; 0x25c <__trampolines_end+0x1ec>
      9c:	c0 80       	ld	r12, Z
      9e:	80 80       	ld	r8, Z
	...
      e8:	e0 f0       	brcs	.+56     	; 0x122 <__trampolines_end+0xb2>
      ea:	f0 f0       	brcs	.+60     	; 0x128 <__trampolines_end+0xb8>
      ec:	e4 e4       	ldi	r30, 0x44	; 68
      ee:	e4 f4       	brge	.+56     	; 0x128 <__trampolines_end+0xb8>
      f0:	10 00       	.word	0x0010	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	00 04       	cpc	r0, r0
      f8:	04 00       	.word	0x0004	; ????
      fa:	00 03       	mulsu	r16, r16
      fc:	63 e3       	ldi	r22, 0x33	; 51
      fe:	e3 63       	ori	r30, 0x33	; 51
     100:	02 0b       	sbc	r16, r18
     102:	6b 63       	ori	r22, 0x3B	; 59
     104:	e0 fc       	sbrc	r14, 0
     106:	fe ff       	.word	0xfffe	; ????
     108:	e7 e3       	ldi	r30, 0x37	; 55
     10a:	f3 f2       	brvs	.-68     	; 0xc8 <__trampolines_end+0x58>
     10c:	fc f0       	brlt	.+62     	; 0x14c <__trampolines_end+0xdc>
     10e:	e0 80       	ld	r14, Z
     110:	00 00       	nop
     112:	00 00       	nop
     114:	c0 ff       	sbrs	r28, 0
     116:	ff ff       	.word	0xffff	; ????
     118:	ff ff       	.word	0xffff	; ????
     11a:	ff ff       	.word	0xffff	; ????
     11c:	ff ff       	.word	0xffff	; ????
     11e:	ff ff       	.word	0xffff	; ????
     120:	ff fe       	.word	0xfeff	; ????
     122:	ee c3       	rjmp	.+2012   	; 0x900 <brage+0x90>
     124:	c1 c0       	rjmp	.+386    	; 0x2a8 <__trampolines_end+0x238>
     126:	e0 e0       	ldi	r30, 0x00	; 0
     128:	e0 e0       	ldi	r30, 0x00	; 0
     12a:	60 40       	sbci	r22, 0x00	; 0
     12c:	40 00       	.word	0x0040	; ????
	...
     136:	80 c0       	rjmp	.+256    	; 0x238 <__trampolines_end+0x1c8>
     138:	80 c0       	rjmp	.+256    	; 0x23a <__trampolines_end+0x1ca>
     13a:	e0 f8       	bld	r14, 0
     13c:	f8 f0       	brcs	.+62     	; 0x17c <__trampolines_end+0x10c>
	...
     162:	c0 c0       	rjmp	.+384    	; 0x2e4 <__trampolines_end+0x274>
     164:	e0 f0       	brcs	.+56     	; 0x19e <__trampolines_end+0x12e>
     166:	f8 fc       	.word	0xfcf8	; ????
     168:	ff ff       	.word	0xffff	; ????
     16a:	ff ff       	.word	0xffff	; ????
     16c:	ff ff       	.word	0xffff	; ????
     16e:	ff ff       	.word	0xffff	; ????
     170:	00 0c       	add	r0, r0
     172:	1c 78       	andi	r17, 0x8C	; 140
     174:	1c 1c       	adc	r1, r12
     176:	2c 0c       	add	r2, r12
     178:	0c 04       	cpc	r0, r12
     17a:	00 00       	nop
     17c:	00 01       	movw	r0, r0
     17e:	43 41       	sbci	r20, 0x13	; 19
     180:	1c 1c       	adc	r1, r12
     182:	0c 08       	sbc	r0, r12
     184:	7f ff       	.word	0xff7f	; ????
     186:	ff ff       	.word	0xffff	; ????
     188:	ff ff       	.word	0xffff	; ????
     18a:	ff ff       	.word	0xffff	; ????
     18c:	c3 e3       	ldi	r28, 0x33	; 51
     18e:	f1 f3       	breq	.-4      	; 0x18c <__trampolines_end+0x11c>
     190:	ff fe       	.word	0xfeff	; ????
     192:	fc fc       	.word	0xfcfc	; ????
     194:	ff ff       	.word	0xffff	; ????
     196:	ff ff       	.word	0xffff	; ????
     198:	ff ff       	.word	0xffff	; ????
     19a:	ff ff       	.word	0xffff	; ????
     19c:	ff ff       	.word	0xffff	; ????
     19e:	ff ff       	.word	0xffff	; ????
     1a0:	ff ff       	.word	0xffff	; ????
     1a2:	ff ff       	.word	0xffff	; ????
     1a4:	ff ff       	.word	0xffff	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff fe       	.word	0xfeff	; ????
     1aa:	fc fc       	.word	0xfcfc	; ????
     1ac:	fc fc       	.word	0xfcfc	; ????
     1ae:	fc fc       	.word	0xfcfc	; ????
     1b0:	fc fc       	.word	0xfcfc	; ????
     1b2:	fc fe       	.word	0xfefc	; ????
     1b4:	fe fe       	.word	0xfefe	; ????
     1b6:	ff ff       	.word	0xffff	; ????
     1b8:	ff ff       	.word	0xffff	; ????
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	7f 07       	cpc	r23, r31
	...
     1c6:	c0 c0       	rjmp	.+384    	; 0x348 <__trampolines_end+0x2d8>
     1c8:	c0 80       	ld	r12, Z
     1ca:	80 80       	ld	r8, Z
	...
     1e0:	00 08       	sbc	r0, r0
     1e2:	7f ff       	.word	0xff7f	; ????
     1e4:	ff ff       	.word	0xffff	; ????
     1e6:	ff ff       	.word	0xffff	; ????
     1e8:	ff ff       	.word	0xffff	; ????
     1ea:	ff ff       	.word	0xffff	; ????
     1ec:	ff ff       	.word	0xffff	; ????
     1ee:	ff 7f       	andi	r31, 0xFF	; 255
     1f0:	00 00       	nop
     1f2:	30 31       	cpi	r19, 0x10	; 16
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	32 02       	muls	r19, r18
     1fa:	00 00       	nop
     1fc:	00 08       	sbc	r0, r0
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 80       	ld	r0, Z
     204:	80 c7       	rjmp	.+3840   	; 0x1106 <pig+0x96>
     206:	df ff       	.word	0xffdf	; ????
     208:	ff ff       	.word	0xffff	; ????
     20a:	ff ff       	.word	0xffff	; ????
     20c:	ff ff       	.word	0xffff	; ????
     20e:	ff ff       	.word	0xffff	; ????
     210:	ff ff       	.word	0xffff	; ????
     212:	ff ff       	.word	0xffff	; ????
     214:	ff ff       	.word	0xffff	; ????
     216:	ff ff       	.word	0xffff	; ????
     218:	ff ff       	.word	0xffff	; ????
     21a:	ff ff       	.word	0xffff	; ????
     21c:	ff ff       	.word	0xffff	; ????
     21e:	ff ff       	.word	0xffff	; ????
     220:	ff ff       	.word	0xffff	; ????
     222:	ff ff       	.word	0xffff	; ????
     224:	ff 7f       	andi	r31, 0xFF	; 255
     226:	3f 3f       	cpi	r19, 0xFF	; 255
     228:	1f 0f       	add	r17, r31
     22a:	0f 87       	std	Y+15, r16	; 0x0f
     22c:	87 c7       	rjmp	.+3854   	; 0x113c <pig+0xcc>
     22e:	e3 f3       	brvs	.-8      	; 0x228 <__trampolines_end+0x1b8>
     230:	7f 3f       	cpi	r23, 0xFF	; 255
     232:	3f 3f       	cpi	r19, 0xFF	; 255
     234:	3f 3f       	cpi	r19, 0xFF	; 255
     236:	3f 3f       	cpi	r19, 0xFF	; 255
     238:	3f 3f       	cpi	r19, 0xFF	; 255
     23a:	3f 3f       	cpi	r19, 0xFF	; 255
     23c:	3f 1c       	adc	r3, r15
     23e:	00 00       	nop
     240:	00 00       	nop
     242:	00 00       	nop
     244:	00 7e       	andi	r16, 0xE0	; 224
     246:	ff ff       	.word	0xffff	; ????
     248:	ff ff       	.word	0xffff	; ????
     24a:	ff ff       	.word	0xffff	; ????
     24c:	ff ff       	.word	0xffff	; ????
     24e:	ff ff       	.word	0xffff	; ????
     250:	fe fc       	.word	0xfcfe	; ????
     252:	fc 20       	and	r15, r12
	...
     260:	00 00       	nop
     262:	18 1f       	adc	r17, r24
     264:	1f 1f       	adc	r17, r31
     266:	0f 0f       	add	r16, r31
     268:	07 03       	mulsu	r16, r23
     26a:	03 03       	mulsu	r16, r19
     26c:	01 00       	.word	0x0001	; ????
     26e:	00 00       	nop
     270:	00 08       	sbc	r0, r0
     272:	1e 72       	andi	r17, 0x2E	; 46
     274:	32 00       	.word	0x0032	; ????
     276:	0c 5f       	subi	r16, 0xFC	; 252
     278:	ff da       	rcall	.-2562   	; 0xfffff878 <__eeprom_end+0xff7ef878>
     27a:	c0 00       	.word	0x00c0	; ????
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	b9 ff       	.word	0xffb9	; ????
     282:	bb b9       	out	0x0b, r27	; 11
     284:	bb ff       	.word	0xffbb	; ????
     286:	b9 99       	sbic	0x17, 1	; 23
     288:	bf bf       	out	0x3f, r27	; 63
     28a:	bf bf       	out	0x3f, r27	; 63
     28c:	bf bf       	out	0x3f, r27	; 63
     28e:	9f 9f       	mul	r25, r31
     290:	ff ff       	.word	0xffff	; ????
     292:	f7 ff       	sbrs	r31, 7
     294:	ff ff       	.word	0xffff	; ????
     296:	ff ff       	.word	0xffff	; ????
     298:	ff ff       	.word	0xffff	; ????
     29a:	ff ff       	.word	0xffff	; ????
     29c:	ff fb       	.word	0xfbff	; ????
     29e:	f1 ff       	sbrs	r31, 1
     2a0:	ff ff       	.word	0xffff	; ????
     2a2:	e7 e1       	ldi	r30, 0x17	; 23
     2a4:	f0 f8       	bld	r15, 0
     2a6:	7c 3e       	cpi	r23, 0xEC	; 236
     2a8:	3e 3f       	cpi	r19, 0xFE	; 254
     2aa:	7f 7f       	andi	r23, 0xFF	; 255
     2ac:	7f 7f       	andi	r23, 0xFF	; 255
     2ae:	3f 3f       	cpi	r19, 0xFF	; 255
     2b0:	7f 7e       	andi	r23, 0xEF	; 239
     2b2:	7c 7c       	andi	r23, 0xCC	; 204
     2b4:	7c 78       	andi	r23, 0x8C	; 140
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	c0 c0       	rjmp	.+384    	; 0x43a <__trampolines_end+0x3ca>
     2ba:	c0 c0       	rjmp	.+384    	; 0x43c <__trampolines_end+0x3cc>
     2bc:	c0 00       	.word	0x00c0	; ????
	...
     2c6:	30 61       	ori	r19, 0x10	; 16
     2c8:	c3 87       	std	Z+11, r28	; 0x0b
     2ca:	0f 0f       	add	r16, r31
     2cc:	0f 1f       	adc	r16, r31
     2ce:	1f 0f       	add	r17, r31
     2d0:	0f 07       	cpc	r16, r31
	...
     2f2:	00 66       	ori	r16, 0x60	; 96
     2f4:	26 06       	cpc	r2, r22
     2f6:	84 86       	std	Z+12, r8	; 0x0c
     2f8:	c7 c7       	rjmp	.+3982   	; 0x1288 <pig+0x218>
     2fa:	c3 01       	movw	r24, r6
     2fc:	00 00       	nop
     2fe:	00 00       	nop
     300:	33 7f       	andi	r19, 0xF3	; 243
     302:	ff fb       	.word	0xfbff	; ????
     304:	3b ff       	.word	0xff3b	; ????
     306:	ff fb       	.word	0xfbff	; ????
     308:	fb ff       	.word	0xfffb	; ????
     30a:	fb bb       	out	0x1b, r31	; 27
     30c:	ff ff       	.word	0xffff	; ????
     30e:	bb 3b       	cpi	r27, 0xBB	; 187
     310:	ff ff       	.word	0xffff	; ????
     312:	ff ff       	.word	0xffff	; ????
     314:	ff ff       	.word	0xffff	; ????
     316:	ff ff       	.word	0xffff	; ????
     318:	ff ff       	.word	0xffff	; ????
     31a:	9f 1f       	adc	r25, r31
     31c:	3f 7f       	andi	r19, 0xFF	; 255
     31e:	ff ff       	.word	0xffff	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff ff       	.word	0xffff	; ????
     324:	ff ff       	.word	0xffff	; ????
     326:	fe fe       	.word	0xfefe	; ????
     328:	fe fe       	.word	0xfefe	; ????
     32a:	fe fe       	.word	0xfefe	; ????
     32c:	fc fc       	.word	0xfcfc	; ????
     32e:	fc fc       	.word	0xfcfc	; ????
     330:	fc fc       	.word	0xfcfc	; ????
     332:	fc fc       	.word	0xfcfc	; ????
     334:	fc fc       	.word	0xfcfc	; ????
     336:	f8 e8       	ldi	r31, 0x88	; 136
     338:	e0 c0       	rjmp	.+448    	; 0x4fa <credits+0x8a>
     33a:	c0 c0       	rjmp	.+384    	; 0x4bc <credits+0x4c>
     33c:	80 00       	.word	0x0080	; ????
	...
     346:	00 00       	nop
     348:	00 c1       	rjmp	.+512    	; 0x54a <__stack+0x4b>
     34a:	c3 00       	.word	0x00c3	; ????
	...
     370:	00 00       	nop
     372:	20 01       	movw	r4, r0
     374:	01 71       	andi	r16, 0x11	; 17
     376:	f1 f0       	breq	.+60     	; 0x3b4 <__trampolines_end+0x344>
     378:	f0 f0       	brcs	.+60     	; 0x3b6 <__trampolines_end+0x346>
     37a:	f0 70       	andi	r31, 0x00	; 0
     37c:	70 00       	.word	0x0070	; ????
     37e:	e0 e0       	ldi	r30, 0x00	; 0
     380:	a3 87       	std	Z+11, r26	; 0x0b
     382:	87 07       	cpc	r24, r23
     384:	07 07       	cpc	r16, r23
     386:	07 07       	cpc	r16, r23
     388:	07 07       	cpc	r16, r23
     38a:	07 07       	cpc	r16, r23
     38c:	03 07       	cpc	r16, r19
     38e:	c7 f3       	brie	.-16     	; 0x380 <__trampolines_end+0x310>
     390:	ff ff       	.word	0xffff	; ????
     392:	ff ff       	.word	0xffff	; ????
     394:	ff ff       	.word	0xffff	; ????
     396:	ff ff       	.word	0xffff	; ????
     398:	ff fd       	.word	0xfdff	; ????
     39a:	c1 04       	cpc	r12, r1
     39c:	08 00       	.word	0x0008	; ????
     39e:	01 0f       	add	r16, r17
     3a0:	3f 7f       	andi	r19, 0xFF	; 255
     3a2:	ff ff       	.word	0xffff	; ????
     3a4:	ff ff       	.word	0xffff	; ????
     3a6:	ff ff       	.word	0xffff	; ????
     3a8:	ff ff       	.word	0xffff	; ????
     3aa:	ff ff       	.word	0xffff	; ????
     3ac:	ff ff       	.word	0xffff	; ????
     3ae:	ff ff       	.word	0xffff	; ????
     3b0:	ff ff       	.word	0xffff	; ????
     3b2:	ff ff       	.word	0xffff	; ????
     3b4:	ff ff       	.word	0xffff	; ????
     3b6:	ff fd       	.word	0xfdff	; ????
     3b8:	f9 f9       	.word	0xf9f9	; ????
     3ba:	f8 f8       	.word	0xf8f8	; ????
     3bc:	f8 f8       	.word	0xf8f8	; ????
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	c0 c0       	rjmp	.+384    	; 0x542 <__stack+0x43>
     3c2:	c0 00       	.word	0x00c0	; ????
	...
     3d0:	00 00       	nop
     3d2:	00 80       	ld	r0, Z
     3d4:	80 00       	.word	0x0080	; ????
     3d6:	80 00       	.word	0x0080	; ????
	...
     3f0:	00 00       	nop
     3f2:	04 07       	cpc	r16, r20
     3f4:	07 83       	std	Z+7, r16	; 0x07
     3f6:	81 81       	ldd	r24, Z+1	; 0x01
     3f8:	83 cb       	rjmp	.-2298   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
     3fa:	cb 03       	fmulsu	r20, r19
     3fc:	0b 08       	sbc	r0, r11
     3fe:	0c 0f       	add	r16, r28
     400:	03 01       	movw	r0, r6
     402:	01 00       	.word	0x0001	; ????
	...
     40c:	78 fe       	.word	0xfe78	; ????
     40e:	ff ff       	.word	0xffff	; ????
     410:	ff ff       	.word	0xffff	; ????
     412:	ff ff       	.word	0xffff	; ????
     414:	ff ff       	.word	0xffff	; ????
     416:	ff ff       	.word	0xffff	; ????
     418:	ff ff       	.word	0xffff	; ????
     41a:	ff ff       	.word	0xffff	; ????
     41c:	fe fc       	.word	0xfcfe	; ????
     41e:	f8 f0       	brcs	.+62     	; 0x45e <__trampolines_end+0x3ee>
     420:	e0 c0       	rjmp	.+448    	; 0x5e2 <__stack+0xe3>
     422:	00 00       	nop
     424:	01 01       	movw	r0, r2
     426:	03 03       	mulsu	r16, r19
     428:	03 03       	mulsu	r16, r19
     42a:	03 07       	cpc	r16, r19
     42c:	07 0f       	add	r16, r23
     42e:	0f 0f       	add	r16, r31
     430:	0f 1f       	adc	r16, r31
     432:	1f 1f       	adc	r17, r31
     434:	1f 1f       	adc	r17, r31
     436:	1f 1f       	adc	r17, r31
     438:	1f 1f       	adc	r17, r31
     43a:	0f 0f       	add	r16, r31
     43c:	07 03       	mulsu	r16, r23
     43e:	03 01       	movw	r0, r6
     440:	01 01       	movw	r0, r2
	...
     44e:	00 00       	nop
     450:	04 00       	.word	0x0004	; ????
     452:	02 07       	cpc	r16, r18
     454:	03 00       	.word	0x0003	; ????
	...
     46a:	00 80       	ld	r0, Z
     46c:	c0 c0       	rjmp	.+384    	; 0x5ee <__stack+0xef>
	...

00000470 <credits>:
     470:	ff ff ff ff ff ff ff ff ff 3f 3f 3f 3f 1f 1f 1f     .........????...
     480:	0f 0f 0f 0f 07 07 07 07 07 07 07 07 07 0f 0f 1f     ................
     490:	1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     .??.............
     4a0:	ff 7f 7f 3f 3f 1f 1f 1f 1f 1f 1f 3f 3f 7f 7f ff     ...??......??...
     4b0:	ff ff ff ff ff 7f 7f 7f 3f 3f 1f 1f 1f 0f 0f 0f     ........??......
     4c0:	0f 0f 0f 0f 0f 0f 0f 0f 0f 1f 1f 1f 1f 1f 1f 3f     ...............?
     4d0:	3f 3f 3f 3f 3f 1f 1f 1f 0f 0f 07 07 07 07 07 07     ?????...........
     4e0:	0f 0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff     ...?............
     4f0:	ff ff ff ff ff ff ff ff ff ff fe fc f8 f8 f0 f0     ................
     500:	f0 f8 f8 f8 fc fc fc fc fe fe fe fe fe fe fe fe     ................
     510:	fe fc fc f8 f8 f0 f0 e1 e1 c1 c1 81 81 81 81 80     ................
     520:	80 80 80 c0 c0 c0 e0 f0 f0 f0 f8 f8 f8 f8 f8 f0     ................
     530:	f0 e0 c0 c0 c0 c0 c0 c0 c0 e0 e0 60 70 f0 f8 f8     ...........`p...
     540:	f8 f8 fc fc fc fc fc fc fc fc fc fc fc f8 f8 f8     ................
     550:	f8 f8 f8 f0 f0 f0 f0 f0 f0 f8 f8 f8 fc fc fc fe     ................
     560:	fe fe fe fc fc fc fd ff ff ff ff ff ff ff ff ff     ................
     570:	ff ff ff ff ff ff ff 7f 3f 1f 0f 07 c3 e3 e1 f1     ........?.......
     580:	f1 f1 f1 c1 80 80 c3 ff ff ff ff ff ff ff ff ff     ................
     590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5b0:	ff ff ff ff ff ff ff ff ff ff 00 00 00 ff ff ff     ................
     5c0:	ff ff ff e3 e3 e3 f7 ff ff ff ff ff ff ff ff 0f     ................
     5d0:	07 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5f0:	ff ff ff ff 1f 07 01 80 f0 fc fe ff ff ff ff ff     ................
     600:	ff ff ff ff ff ff ff ff ff 03 01 01 07 87 c3 e3     ................
     610:	e1 f1 f1 01 01 03 ff ff ff 3f 0f 07 83 e3 e1 f1     .........?......
     620:	f1 71 71 31 21 03 07 cf ff ff ff ff 7f 1f 0f 87     .qq1!...........
     630:	c3 e3 f1 f1 f1 f1 f1 e1 c3 07 00 00 f8 ff ff ff     ................
     640:	ff ff 03 01 01 03 ff ff ff ff f9 f1 f1 f1 f1 00     ................
     650:	00 00 00 f1 f1 f1 f1 f1 ff ff ff 3f 0f 0f 07 c7     ...........?....
     660:	e7 e3 e3 f3 f1 c1 81 81 cf ff ff ff ff ff ff ff     ................
     670:	ff ff ff ff c0 00 00 1f 3f 7f ff ff ff ff 7f 7f     ........?.......
     680:	3f 3f 1f 0f 0f 9f ff ff ff 00 00 00 ff ff ff ff     ??..............
     690:	ff ff ff fe fe fe ff ff f7 80 00 02 23 71 71 f8     ............#qq.
     6a0:	f8 fc fc fe 7e 7f 3f 1f 1f ff ff ff c0 00 00 1f     ....~.?.........
     6b0:	3f 7f ff ff ff ff ff 7f 3f 00 00 00 3f ff ff ff     ?.......?...?...
     6c0:	ff ff 00 00 00 00 ff ff ff ff ff ff ff ff ff f8     ................
     6d0:	00 00 00 ff ff ff ff ff ff ff 3f 3e 7c 78 f8 f8     ..........?>|x..
     6e0:	f8 f8 f0 f1 61 03 03 0f ff ff ff ff ff ff ff ff     ....a...........
     6f0:	ff ff ff ff ff ff fe fc fc f8 f8 f8 78 38 38 1c     ............x88.
     700:	1c 1c 0e 0f 0f 0f 0f 1f 3f 7c f8 f8 ff ff ff ff     ........?|......
     710:	ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8 f8     ................
     720:	f8 f8 f8 f8 f8 fc fc fe ff ff ff ff ff ff fe fc     ................
     730:	fc f8 f8 f8 f8 f8 f8 f8 fc fc f8 f8 fc ff ff ff     ................
     740:	ff ff fc f8 f8 fc ff ff ff ff ff ff ff ff ff fd     ................
     750:	f8 f8 fc ff ff ff ff ff ff ff fe fc fc f8 f8 f8     ................
     760:	f8 f8 f8 f8 fc fc fe ff ff ff ff ff ff ff ff ff     ................
     770:	ff ff ff ff ff ff 3f 0f 07 03 01 00 00 00 00 80     ......?.........
     780:	c0 e0 f0 f0 f8 f8 fc fc fc fc f8 f1 e3 e7 c7 8f     ................
     790:	0f 1f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff 7f     ..?.............
     7a0:	3f 3f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ??..............
     7b0:	1f 1f 3f 3f 3f 3f 3f 3f 1f 1f 0f 0f 0f 07 07 03     ..??????........
     7c0:	03 03 03 03 03 03 07 07 0f 1f 1f 1f 3f 3f 3f 3f     ............????
     7d0:	3f 3f 3f 3f 1f 1f 1f 1f 0f 0f 07 07 03 03 03 03     ????............
     7e0:	03 03 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     7f0:	ff ff ff ff ff ff fe fc f8 f0 f0 e0 f8 fe ff ff     ................
     800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     810:	ff fe fe fc f8 f0 e0 e1 c1 c1 81 81 81 80 80 80     ................
     820:	80 c0 c0 e0 e0 f0 f0 f8 f8 fc fc fc fc fc fc fc     ................
     830:	fc fc fc f8 f8 f8 f0 f0 f0 f0 f0 f0 f0 f8 fc fc     ................
     840:	fc fe fe ff ff ff ff ff ff fe fe fe fc f8 f8 f8     ................
     850:	f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 fc fc fe fe     ................
     860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000870 <brage>:
     870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     880:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 1f 1f 0f     ............?...
     890:	1f 9f 5f 5f 7f 3f 3f bf bf 7f 7f 7f 3f 3f bf bf     ..__.??.....??..
     8a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b0:	fc fc fc f8 f8 f0 f0 f0 fc fc f8 f9 f9 fb f2 f6     ................
     8c0:	f4 f0 e0 c0 c0 c0 c0 c0 80 00 00 00 00 00 01 03     ................
     8d0:	07 1f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     900:	ff ff ff ff ff ff ff ff ff ff 81 00 00 00 00 00     ................
     910:	00 00 00 00 00 80 c0 f0 f8 fc fc fe fe ff ff ff     ................
     920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     940:	ff ff 7f 7f 3f 7f ff ff ff fc f0 f0 f0 00 18 03     ....?...........
     950:	00 00 06 6f 1f 3f ff ff ff ff ff ff ff ff ff ff     ...o.?..........
     960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     980:	ff ff ff ff ff ff ff ff ff ff ff ff fc 00 00 00     ................
     990:	00 00 00 0c ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9c0:	ff fb e0 00 00 00 65 47 4f 3f ff ef 3e 18 00 00     ......eGO?..>...
     9d0:	00 00 00 00 00 1c 7f ff ff ff ff ff ff ff ff ff     ................
     9e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff f0 c0 80     ................
     a10:	3e 04 c0 f0 fb df 9f 9f 9f 9f 9f 9f df cb 8b 83     >...............
     a20:	83 83 c7 e7 cf cf df ff ff ff ff ff ff ff ff ef     ................
     a30:	e7 e3 e1 e1 f0 f9 f3 e3 e3 e3 e3 f3 f3 f3 f3 f3     ................
     a40:	f3 f3 f3 fe fe fe f8 c0 e0 20 07 1f 1c 78 70 30     ......... ...xp0
     a50:	00 00 00 00 00 00 f0 ff ff ff ff ff ff ff ff ff     ................
     a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a90:	fe fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ab0:	ff ff ff ff 7f 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
     ac0:	ff ff ff ff ff ff ff ff 7f 18 00 00 00 00 20 20     ..............  
     ad0:	20 10 00 00 80 f8 f8 ff ff ff ff ff ff ff ff ff      ...............
     ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b10:	ff ff ff ff ff ff cf 9f 9f ff ff ff ff ff ff ff     ................
     b20:	ff 7f ff ff ff ff f3 f3 f3 e7 e7 e7 e7 e7 e3 f3     ................
     b30:	f3 71 79 79 7c 7e 7f 3f 3f 3f 3f 3f bf ff fb ff     .qyy|~.?????....
     b40:	ff ff ff ff ff e7 fd fd fc 00 00 e0 fc fc fc f8     ................
     b50:	f8 fc fe ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ba0:	ff ff fe fe fc fc fc fc fe fe fe ff ff ff ff ff     ................
     bb0:	ff ff ff ff ff fd ff fe fe fe ff ff ff ff ff ff     ................
     bc0:	ff ff ff ff ff 7f 1f 03 00 80 c3 c1 c0 81 1f 7f     ................
     bd0:	7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c20:	ff ff ff ff ff ff ff 7f 7f 7f 7f 7f ff ff ff ff     ................
     c30:	ff ff ff ff ff ff 7f 7f 7f 3f 3f 3f 1f 1f 0f 07     .........???....
     c40:	03 83 c1 e0 f0 f8 fc fe ff ff ff ff ff ff fe fc     ................
     c50:	f0 e0 c0 80 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
     c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000c70 <tobias>:
	...
     cec:	00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d6c:	00 00 01 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     da8:	00 00 00 80 80 00 00 00 00 00 80 80 00 00 40 40     ..............@@
     db8:	40 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     @...............
	...
     dd4:	00 80 80 a0 60 40 00 00 00 00 00 00 00 00 00 00     ....`@..........
	...
     e08:	00 00 00 38 7c fc f8 f8 f8 f8 f0 f0 f0 f0 f0 f0     ...8|...........
     e18:	f0 f0 f0 f0 f8 f8 f8 f8 fc fc fc fe fe fe fe 7e     ...............~
     e28:	7f 3f 3f 3f 9f 9f df ef ff ff ff f7 f7 f7 70 f0     .???..........p.
     e38:	70 70 f1 e1 e1 e1 e7 e3 e3 e6 c6 c0 c0 80 00 00     pp..............
	...
     e50:	00 f0 f0 7c 7c ff ff ff ff ff ff fe fc 78 00 00     ...||........x..
	...
     e8c:	00 01 03 03 03 03 03 03 03 03 07 07 07 07 27 2f     ..............'/
     e9c:	0f 0f 0f 1f 7f ff ff ff fd fc fc fc f8 f8 f8 f8     ................
     eac:	f0 f0 f0 e0 f0 f3 f3 ff ff fe fe fe fe fe ff ff     ................
     ebc:	ff ff ff ff ff ff ff ff ff ff 3d 00 00 00 00 00     ..........=.....
     ecc:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 07 03 01     ................
	...
     f10:	00 00 00 06 1c 1e 3e 3e 3c 7e 7e 7e fe fe fc e0     ......>><~~~....
     f20:	80 9f 9f bf bf bf bf bf 9f 9f 9f ff ff ff ff f3     ................
     f30:	f3 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f40:	ff ff ff ff f7 fc fe ff ff ff ff ff ff fe fe fe     ................
     f50:	f8 f0 f0 f8 f8 f8 f8 fc fc f8 f0 c0 00 00 00 00     ................
     f60:	00 00 18 10 00 00 00 00 80 80 00 00 00 00 00 00     ................
	...
     f9c:	00 00 00 01 01 03 07 07 0f 0f 0b 03 01 01 05 05     ................
     fac:	07 0e 0e 0f 07 07 87 87 87 c3 e3 e3 f3 f1 f8 ff     ................
     fbc:	ff ff ff ff ff ff ff ff ff ff ff 7f 3f 7f 7f 3f     ............?..?
     fcc:	1f 1f 8f cf c7 f7 ff ff ff ff ff ff ff ff ff ff     ................
     fdc:	ff fe fc f0 e0 c0 06 0e ff ff ff ff ff ff ff ff     ................
     fec:	ff ff ff ff 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    102c:	00 00 00 01 03 03 07 07 07 07 07 0f 0f 0f 07 07     ................
    103c:	07 07 07 07 07 07 03 03 31 31 78 78 7c 7c 7e fe     ........11xx||~.
    104c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    105c:	ff ff ff ff ff ff fe ff ff ff ff ff ff ff df ff     ................
    106c:	ff ff ff ff                                         ....

00001070 <pig>:
    1070:	ff ff ff ff ff ff ff 7f 7f ff ff ff ff ff ff ff     ................
    1080:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1090:	ff ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    10a0:	7f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f 0f     .??????.........
    10b0:	0f 0f 0f 0f 0f 0f 0f 07 07 07 07 07 03 03 03 03     ................
    10c0:	03 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
    10d0:	00 00 00 00 00 01 01 01 01 01 01 03 03 03 07 0f     ................
    10e0:	0f 1f 3f 3f 0f 07 67 e7 07 07 1f ff ff ff ff ff     ..??..g.........
    10f0:	ff ff ff ff ff ff ff c0 80 01 07 07 0f 1f c7 1f     ................
    1100:	3f 3f 7f 3f 1f 1f 0f 0f 0f 07 07 03 03 01 01 01     ??.?............
    1110:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1168:	1c fc fb fb fb ff ff ff ff ff ff ff ff ff ff ff     ................
    1178:	ff fe fc 3c 00 00 80 02 10 40 00 00 00 00 00 00     ...<.....@......
	...
    11e8:	00 00 ff ff ff ff ff ff ff 1f 1f 1f 1f 1f 0f 0f     ................
    11f8:	07 03 00 00 00 00 03 03 00 00 00 00 00 00 00 00     ................
    1208:	01 00 00 00 00 00 08 00 00 20 40 00 00 00 00 00     ......... @.....
	...
    1264:	00 80 c0 e2 f8 fe ff ff ff ff ff ff ff fc fa f9     ................
    1274:	f0 e0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    128c:	00 00 00 40 00 00 00 00 00 01 00 10 20 00 00 00     ...@........ ...
	...
    12d0:	00 00 80 80 00 00 00 00 00 00 00 00 00 00 00 02     ................
    12e0:	00 00 00 fe ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12f0:	ff ff ff ff ff ff ff ff ff ff fe fe fc fc fc fe     ................
    1300:	fc fc fc f8 f8 fc fc fc fc fc fc fc fc f9 f8 fc     ................
    1310:	fc fc fc fe fe fe fe fc fc fc f2 04 20 00 00 00     ............ ...
    1320:	00 00 00 00 00 e0 f8 f8 f8 fc fc fc fc fc fc f8     ................
    1330:	f8 fc fc fc fc fc f8 f8 fc fc fc fc f8 f8 f8 fc     ................
    1340:	fc fc fc fc fc f8 fe fe fe fe fe fe fe ff ff ff     ................
    1350:	ff ff ff ff 80 00 00 00 00 00 00 00 00 00 00 00     ................
    1360:	00 00 00 83 f7 ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1390:	ff ff ff ff ff ff ff ff ff ff ff 00 00 00 98 00     ................
    13a0:	00 00 00 00 fc ff ff ff ff ff ff ff ff ff ff ff     ................
    13b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13d0:	ff ff ff ff 3f 00 00 00 00 88 c0 e4 f8 00 00 00     ....?...........
    13e0:	00 e0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1410:	ff ff ff ff ff ff ff ff ff f7 f3 f0 d0 c0 c4 e8     ................
    1420:	c0 c8 c0 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1450:	ff ff 9f 91 90 b0 80 80 f8 ff ff f7 e0 e0 f0 f0     ................
    1460:	fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00001470 <font>:
	...
    1478:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
    1488:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
    1498:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
    14a8:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
    14b8:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
    14c8:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
    14d8:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
    14e8:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
    14f8:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
    1508:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
    1518:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
    1528:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
    1538:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
    1548:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
    1558:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
    1568:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
    1578:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
    1588:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
    1598:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
    15a8:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
    15b8:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
    15c8:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
    15d8:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
    15e8:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
    15f8:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
    1608:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
    1618:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
    1628:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
    1638:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
    1648:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
    1658:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
    1668:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
    1678:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
    1688:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
    1698:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
    16a8:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
    16b8:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
    16c8:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
    16d8:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
    16e8:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
    16f8:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
    1708:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
    1718:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
    1728:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
    1738:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
    1748:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
    1758:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00001768 <__ctors_end>:
    1768:	11 24       	eor	r1, r1
    176a:	1f be       	out	0x3f, r1	; 63
    176c:	cf ef       	ldi	r28, 0xFF	; 255
    176e:	d4 e0       	ldi	r29, 0x04	; 4
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	cd bf       	out	0x3d, r28	; 61

00001774 <__do_copy_data>:
    1774:	12 e0       	ldi	r17, 0x02	; 2
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b1 e0       	ldi	r27, 0x01	; 1
    177a:	ec e4       	ldi	r30, 0x4C	; 76
    177c:	f6 e3       	ldi	r31, 0x36	; 54
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <__do_copy_data+0x10>
    1780:	05 90       	lpm	r0, Z+
    1782:	0d 92       	st	X+, r0
    1784:	a8 33       	cpi	r26, 0x38	; 56
    1786:	b1 07       	cpc	r27, r17
    1788:	d9 f7       	brne	.-10     	; 0x1780 <__do_copy_data+0xc>

0000178a <__do_clear_bss>:
    178a:	23 e0       	ldi	r18, 0x03	; 3
    178c:	a8 e3       	ldi	r26, 0x38	; 56
    178e:	b2 e0       	ldi	r27, 0x02	; 2
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <.do_clear_bss_start>

00001792 <.do_clear_bss_loop>:
    1792:	1d 92       	st	X+, r1

00001794 <.do_clear_bss_start>:
    1794:	ae 3a       	cpi	r26, 0xAE	; 174
    1796:	b2 07       	cpc	r27, r18
    1798:	e1 f7       	brne	.-8      	; 0x1792 <.do_clear_bss_loop>
    179a:	0e 94 d0 0e 	call	0x1da0	; 0x1da0 <main>
    179e:	0c 94 24 1b 	jmp	0x3648	; 0x3648 <_exit>

000017a2 <__bad_interrupt>:
    17a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017a6 <ADC_init>:
    17a6:	85 b7       	in	r24, 0x35	; 53
    17a8:	88 60       	ori	r24, 0x08	; 8
    17aa:	85 bf       	out	0x35, r24	; 53
    17ac:	85 b7       	in	r24, 0x35	; 53
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	85 bf       	out	0x35, r24	; 53
    17b2:	86 b7       	in	r24, 0x36	; 54
    17b4:	80 64       	ori	r24, 0x40	; 64
    17b6:	86 bf       	out	0x36, r24	; 54
    17b8:	c3 9a       	sbi	0x18, 3	; 24
    17ba:	bb 98       	cbi	0x17, 3	; 23
    17bc:	08 95       	ret

000017be <ADC_read>:
    17be:	e0 91 06 01 	lds	r30, 0x0106
    17c2:	f0 91 07 01 	lds	r31, 0x0107
    17c6:	8d 5f       	subi	r24, 0xFD	; 253
    17c8:	80 83       	st	Z, r24
    17ca:	b3 99       	sbic	0x16, 3	; 22
    17cc:	fe cf       	rjmp	.-4      	; 0x17ca <ADC_read+0xc>
    17ce:	e0 91 06 01 	lds	r30, 0x0106
    17d2:	f0 91 07 01 	lds	r31, 0x0107
    17d6:	80 81       	ld	r24, Z
    17d8:	08 95       	ret

000017da <CAN_init>:
 *
 *  \return void
 */

CAN_init(){
	MCP2515_init();
    17da:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <MCP2515_init>
    // Set CAN-mode:
	MCP2515_bitModify(MCP_CANCTRL, 0b11100000, MODE_NORMAL); 
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	60 ee       	ldi	r22, 0xE0	; 224
    17e2:	8f e0       	ldi	r24, 0x0F	; 15
    17e4:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <MCP2515_bitModify>
    17e8:	08 95       	ret

000017ea <Can_CAN_receive>:
 *  \param void
 *
 *  \return void
 */
void Can_CAN_receive(){
	uint8_t intf = MCP2515_read(CANINTF);
    17ea:	8c e2       	ldi	r24, 0x2C	; 44
    17ec:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
    // Polling until ready:
	while ((intf & 0b00000011) == 0) {
    17f0:	83 70       	andi	r24, 0x03	; 3
    17f2:	29 f4       	brne	.+10     	; 0x17fe <Can_CAN_receive+0x14>
		intf = MCP2515_read(CANINTF);
    17f4:	8c e2       	ldi	r24, 0x2C	; 44
    17f6:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
 *  \return void
 */
void Can_CAN_receive(){
	uint8_t intf = MCP2515_read(CANINTF);
    // Polling until ready:
	while ((intf & 0b00000011) == 0) {
    17fa:	83 70       	andi	r24, 0x03	; 3
    17fc:	d9 f3       	breq	.-10     	; 0x17f4 <Can_CAN_receive+0xa>
    17fe:	08 95       	ret

00001800 <CAN_message_recieve>:
 *  \param void CAN_message *msg, takes in a pointer wich it modifies to become the recieved message.
 *
 *  \return void
 */

void CAN_message_recieve(CAN_message *msg){
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	1f 92       	push	r1
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	8c 01       	movw	r16, r24
	// Check availability for reception:
	Can_CAN_receive();
    1812:	0e 94 f5 0b 	call	0x17ea	; 0x17ea <Can_CAN_receive>
	
	volatile uint8_t intf = MCP2515_read(CANINTF);
    1816:	8c e2       	ldi	r24, 0x2C	; 44
    1818:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
    181c:	89 83       	std	Y+1, r24	; 0x01
	// Reads CAN-message ID:
	msg->id= MCP2515_read(MCP_RXB0SIDH);
    181e:	81 e6       	ldi	r24, 0x61	; 97
    1820:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	f8 01       	movw	r30, r16
    1828:	91 83       	std	Z+1, r25	; 0x01
    182a:	80 83       	st	Z, r24
	// Read CAN-message length:
	msg->length=MCP2515_read(MCP_RXB0DLC);
    182c:	85 e6       	ldi	r24, 0x65	; 101
    182e:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
    1832:	f8 01       	movw	r30, r16
    1834:	82 83       	std	Z+2, r24	; 0x02
	// Read CAN-message data:
	for(uint8_t i =0; i < msg->length;i++){
    1836:	88 23       	and	r24, r24
    1838:	71 f0       	breq	.+28     	; 0x1856 <CAN_message_recieve+0x56>
    183a:	f1 2c       	mov	r15, r1
		msg->data[i]=MCP2515_read(MCP_RXB0D0 + i);
    183c:	86 e6       	ldi	r24, 0x66	; 102
    183e:	8f 0d       	add	r24, r15
    1840:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
    1844:	f8 01       	movw	r30, r16
    1846:	ef 0d       	add	r30, r15
    1848:	f1 1d       	adc	r31, r1
    184a:	83 83       	std	Z+3, r24	; 0x03
	// Reads CAN-message ID:
	msg->id= MCP2515_read(MCP_RXB0SIDH);
	// Read CAN-message length:
	msg->length=MCP2515_read(MCP_RXB0DLC);
	// Read CAN-message data:
	for(uint8_t i =0; i < msg->length;i++){
    184c:	f3 94       	inc	r15
    184e:	f8 01       	movw	r30, r16
    1850:	82 81       	ldd	r24, Z+2	; 0x02
    1852:	f8 16       	cp	r15, r24
    1854:	98 f3       	brcs	.-26     	; 0x183c <CAN_message_recieve+0x3c>
		msg->data[i]=MCP2515_read(MCP_RXB0D0 + i);
	}
	
	MCP2515_bitModify(CANINTF, 0b00000001, 0);
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	61 e0       	ldi	r22, 0x01	; 1
    185a:	8c e2       	ldi	r24, 0x2C	; 44
    185c:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <MCP2515_bitModify>
}
    1860:	0f 90       	pop	r0
    1862:	df 91       	pop	r29
    1864:	cf 91       	pop	r28
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	08 95       	ret

0000186e <Can_CAN_send>:
 *
 *  \param void
 *
 *  \return void
 */
void Can_CAN_send(){
    186e:	cf 93       	push	r28
    1870:	df 93       	push	r29
    1872:	1f 92       	push	r1
    1874:	cd b7       	in	r28, 0x3d	; 61
    1876:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t intf = MCP2515_read(TXB0CTRL);
    1878:	80 e3       	ldi	r24, 0x30	; 48
    187a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
    187e:	89 83       	std	Y+1, r24	; 0x01
    // Polling until ready:
	while ((intf & 0b00001000) != 0) {
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	83 ff       	sbrs	r24, 3
    1884:	07 c0       	rjmp	.+14     	; 0x1894 <Can_CAN_send+0x26>
		intf = MCP2515_read(TXB0CTRL);
    1886:	80 e3       	ldi	r24, 0x30	; 48
    1888:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <MCP2515_read>
    188c:	89 83       	std	Y+1, r24	; 0x01
 *  \return void
 */
void Can_CAN_send(){
	volatile uint8_t intf = MCP2515_read(TXB0CTRL);
    // Polling until ready:
	while ((intf & 0b00001000) != 0) {
    188e:	89 81       	ldd	r24, Y+1	; 0x01
    1890:	83 fd       	sbrc	r24, 3
    1892:	f9 cf       	rjmp	.-14     	; 0x1886 <Can_CAN_send+0x18>
		intf = MCP2515_read(TXB0CTRL);
	}
}
    1894:	0f 90       	pop	r0
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	08 95       	ret

0000189c <CAN_message_send>:
 *  \param CAN_message* message, message to be sent.
 *
 *  \return void
 */

void CAN_message_send(CAN_message* message) {
    189c:	1f 93       	push	r17
    189e:	cf 93       	push	r28
    18a0:	df 93       	push	r29
    18a2:	ec 01       	movw	r28, r24
    // Check availability to send:
	Can_CAN_send();
    18a4:	0e 94 37 0c 	call	0x186e	; 0x186e <Can_CAN_send>
    // Send empty first byte:
	MCP2515_write(MCP_TXB0SIDL, 0b00000000);
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	82 e3       	ldi	r24, 0x32	; 50
    18ac:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <MCP2515_write>
    // Send message ID:
	MCP2515_write(MCP_TXB0SIDH, message->id);
    18b0:	68 81       	ld	r22, Y
    18b2:	81 e3       	ldi	r24, 0x31	; 49
    18b4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <MCP2515_write>
    // Send message length:
	MCP2515_write(MCP_TXB0DLC, message->length);
    18b8:	6a 81       	ldd	r22, Y+2	; 0x02
    18ba:	85 e3       	ldi	r24, 0x35	; 53
    18bc:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <MCP2515_write>
	// Send an array of given length:
	for (uint8_t i = 0; i < message->length; i++){
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	88 23       	and	r24, r24
    18c4:	69 f0       	breq	.+26     	; 0x18e0 <CAN_message_send+0x44>
    18c6:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXB0D0 + i, message->data[i]);	
    18c8:	fe 01       	movw	r30, r28
    18ca:	e1 0f       	add	r30, r17
    18cc:	f1 1d       	adc	r31, r1
    18ce:	63 81       	ldd	r22, Z+3	; 0x03
    18d0:	86 e3       	ldi	r24, 0x36	; 54
    18d2:	81 0f       	add	r24, r17
    18d4:	0e 94 98 0f 	call	0x1f30	; 0x1f30 <MCP2515_write>
    // Send message ID:
	MCP2515_write(MCP_TXB0SIDH, message->id);
    // Send message length:
	MCP2515_write(MCP_TXB0DLC, message->length);
	// Send an array of given length:
	for (uint8_t i = 0; i < message->length; i++){
    18d8:	1f 5f       	subi	r17, 0xFF	; 255
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	18 17       	cp	r17, r24
    18de:	a0 f3       	brcs	.-24     	; 0x18c8 <CAN_message_send+0x2c>
		MCP2515_write(MCP_TXB0D0 + i, message->data[i]);	
	}
    // Send message:
	MCP2515_requestToSend(MCP_RTS_TX0);
    18e0:	81 e8       	ldi	r24, 0x81	; 129
    18e2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <MCP2515_requestToSend>
}
    18e6:	df 91       	pop	r29
    18e8:	cf 91       	pop	r28
    18ea:	1f 91       	pop	r17
    18ec:	08 95       	ret

000018ee <EEPROM_write>:


void EEPROM_write(unsigned int uiAddress, unsigned char ucData)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
    18ee:	e1 99       	sbic	0x1c, 1	; 28
    18f0:	fe cf       	rjmp	.-4      	; 0x18ee <EEPROM_write>
	;
	/* Set up address and data registers */
	EEAR = uiAddress;
    18f2:	9f bb       	out	0x1f, r25	; 31
    18f4:	8e bb       	out	0x1e, r24	; 30
	EEDR = ucData;
    18f6:	6d bb       	out	0x1d, r22	; 29
	/* Write logical one to EEMWE */
	EECR |= (1<<EEMWE);
    18f8:	e2 9a       	sbi	0x1c, 2	; 28
	/* Start eeprom write by setting EEWE */
	EECR |= (1<<EEWE);
    18fa:	e1 9a       	sbi	0x1c, 1	; 28
    18fc:	08 95       	ret

000018fe <EEPROM_read>:
}

unsigned char EEPROM_read(unsigned int uiAddress)
{
	/* Wait for completion of previous write */
	while(EECR & (1<<EEWE))
    18fe:	e1 99       	sbic	0x1c, 1	; 28
    1900:	fe cf       	rjmp	.-4      	; 0x18fe <EEPROM_read>
	;
	/* Set up address register */
	EEAR = uiAddress;
    1902:	9f bb       	out	0x1f, r25	; 31
    1904:	8e bb       	out	0x1e, r24	; 30
	/* Start eeprom read by writing EERE */
	EECR |= (1<<EERE);
    1906:	e0 9a       	sbi	0x1c, 0	; 28
	/* Return data from data register */
	return EEDR;
    1908:	8d b3       	in	r24, 0x1d	; 29
}
    190a:	08 95       	ret

0000190c <EEPROM_write_int>:
	EEPROM_write_int(53, 0);
	EEPROM_write_int(54, 0);
		
}

void EEPROM_write_int(unsigned int address, unsigned int data){
    190c:	1f 93       	push	r17
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	ec 01       	movw	r28, r24
    1914:	17 2f       	mov	r17, r23
	EEPROM_write(address, data);
    1916:	0e 94 77 0c 	call	0x18ee	; 0x18ee <EEPROM_write>
	uint8_t msb = (data >> 8);
	EEPROM_write(address+50, msb);
    191a:	61 2f       	mov	r22, r17
    191c:	ce 01       	movw	r24, r28
    191e:	c2 96       	adiw	r24, 0x32	; 50
    1920:	0e 94 77 0c 	call	0x18ee	; 0x18ee <EEPROM_write>
}
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	08 95       	ret

0000192c <EEPROM_init>:
	/* Return data from data register */
	return EEDR;
}

void EEPROM_init(){
	EEPROM_write_int(0, 0);
    192c:	60 e0       	ldi	r22, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	80 e0       	ldi	r24, 0x00	; 0
    1932:	90 e0       	ldi	r25, 0x00	; 0
    1934:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(1, 0);
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(2, 0);
    1944:	60 e0       	ldi	r22, 0x00	; 0
    1946:	70 e0       	ldi	r23, 0x00	; 0
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(3, 0);
    1950:	60 e0       	ldi	r22, 0x00	; 0
    1952:	70 e0       	ldi	r23, 0x00	; 0
    1954:	83 e0       	ldi	r24, 0x03	; 3
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(4, 0);
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	70 e0       	ldi	r23, 0x00	; 0
    1960:	84 e0       	ldi	r24, 0x04	; 4
    1962:	90 e0       	ldi	r25, 0x00	; 0
    1964:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(50, 0);
    1968:	60 e0       	ldi	r22, 0x00	; 0
    196a:	70 e0       	ldi	r23, 0x00	; 0
    196c:	82 e3       	ldi	r24, 0x32	; 50
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(51, 0);
    1974:	60 e0       	ldi	r22, 0x00	; 0
    1976:	70 e0       	ldi	r23, 0x00	; 0
    1978:	83 e3       	ldi	r24, 0x33	; 51
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(52, 0);
    1980:	60 e0       	ldi	r22, 0x00	; 0
    1982:	70 e0       	ldi	r23, 0x00	; 0
    1984:	84 e3       	ldi	r24, 0x34	; 52
    1986:	90 e0       	ldi	r25, 0x00	; 0
    1988:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(53, 0);
    198c:	60 e0       	ldi	r22, 0x00	; 0
    198e:	70 e0       	ldi	r23, 0x00	; 0
    1990:	85 e3       	ldi	r24, 0x35	; 53
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	EEPROM_write_int(54, 0);
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	70 e0       	ldi	r23, 0x00	; 0
    199c:	86 e3       	ldi	r24, 0x36	; 54
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
    19a4:	08 95       	ret

000019a6 <EEPROM_read_int>:
	EEPROM_write(address, data);
	uint8_t msb = (data >> 8);
	EEPROM_write(address+50, msb);
}

unsigned int EEPROM_read_int(unsigned int address){
    19a6:	0f 93       	push	r16
    19a8:	1f 93       	push	r17
    19aa:	cf 93       	push	r28
    19ac:	df 93       	push	r29
    19ae:	ec 01       	movw	r28, r24
	int score = (EEPROM_read(address+50) << 8);
    19b0:	c2 96       	adiw	r24, 0x32	; 50
    19b2:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <EEPROM_read>
    19b6:	08 2f       	mov	r16, r24
    19b8:	10 e0       	ldi	r17, 0x00	; 0
    19ba:	10 2f       	mov	r17, r16
    19bc:	00 27       	eor	r16, r16
	score |= EEPROM_read(address);
    19be:	ce 01       	movw	r24, r28
    19c0:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <EEPROM_read>
	return score;
}
    19c4:	98 01       	movw	r18, r16
    19c6:	28 2b       	or	r18, r24
    19c8:	c9 01       	movw	r24, r18
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	08 95       	ret

000019d4 <CAN_send_game_settings>:

#define set_bit(reg, bit ) (reg |= (1 << bit))
#define clear_bit(reg, bit ) (reg &= ~(1 << bit))


void CAN_send_game_settings(game_settings settings){
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	cd b7       	in	r28, 0x3d	; 61
    19da:	de b7       	in	r29, 0x3e	; 62
    19dc:	2b 97       	sbiw	r28, 0x0b	; 11
    19de:	0f b6       	in	r0, 0x3f	; 63
    19e0:	f8 94       	cli
    19e2:	de bf       	out	0x3e, r29	; 62
    19e4:	0f be       	out	0x3f, r0	; 63
    19e6:	cd bf       	out	0x3d, r28	; 61
	CAN_message msg;
	ID id = STARTGAME;
	uint8_t length = 4;
	msg.data[0] = settings.regulator;
    19e8:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1] = settings.difficulty;
    19ea:	7d 83       	std	Y+5, r23	; 0x05
	msg.data[2] = settings.solenoid;
    19ec:	8e 83       	std	Y+6, r24	; 0x06
	msg.data[3] = settings.inverted;
    19ee:	9f 83       	std	Y+7, r25	; 0x07
	msg.id = id;
    19f0:	82 e0       	ldi	r24, 0x02	; 2
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01
	msg.length = length;
    19f8:	84 e0       	ldi	r24, 0x04	; 4
    19fa:	8b 83       	std	Y+3, r24	; 0x03
	CAN_message_send(&msg);
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	0e 94 4e 0c 	call	0x189c	; 0x189c <CAN_message_send>
}
    1a04:	2b 96       	adiw	r28, 0x0b	; 11
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	de bf       	out	0x3e, r29	; 62
    1a0c:	0f be       	out	0x3f, r0	; 63
    1a0e:	cd bf       	out	0x3d, r28	; 61
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	08 95       	ret

00001a16 <GAME_print_score>:


void GAME_print_score(CAN_message msg){
    1a16:	ef 92       	push	r14
    1a18:	ff 92       	push	r15
    1a1a:	0f 93       	push	r16
    1a1c:	1f 93       	push	r17
    1a1e:	cf 93       	push	r28
    1a20:	df 93       	push	r29
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
    1a26:	2b 97       	sbiw	r28, 0x0b	; 11
    1a28:	0f b6       	in	r0, 0x3f	; 63
    1a2a:	f8 94       	cli
    1a2c:	de bf       	out	0x3e, r29	; 62
    1a2e:	0f be       	out	0x3f, r0	; 63
    1a30:	cd bf       	out	0x3d, r28	; 61
    1a32:	e9 82       	std	Y+1, r14	; 0x01
    1a34:	fa 82       	std	Y+2, r15	; 0x02
    1a36:	0b 83       	std	Y+3, r16	; 0x03
    1a38:	1c 83       	std	Y+4, r17	; 0x04
    1a3a:	e2 2f       	mov	r30, r18
    1a3c:	2d 83       	std	Y+5, r18	; 0x05
    1a3e:	3e 83       	std	Y+6, r19	; 0x06
    1a40:	4f 83       	std	Y+7, r20	; 0x07
    1a42:	58 87       	std	Y+8, r21	; 0x08
    1a44:	69 87       	std	Y+9, r22	; 0x09
    1a46:	7a 87       	std	Y+10, r23	; 0x0a
    1a48:	8b 87       	std	Y+11, r24	; 0x0b
	int score = (msg.data[MSB] << 8);
    1a4a:	21 2f       	mov	r18, r17
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
	score |= msg.data[LSB];
    1a4e:	3e 2b       	or	r19, r30
	
	//OLED_reset();
	//OLED_print_pig();
	OLED_print_score(abs(score));
    1a50:	c9 01       	movw	r24, r18
    1a52:	99 23       	and	r25, r25
    1a54:	24 f4       	brge	.+8      	; 0x1a5e <GAME_print_score+0x48>
    1a56:	88 27       	eor	r24, r24
    1a58:	99 27       	eor	r25, r25
    1a5a:	82 1b       	sub	r24, r18
    1a5c:	93 0b       	sbc	r25, r19
    1a5e:	0e 94 ce 14 	call	0x299c	; 0x299c <OLED_print_score>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a62:	83 ed       	ldi	r24, 0xD3	; 211
    1a64:	90 e3       	ldi	r25, 0x30	; 48
    1a66:	01 97       	sbiw	r24, 0x01	; 1
    1a68:	f1 f7       	brne	.-4      	; 0x1a66 <GAME_print_score+0x50>
    1a6a:	00 c0       	rjmp	.+0      	; 0x1a6c <GAME_print_score+0x56>
    1a6c:	00 00       	nop
	_delay_ms(50);
}
    1a6e:	2b 96       	adiw	r28, 0x0b	; 11
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	ef 90       	pop	r14
    1a86:	08 95       	ret

00001a88 <GAME_print_finalscore>:
// 		}
// 	}
// 	
// }

void GAME_print_finalscore(CAN_message msg){
    1a88:	af 92       	push	r10
    1a8a:	bf 92       	push	r11
    1a8c:	cf 92       	push	r12
    1a8e:	df 92       	push	r13
    1a90:	ef 92       	push	r14
    1a92:	ff 92       	push	r15
    1a94:	0f 93       	push	r16
    1a96:	1f 93       	push	r17
    1a98:	cf 93       	push	r28
    1a9a:	df 93       	push	r29
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62
    1aa0:	65 97       	sbiw	r28, 0x15	; 21
    1aa2:	0f b6       	in	r0, 0x3f	; 63
    1aa4:	f8 94       	cli
    1aa6:	de bf       	out	0x3e, r29	; 62
    1aa8:	0f be       	out	0x3f, r0	; 63
    1aaa:	cd bf       	out	0x3d, r28	; 61
	int score = (msg.data[MSB] << 8);
    1aac:	e1 2e       	mov	r14, r17
    1aae:	f1 2c       	mov	r15, r1
	score |= msg.data[LSB];
    1ab0:	f2 2a       	or	r15, r18
	int temp;
	OLED_reset();
    1ab2:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	OLED_go_to_pos(0, 22);
    1ab6:	66 e1       	ldi	r22, 0x16	; 22
    1ab8:	80 e0       	ldi	r24, 0x00	; 0
    1aba:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	OLED_print_sentence("GAME OVER!");
    1abe:	8c e0       	ldi	r24, 0x0C	; 12
    1ac0:	91 e0       	ldi	r25, 0x01	; 1
    1ac2:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
	OLED_go_to_pos(2, 11);
    1ac6:	6b e0       	ldi	r22, 0x0B	; 11
    1ac8:	82 e0       	ldi	r24, 0x02	; 2
    1aca:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	OLED_print_sentence("Final Score: ");
    1ace:	87 e1       	ldi	r24, 0x17	; 23
    1ad0:	91 e0       	ldi	r25, 0x01	; 1
    1ad2:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
	OLED_go_to_pos(3, 44);
    1ad6:	6c e2       	ldi	r22, 0x2C	; 44
    1ad8:	83 e0       	ldi	r24, 0x03	; 3
    1ada:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	char scorechar[10];
	sprintf(scorechar, "%d", score);
    1ade:	ff 92       	push	r15
    1ae0:	1f 93       	push	r17
    1ae2:	85 e2       	ldi	r24, 0x25	; 37
    1ae4:	91 e0       	ldi	r25, 0x01	; 1
    1ae6:	9f 93       	push	r25
    1ae8:	8f 93       	push	r24
    1aea:	8e 01       	movw	r16, r28
    1aec:	0f 5f       	subi	r16, 0xFF	; 255
    1aee:	1f 4f       	sbci	r17, 0xFF	; 255
    1af0:	1f 93       	push	r17
    1af2:	0f 93       	push	r16
    1af4:	0e 94 09 17 	call	0x2e12	; 0x2e12 <sprintf>
	OLED_print_sentence(scorechar);
    1af8:	c8 01       	movw	r24, r16
    1afa:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	0f 90       	pop	r0
	for (int i = 0; i < 5; i++){
    1b0a:	00 e0       	ldi	r16, 0x00	; 0
    1b0c:	10 e0       	ldi	r17, 0x00	; 0
		if (score > EEPROM_read_int(i)){
    1b0e:	c8 01       	movw	r24, r16
    1b10:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <EEPROM_read_int>
    1b14:	8e 15       	cp	r24, r14
    1b16:	9f 05       	cpc	r25, r15
    1b18:	24 f5       	brge	.+72     	; 0x1b62 <GAME_print_finalscore+0xda>
			if (i != 4){
				for (int j = 4; j > i; j--){
    1b1a:	04 30       	cpi	r16, 0x04	; 4
    1b1c:	11 05       	cpc	r17, r1
    1b1e:	a4 f4       	brge	.+40     	; 0x1b48 <GAME_print_finalscore+0xc0>
    1b20:	68 94       	set
    1b22:	aa 24       	eor	r10, r10
    1b24:	a2 f8       	bld	r10, 2
    1b26:	b1 2c       	mov	r11, r1
					EEPROM_write_int(j, EEPROM_read_int(j-1));
    1b28:	65 01       	movw	r12, r10
    1b2a:	81 e0       	ldi	r24, 0x01	; 1
    1b2c:	c8 1a       	sub	r12, r24
    1b2e:	d1 08       	sbc	r13, r1
    1b30:	c6 01       	movw	r24, r12
    1b32:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <EEPROM_read_int>
    1b36:	bc 01       	movw	r22, r24
    1b38:	c5 01       	movw	r24, r10
    1b3a:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
	sprintf(scorechar, "%d", score);
	OLED_print_sentence(scorechar);
	for (int i = 0; i < 5; i++){
		if (score > EEPROM_read_int(i)){
			if (i != 4){
				for (int j = 4; j > i; j--){
    1b3e:	c0 16       	cp	r12, r16
    1b40:	d1 06       	cpc	r13, r17
    1b42:	11 f0       	breq	.+4      	; 0x1b48 <GAME_print_finalscore+0xc0>
    1b44:	56 01       	movw	r10, r12
    1b46:	f0 cf       	rjmp	.-32     	; 0x1b28 <GAME_print_finalscore+0xa0>
					EEPROM_write_int(j, EEPROM_read_int(j-1));
				}
			}
			EEPROM_write_int(i, score);
    1b48:	b7 01       	movw	r22, r14
    1b4a:	c8 01       	movw	r24, r16
    1b4c:	0e 94 86 0c 	call	0x190c	; 0x190c <EEPROM_write_int>
			OLED_go_to_pos(4, 10);
    1b50:	6a e0       	ldi	r22, 0x0A	; 10
    1b52:	84 e0       	ldi	r24, 0x04	; 4
    1b54:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
			OLED_print_sentence("NEW HIGHSCORE!");
    1b58:	88 e2       	ldi	r24, 0x28	; 40
    1b5a:	91 e0       	ldi	r25, 0x01	; 1
    1b5c:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
			break;
    1b60:	05 c0       	rjmp	.+10     	; 0x1b6c <GAME_print_finalscore+0xe4>
	OLED_print_sentence("Final Score: ");
	OLED_go_to_pos(3, 44);
	char scorechar[10];
	sprintf(scorechar, "%d", score);
	OLED_print_sentence(scorechar);
	for (int i = 0; i < 5; i++){
    1b62:	0f 5f       	subi	r16, 0xFF	; 255
    1b64:	1f 4f       	sbci	r17, 0xFF	; 255
    1b66:	05 30       	cpi	r16, 0x05	; 5
    1b68:	11 05       	cpc	r17, r1
    1b6a:	89 f6       	brne	.-94     	; 0x1b0e <GAME_print_finalscore+0x86>
			OLED_print_sentence("NEW HIGHSCORE!");
			break;
		}
	}
	
}
    1b6c:	65 96       	adiw	r28, 0x15	; 21
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	de bf       	out	0x3e, r29	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	cd bf       	out	0x3d, r28	; 61
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	df 90       	pop	r13
    1b86:	cf 90       	pop	r12
    1b88:	bf 90       	pop	r11
    1b8a:	af 90       	pop	r10
    1b8c:	08 95       	ret

00001b8e <GAME_print_highscores>:
// 	}
// 	
// }


void GAME_print_highscores(){
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	cf 93       	push	r28
    1b94:	df 93       	push	r29
	int score;
	int place;
	OLED_reset();
    1b96:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	OLED_print_sentence("HIGHSCORES:");
    1b9a:	87 e3       	ldi	r24, 0x37	; 55
    1b9c:	91 e0       	ldi	r25, 0x01	; 1
    1b9e:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
	for (int i = 0; i < 5; i++){
    1ba2:	80 e0       	ldi	r24, 0x00	; 0
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
		place = i+1;
    1ba6:	ec 01       	movw	r28, r24
    1ba8:	21 96       	adiw	r28, 0x01	; 1
		score = EEPROM_read_int(i);
    1baa:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <EEPROM_read_int>
    1bae:	8c 01       	movw	r16, r24
		OLED_go_to_pos(i+1, 10);
    1bb0:	6a e0       	ldi	r22, 0x0A	; 10
    1bb2:	8c 2f       	mov	r24, r28
    1bb4:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
		OLED_print_int(place);
    1bb8:	ce 01       	movw	r24, r28
    1bba:	0e 94 f7 13 	call	0x27ee	; 0x27ee <OLED_print_int>
		OLED_print_sentence(". ");
    1bbe:	83 e4       	ldi	r24, 0x43	; 67
    1bc0:	91 e0       	ldi	r25, 0x01	; 1
    1bc2:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
		OLED_print_int(score);
    1bc6:	c8 01       	movw	r24, r16
    1bc8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <OLED_print_int>
void GAME_print_highscores(){
	int score;
	int place;
	OLED_reset();
	OLED_print_sentence("HIGHSCORES:");
	for (int i = 0; i < 5; i++){
    1bcc:	c5 30       	cpi	r28, 0x05	; 5
    1bce:	d1 05       	cpc	r29, r1
    1bd0:	11 f0       	breq	.+4      	; 0x1bd6 <GAME_print_highscores+0x48>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	e8 cf       	rjmp	.-48     	; 0x1ba6 <GAME_print_highscores+0x18>
		OLED_print_int(place);
		OLED_print_sentence(". ");
		OLED_print_int(score);
	}
	
}
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	1f 91       	pop	r17
    1bdc:	0f 91       	pop	r16
    1bde:	08 95       	ret

00001be0 <calibrate>:
 *  \param void
 *
 *  \return Joy_pos, Returns a struct: Joy_pos, containing calibration values.
 */

Joy_pos calibrate(){
    1be0:	cf 93       	push	r28
	Joy_pos newPos;
	newPos.x = ADC_read(1);
    1be2:	81 e0       	ldi	r24, 0x01	; 1
    1be4:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1be8:	c8 2f       	mov	r28, r24
	newPos.y = ADC_read(2);
    1bea:	82 e0       	ldi	r24, 0x02	; 2
    1bec:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1bf0:	28 2f       	mov	r18, r24
	return newPos;
    1bf2:	6c 2f       	mov	r22, r28
    1bf4:	70 e0       	ldi	r23, 0x00	; 0
    1bf6:	82 2f       	mov	r24, r18
    1bf8:	90 e0       	ldi	r25, 0x00	; 0
}
    1bfa:	cf 91       	pop	r28
    1bfc:	08 95       	ret

00001bfe <getJoyPos>:
 *  \param void
 *
 *  \return Joy_pos, Returns a struct: Joy_pos, containing position.
 */

Joy_pos getJoyPos(){
    1bfe:	0f 93       	push	r16
    1c00:	1f 93       	push	r17
    1c02:	cf 93       	push	r28
	Joy_pos position;
	int x = ADC_read(2);
    1c04:	82 e0       	ldi	r24, 0x02	; 2
    1c06:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1c0a:	c8 2f       	mov	r28, r24
	int y = ADC_read(1);
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1c12:	48 2f       	mov	r20, r24
	
	//converts positions to +- 100
	position.x = x - initialPosition.x;
    1c14:	60 91 9d 03 	lds	r22, 0x039D
    1c18:	70 91 9e 03 	lds	r23, 0x039E
	position.x *= 100;
	position.x /= initialPosition.x;
	
	position.y = y - initialPosition.y;
    1c1c:	e0 91 9f 03 	lds	r30, 0x039F
    1c20:	f0 91 a0 03 	lds	r31, 0x03A0
 *  \return Joy_pos, Returns a struct: Joy_pos, containing position.
 */

Joy_pos getJoyPos(){
	Joy_pos position;
	int x = ADC_read(2);
    1c24:	ac 2f       	mov	r26, r28
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
	int y = ADC_read(1);
	
	//converts positions to +- 100
	position.x = x - initialPosition.x;
    1c28:	a6 1b       	sub	r26, r22
    1c2a:	b7 0b       	sbc	r27, r23
	position.x *= 100;
    1c2c:	c4 e6       	ldi	r28, 0x64	; 100
    1c2e:	ca 9f       	mul	r28, r26
    1c30:	c0 01       	movw	r24, r0
    1c32:	cb 9f       	mul	r28, r27
    1c34:	90 0d       	add	r25, r0
    1c36:	11 24       	eor	r1, r1
	position.x /= initialPosition.x;
    1c38:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__divmodhi4>
	
	position.y = y - initialPosition.y;
	position.y *= 100;
	position.y /= initialPosition.y;

	return position;
    1c3c:	8b 01       	movw	r16, r22
 */

Joy_pos getJoyPos(){
	Joy_pos position;
	int x = ADC_read(2);
	int y = ADC_read(1);
    1c3e:	50 e0       	ldi	r21, 0x00	; 0
	//converts positions to +- 100
	position.x = x - initialPosition.x;
	position.x *= 100;
	position.x /= initialPosition.x;
	
	position.y = y - initialPosition.y;
    1c40:	4e 1b       	sub	r20, r30
    1c42:	5f 0b       	sbc	r21, r31
	position.y *= 100;
    1c44:	c4 9f       	mul	r28, r20
    1c46:	c0 01       	movw	r24, r0
    1c48:	c5 9f       	mul	r28, r21
    1c4a:	90 0d       	add	r25, r0
    1c4c:	11 24       	eor	r1, r1
	position.y /= initialPosition.y;

	return position;
    1c4e:	bf 01       	movw	r22, r30
    1c50:	0e 94 96 16 	call	0x2d2c	; 0x2d2c <__divmodhi4>
    1c54:	9b 01       	movw	r18, r22
}
    1c56:	c9 01       	movw	r24, r18
    1c58:	b8 01       	movw	r22, r16
    1c5a:	cf 91       	pop	r28
    1c5c:	1f 91       	pop	r17
    1c5e:	0f 91       	pop	r16
    1c60:	08 95       	ret

00001c62 <getSliderPos>:
 *  \param void
 *
 *  \return Slider_pos, Returns a struct: Slider_pos, containing current values.
 */

Slider_pos getSliderPos(){
    1c62:	cf 93       	push	r28
	Slider_pos position;
	position.L = ADC_read(3);
    1c64:	83 e0       	ldi	r24, 0x03	; 3
    1c66:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1c6a:	c8 2f       	mov	r28, r24
	position.R = ADC_read(4);
    1c6c:	84 e0       	ldi	r24, 0x04	; 4
    1c6e:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1c72:	28 2f       	mov	r18, r24
	return position;
    1c74:	62 2f       	mov	r22, r18
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	8c 2f       	mov	r24, r28
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
}
    1c7c:	cf 91       	pop	r28
    1c7e:	08 95       	ret

00001c80 <joystick_init>:
 *  \param void
 *
 *  \return void
 */

void joystick_init(){
    1c80:	cf 93       	push	r28
    1c82:	df 93       	push	r29
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	2b 97       	sbiw	r28, 0x0b	; 11
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
	// Set up internal pull-up for PB2 Joystickbutton:
	set_bit(PORTB,PB2);
    1c94:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
    1c96:	ba 98       	cbi	0x17, 2	; 23
	//Saves initial position for calibration:
	initialPosition = calibrate();
    1c98:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <calibrate>
    1c9c:	60 93 9d 03 	sts	0x039D, r22
    1ca0:	70 93 9e 03 	sts	0x039E, r23
    1ca4:	80 93 9f 03 	sts	0x039F, r24
    1ca8:	90 93 a0 03 	sts	0x03A0, r25
    //Send initilizing CAN message for NODE2:
	CAN_message msg;
	msg.id=JOYSTICK_INIT;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	9a 83       	std	Y+2, r25	; 0x02
    1cb2:	89 83       	std	Y+1, r24	; 0x01
	msg.length=2;
    1cb4:	82 e0       	ldi	r24, 0x02	; 2
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[0]=initialPosition.x;
    1cb8:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1]=initialPosition.y;
    1cba:	80 91 9f 03 	lds	r24, 0x039F
    1cbe:	8d 83       	std	Y+5, r24	; 0x05
	CAN_message_send(&msg);
    1cc0:	ce 01       	movw	r24, r28
    1cc2:	01 96       	adiw	r24, 0x01	; 1
    1cc4:	0e 94 4e 0c 	call	0x189c	; 0x189c <CAN_message_send>
}
    1cc8:	2b 96       	adiw	r28, 0x0b	; 11
    1cca:	0f b6       	in	r0, 0x3f	; 63
    1ccc:	f8 94       	cli
    1cce:	de bf       	out	0x3e, r29	; 62
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	cd bf       	out	0x3d, r28	; 61
    1cd4:	df 91       	pop	r29
    1cd6:	cf 91       	pop	r28
    1cd8:	08 95       	ret

00001cda <getJoyDir>:
 *
 *  \return DIR, returns enum DIR.
 */

DIR getJoyDir(){
	Joy_pos position = getJoyPos();
    1cda:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <getJoyPos>
	if (position.x > 50){
    1cde:	63 33       	cpi	r22, 0x33	; 51
    1ce0:	71 05       	cpc	r23, r1
    1ce2:	b4 f4       	brge	.+44     	; 0x1d10 <getJoyDir+0x36>
		return RIGHT;
	}
	else if (position.x < -50){
    1ce4:	6e 3c       	cpi	r22, 0xCE	; 206
    1ce6:	ef ef       	ldi	r30, 0xFF	; 255
    1ce8:	7e 07       	cpc	r23, r30
    1cea:	a4 f0       	brlt	.+40     	; 0x1d14 <getJoyDir+0x3a>
		return LEFT;
	}
	else if (position.y < -50){
    1cec:	8e 3c       	cpi	r24, 0xCE	; 206
    1cee:	2f ef       	ldi	r18, 0xFF	; 255
    1cf0:	92 07       	cpc	r25, r18
    1cf2:	94 f0       	brlt	.+36     	; 0x1d18 <getJoyDir+0x3e>
		return DOWN;
	}
	else if (position.y > 50){
    1cf4:	83 33       	cpi	r24, 0x33	; 51
    1cf6:	91 05       	cpc	r25, r1
    1cf8:	8c f4       	brge	.+34     	; 0x1d1c <getJoyDir+0x42>
		return UP;
	}
	else if ((abs(position.x) < 5) && (abs(position.y) < 5)){
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	2c 5f       	subi	r18, 0xFC	; 252
    1cfe:	3f 4f       	sbci	r19, 0xFF	; 255
    1d00:	29 30       	cpi	r18, 0x09	; 9
    1d02:	31 05       	cpc	r19, r1
    1d04:	68 f4       	brcc	.+26     	; 0x1d20 <getJoyDir+0x46>
    1d06:	04 96       	adiw	r24, 0x04	; 4
    1d08:	09 97       	sbiw	r24, 0x09	; 9
    1d0a:	60 f0       	brcs	.+24     	; 0x1d24 <getJoyDir+0x4a>
		return NEUTRAL;
	}
	else{
		return NONE;
    1d0c:	85 e0       	ldi	r24, 0x05	; 5
    1d0e:	08 95       	ret
 */

DIR getJoyDir(){
	Joy_pos position = getJoyPos();
	if (position.x > 50){
		return RIGHT;
    1d10:	82 e0       	ldi	r24, 0x02	; 2
    1d12:	08 95       	ret
	}
	else if (position.x < -50){
		return LEFT;
    1d14:	83 e0       	ldi	r24, 0x03	; 3
    1d16:	08 95       	ret
	}
	else if (position.y < -50){
		return DOWN;
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	08 95       	ret
	}
	else if (position.y > 50){
		return UP;
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	08 95       	ret
	}
	else if ((abs(position.x) < 5) && (abs(position.y) < 5)){
		return NEUTRAL;
	}
	else{
		return NONE;
    1d20:	85 e0       	ldi	r24, 0x05	; 5
    1d22:	08 95       	ret
	}
	else if (position.y > 50){
		return UP;
	}
	else if ((abs(position.x) < 5) && (abs(position.y) < 5)){
		return NEUTRAL;
    1d24:	84 e0       	ldi	r24, 0x04	; 4
	}
	else{
		return NONE;
	}

}
    1d26:	08 95       	ret

00001d28 <rightButtonPressed>:
 *
 *  \return bool, returns true or false.
 */

bool rightButtonPressed(){	
	return (test_bit(PINB, PB0));
    1d28:	86 b3       	in	r24, 0x16	; 22
}
    1d2a:	81 70       	andi	r24, 0x01	; 1
    1d2c:	08 95       	ret

00001d2e <leftButtonPressed>:
 *
 *  \return bool, returns true or false.
 */

bool leftButtonPressed(){
	return (test_bit(PINB, PB1));
    1d2e:	86 b3       	in	r24, 0x16	; 22
}
    1d30:	86 95       	lsr	r24
    1d32:	81 70       	andi	r24, 0x01	; 1
    1d34:	08 95       	ret

00001d36 <joyStickButtonPressed>:
 *
 *  \return bool, returns true or false.
 */

bool joyStickButtonPressed(){
	bool pressed = !(test_bit(PINB, PB2));
    1d36:	86 b3       	in	r24, 0x16	; 22
    1d38:	82 fb       	bst	r24, 2
    1d3a:	88 27       	eor	r24, r24
    1d3c:	80 f9       	bld	r24, 0
	return pressed;
}
    1d3e:	91 e0       	ldi	r25, 0x01	; 1
    1d40:	89 27       	eor	r24, r25
    1d42:	08 95       	ret

00001d44 <IO_send_CAN>:
 *  \param DIR joystick_direction, takes in to send to NODE2.
 *
 *  \return void
 */

void IO_send_CAN(DIR joystick_direction){
    1d44:	cf 93       	push	r28
    1d46:	df 93       	push	r29
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	2b 97       	sbiw	r28, 0x0b	; 11
    1d4e:	0f b6       	in	r0, 0x3f	; 63
    1d50:	f8 94       	cli
    1d52:	de bf       	out	0x3e, r29	; 62
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	cd bf       	out	0x3d, r28	; 61
	CAN_message msg;
	ID id = PLAYERINPUT;
	uint8_t length = 7;
	msg.id = id;
    1d58:	1a 82       	std	Y+2, r1	; 0x02
    1d5a:	19 82       	std	Y+1, r1	; 0x01
	msg.length = length;
    1d5c:	97 e0       	ldi	r25, 0x07	; 7
    1d5e:	9b 83       	std	Y+3, r25	; 0x03
	msg.data[DIRECTION] = joystick_direction;
    1d60:	8c 83       	std	Y+4, r24	; 0x04
	msg.data[JOYSTICK_X] = ADC_read(2);
    1d62:	82 e0       	ldi	r24, 0x02	; 2
    1d64:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1d68:	8d 83       	std	Y+5, r24	; 0x05
	msg.data[JOYSTICK_Y] = ADC_read(1);
    1d6a:	81 e0       	ldi	r24, 0x01	; 1
    1d6c:	0e 94 df 0b 	call	0x17be	; 0x17be <ADC_read>
    1d70:	8e 83       	std	Y+6, r24	; 0x06
	//Saves and sends sliderposition:
	Slider_pos slider = getSliderPos();
    1d72:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <getSliderPos>
	msg.data[RIGHT_SLIDER] = slider.R;
    1d76:	6f 83       	std	Y+7, r22	; 0x07
	msg.data[LEFT_SLIDER] = slider.L;
    1d78:	88 87       	std	Y+8, r24	; 0x08
	msg.data[RIGHT_BUTTON] = rightButtonPressed();
    1d7a:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <rightButtonPressed>
    1d7e:	89 87       	std	Y+9, r24	; 0x09
	msg.data[LEFT_BUTTON] = leftButtonPressed();
    1d80:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <leftButtonPressed>
    1d84:	8a 87       	std	Y+10, r24	; 0x0a
	CAN_message_send(&msg);
    1d86:	ce 01       	movw	r24, r28
    1d88:	01 96       	adiw	r24, 0x01	; 1
    1d8a:	0e 94 4e 0c 	call	0x189c	; 0x189c <CAN_message_send>
}
    1d8e:	2b 96       	adiw	r28, 0x0b	; 11
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	df 91       	pop	r29
    1d9c:	cf 91       	pop	r28
    1d9e:	08 95       	ret

00001da0 <main>:
	MENU,
	GAME
} STATE;

int main(void)
{
    1da0:	cf 93       	push	r28
    1da2:	df 93       	push	r29
    1da4:	cd b7       	in	r28, 0x3d	; 61
    1da6:	de b7       	in	r29, 0x3e	; 62
    1da8:	60 97       	sbiw	r28, 0x10	; 16
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	de bf       	out	0x3e, r29	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	cd bf       	out	0x3d, r28	; 61
	
	USART_init();
    1db4:	0e 94 88 16 	call	0x2d10	; 0x2d10 <USART_init>
	set_bit(MCUCR, SRE);
    1db8:	85 b7       	in	r24, 0x35	; 53
    1dba:	80 68       	ori	r24, 0x80	; 128
    1dbc:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
    1dbe:	80 b7       	in	r24, 0x30	; 48
    1dc0:	80 62       	ori	r24, 0x20	; 32
    1dc2:	80 bf       	out	0x30, r24	; 48
	set_bit(MCUCR,SRW10);
    1dc4:	85 b7       	in	r24, 0x35	; 53
    1dc6:	80 64       	ori	r24, 0x40	; 64
    1dc8:	85 bf       	out	0x35, r24	; 53
	set_bit(EMCUCR,SRW11);
    1dca:	86 b7       	in	r24, 0x36	; 54
    1dcc:	82 60       	ori	r24, 0x02	; 2
    1dce:	86 bf       	out	0x36, r24	; 54
	
	
	set_bit(DDRD, 6); // Write pin Atmega, output
    1dd0:	8e 9a       	sbi	0x11, 6	; 17
	set_bit(DDRD, 7); // Read Pin Atmega, output
    1dd2:	8f 9a       	sbi	0x11, 7	; 17
	set_bit(DDRE, 1); //Adresse Latch Enable
    1dd4:	31 9a       	sbi	0x06, 1	; 6
	clear_bit(DDRB, 6);
    1dd6:	be 98       	cbi	0x17, 6	; 23
	clear_bit(DDRB, 7);
    1dd8:	bf 98       	cbi	0x17, 7	; 23
	clear_bit(DDRB, 8);
    1dda:	87 b3       	in	r24, 0x17	; 23
    1ddc:	87 bb       	out	0x17, r24	; 23
	ADC_init();
    1dde:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <ADC_init>
	OLED_init();
    1de2:	0e 94 48 14 	call	0x2890	; 0x2890 <OLED_init>
	CAN_init();
    1de6:	0e 94 ed 0b 	call	0x17da	; 0x17da <CAN_init>
	joystick_init(); // NB! Must be initialized after CAN:
    1dea:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <joystick_init>
	MENU_init_menu();
    1dee:	0e 94 fb 0f 	call	0x1ff6	; 0x1ff6 <MENU_init_menu>
	DIR joystick_direction = NEUTRAL;
	MENU_print_menu();
    1df2:	0e 94 b6 11 	call	0x236c	; 0x236c <MENU_print_menu>
	volatile game_settings settings;
	volatile uint8_t startgame = 0;
    1df6:	1d 82       	std	Y+5, r1	; 0x05
	STATE state= MENU;
    1df8:	d1 2c       	mov	r13, r1
							
							CAN_send_game_settings(settings);
							MENU_goto_main_menu();
							OLED_reset();
							OLED_print_pig();
							state = GAME;
    1dfa:	cc 24       	eor	r12, r12
    1dfc:	c3 94       	inc	r12
	volatile game_settings settings;
	volatile uint8_t startgame = 0;
	STATE state= MENU;
	volatile int score;
	while(1){
		switch(state){
    1dfe:	dd 20       	and	r13, r13
    1e00:	21 f0       	breq	.+8      	; 0x1e0a <main+0x6a>
    1e02:	21 e0       	ldi	r18, 0x01	; 1
    1e04:	d2 16       	cp	r13, r18
    1e06:	a1 f1       	breq	.+104    	; 0x1e70 <main+0xd0>
    1e08:	fa cf       	rjmp	.-12     	; 0x1dfe <main+0x5e>
			case MENU:
				joystick_direction = getJoyDir();
    1e0a:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <getJoyDir>
    1e0e:	18 2f       	mov	r17, r24
    1e10:	8f ef       	ldi	r24, 0xFF	; 255
    1e12:	9f e7       	ldi	r25, 0x7F	; 127
    1e14:	21 e0       	ldi	r18, 0x01	; 1
    1e16:	81 50       	subi	r24, 0x01	; 1
    1e18:	90 40       	sbci	r25, 0x00	; 0
    1e1a:	20 40       	sbci	r18, 0x00	; 0
    1e1c:	e1 f7       	brne	.-8      	; 0x1e16 <main+0x76>
    1e1e:	00 c0       	rjmp	.+0      	; 0x1e20 <main+0x80>
    1e20:	00 c0       	rjmp	.+0      	; 0x1e22 <main+0x82>
				_delay_ms(100);
		
				if (getJoyDir() != joystick_direction){
    1e22:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <getJoyDir>
    1e26:	81 17       	cp	r24, r17
    1e28:	51 f3       	breq	.-44     	; 0x1dfe <main+0x5e>
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	90 ef       	ldi	r25, 0xF0	; 240
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <main+0x8e>
					_delay_ms(50);
					joystick_direction = getJoyDir();
    1e32:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <getJoyDir>
    1e36:	18 2f       	mov	r17, r24
					MENU_navigate(joystick_direction);
    1e38:	0e 94 1b 12 	call	0x2436	; 0x2436 <MENU_navigate>
			
					if (joystick_direction == RIGHT){
    1e3c:	12 30       	cpi	r17, 0x02	; 2
    1e3e:	f9 f6       	brne	.-66     	; 0x1dfe <main+0x5e>
						MENU_selectAction(&settings, &startgame);
    1e40:	be 01       	movw	r22, r28
    1e42:	6b 5f       	subi	r22, 0xFB	; 251
    1e44:	7f 4f       	sbci	r23, 0xFF	; 255
    1e46:	ce 01       	movw	r24, r28
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	0e 94 7f 12 	call	0x24fe	; 0x24fe <MENU_selectAction>
						if (startgame == 1){
    1e4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	a9 f6       	brne	.-86     	; 0x1dfe <main+0x5e>
							
							CAN_send_game_settings(settings);
    1e54:	69 81       	ldd	r22, Y+1	; 0x01
    1e56:	7a 81       	ldd	r23, Y+2	; 0x02
    1e58:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5c:	0e 94 ea 0c 	call	0x19d4	; 0x19d4 <CAN_send_game_settings>
							MENU_goto_main_menu();
    1e60:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <MENU_goto_main_menu>
							OLED_reset();
    1e64:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
							OLED_print_pig();
    1e68:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <OLED_print_pig>
							state = GAME;
    1e6c:	dc 2c       	mov	r13, r12
    1e6e:	c7 cf       	rjmp	.-114    	; 0x1dfe <main+0x5e>
					}
				}
				break;
				
			case GAME:
				joystick_direction = getJoyDir();
    1e70:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <getJoyDir>
				IO_send_CAN(joystick_direction);
    1e74:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <IO_send_CAN>
				CAN_message msg;
				CAN_message_recieve(&msg);
    1e78:	ce 01       	movw	r24, r28
    1e7a:	06 96       	adiw	r24, 0x06	; 6
    1e7c:	0e 94 00 0c 	call	0x1800	; 0x1800 <CAN_message_recieve>
				
				if (msg.id == SENDSCORE){
    1e80:	8e 81       	ldd	r24, Y+6	; 0x06
    1e82:	9f 81       	ldd	r25, Y+7	; 0x07
    1e84:	03 97       	sbiw	r24, 0x03	; 3
    1e86:	69 f4       	brne	.+26     	; 0x1ea2 <main+0x102>
					GAME_print_score(msg);
    1e88:	ee 80       	ldd	r14, Y+6	; 0x06
    1e8a:	ff 80       	ldd	r15, Y+7	; 0x07
    1e8c:	08 85       	ldd	r16, Y+8	; 0x08
    1e8e:	19 85       	ldd	r17, Y+9	; 0x09
    1e90:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e92:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e94:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e96:	5d 85       	ldd	r21, Y+13	; 0x0d
    1e98:	6e 85       	ldd	r22, Y+14	; 0x0e
    1e9a:	7f 85       	ldd	r23, Y+15	; 0x0f
    1e9c:	88 89       	ldd	r24, Y+16	; 0x10
    1e9e:	0e 94 0b 0d 	call	0x1a16	; 0x1a16 <GAME_print_score>

				}
				if (msg.id == GAMEOVER){
    1ea2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ea4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ea6:	04 97       	sbiw	r24, 0x04	; 4
    1ea8:	09 f0       	breq	.+2      	; 0x1eac <main+0x10c>
    1eaa:	a9 cf       	rjmp	.-174    	; 0x1dfe <main+0x5e>
					GAME_print_finalscore(msg);
    1eac:	ee 80       	ldd	r14, Y+6	; 0x06
    1eae:	ff 80       	ldd	r15, Y+7	; 0x07
    1eb0:	08 85       	ldd	r16, Y+8	; 0x08
    1eb2:	19 85       	ldd	r17, Y+9	; 0x09
    1eb4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1eb6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1eb8:	4c 85       	ldd	r20, Y+12	; 0x0c
    1eba:	5d 85       	ldd	r21, Y+13	; 0x0d
    1ebc:	6e 85       	ldd	r22, Y+14	; 0x0e
    1ebe:	7f 85       	ldd	r23, Y+15	; 0x0f
    1ec0:	88 89       	ldd	r24, Y+16	; 0x10
    1ec2:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <GAME_print_finalscore>
					OLED_go_to_pos(6,1);
    1ec6:	6c 2d       	mov	r22, r12
    1ec8:	86 e0       	ldi	r24, 0x06	; 6
    1eca:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
					OLED_print_sentence("Press any button");
    1ece:	86 e4       	ldi	r24, 0x46	; 70
    1ed0:	91 e0       	ldi	r25, 0x01	; 1
    1ed2:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
					OLED_go_to_pos(7,10);
    1ed6:	6a e0       	ldi	r22, 0x0A	; 10
    1ed8:	87 e0       	ldi	r24, 0x07	; 7
    1eda:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
					OLED_print_sentence("to go to menu");
    1ede:	87 e5       	ldi	r24, 0x57	; 87
    1ee0:	91 e0       	ldi	r25, 0x01	; 1
    1ee2:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
					while (!leftButtonPressed() && !rightButtonPressed() && !joyStickButtonPressed()){}
    1ee6:	0e 94 97 0e 	call	0x1d2e	; 0x1d2e <leftButtonPressed>
    1eea:	81 11       	cpse	r24, r1
    1eec:	08 c0       	rjmp	.+16     	; 0x1efe <main+0x15e>
    1eee:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <rightButtonPressed>
    1ef2:	81 11       	cpse	r24, r1
    1ef4:	04 c0       	rjmp	.+8      	; 0x1efe <main+0x15e>
    1ef6:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <joyStickButtonPressed>
    1efa:	88 23       	and	r24, r24
    1efc:	a1 f3       	breq	.-24     	; 0x1ee6 <main+0x146>
					//_delay_ms(2000);
					MENU_goto_main_menu();
    1efe:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <MENU_goto_main_menu>
					startgame = 0;
    1f02:	1d 82       	std	Y+5, r1	; 0x05
					state = MENU;
    1f04:	d1 2c       	mov	r13, r1
    1f06:	7b cf       	rjmp	.-266    	; 0x1dfe <main+0x5e>

00001f08 <MCP2515_read>:
 *  \param uint8_t address, command to SPI.
 *
 *  \return uint8_t result, returns contents of SPI register.
 */

uint8_t MCP2515_read(uint8_t address){
    1f08:	cf 93       	push	r28
    1f0a:	c8 2f       	mov	r28, r24
	SPI_chipSelect(CHIPLOW);
    1f0c:	80 e0       	ldi	r24, 0x00	; 0
    1f0e:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
    // Write command to SPI:
	SPI_write(MCP_READ);
    1f12:	83 e0       	ldi	r24, 0x03	; 3
    1f14:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    // Read adress:
	SPI_write(address);
    1f18:	8c 2f       	mov	r24, r28
    1f1a:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    // Get adress-data from SPI:
	uint8_t result = SPI_read();
    1f1e:	0e 94 6d 16 	call	0x2cda	; 0x2cda <SPI_read>
    1f22:	c8 2f       	mov	r28, r24
	SPI_chipSelect(CHIPHIGH);
    1f24:	81 e0       	ldi	r24, 0x01	; 1
    1f26:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
	return result;
	
}
    1f2a:	8c 2f       	mov	r24, r28
    1f2c:	cf 91       	pop	r28
    1f2e:	08 95       	ret

00001f30 <MCP2515_write>:
 *  \param uint8_t data, Data to be sent.
 *
 *  \return void
 */

void MCP2515_write(uint8_t address, uint8_t data){
    1f30:	cf 93       	push	r28
    1f32:	df 93       	push	r29
    1f34:	d8 2f       	mov	r29, r24
    1f36:	c6 2f       	mov	r28, r22
	SPI_chipSelect(CHIPLOW);
    1f38:	80 e0       	ldi	r24, 0x00	; 0
    1f3a:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
    // Write command to SPI:
	SPI_write(MCP_WRITE);
    1f3e:	82 e0       	ldi	r24, 0x02	; 2
    1f40:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    // Select Adress to write to:
	SPI_write(address);
    1f44:	8d 2f       	mov	r24, r29
    1f46:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    // Write data to adress:
	SPI_write(data);
    1f4a:	8c 2f       	mov	r24, r28
    1f4c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
	SPI_chipSelect(CHIPHIGH);
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <MCP2515_requestToSend>:
 *  \param uint8_t adress, command to SPI
 *
 *  \return void
 */

void MCP2515_requestToSend(uint8_t address){
    1f5c:	cf 93       	push	r28
    1f5e:	c8 2f       	mov	r28, r24
	SPI_chipSelect(CHIPLOW);
    1f60:	80 e0       	ldi	r24, 0x00	; 0
    1f62:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
	if(address == MCP_RTS_TX0 || address == MCP_RTS_TX1 || address == MCP_RTS_TX2 || address == MCP_RTS_ALL){
    1f66:	8f e7       	ldi	r24, 0x7F	; 127
    1f68:	8c 0f       	add	r24, r28
    1f6a:	82 30       	cpi	r24, 0x02	; 2
    1f6c:	20 f0       	brcs	.+8      	; 0x1f76 <MCP2515_requestToSend+0x1a>
    1f6e:	c4 38       	cpi	r28, 0x84	; 132
    1f70:	11 f0       	breq	.+4      	; 0x1f76 <MCP2515_requestToSend+0x1a>
    1f72:	c7 38       	cpi	r28, 0x87	; 135
    1f74:	21 f4       	brne	.+8      	; 0x1f7e <MCP2515_requestToSend+0x22>
		SPI_write(address);	
    1f76:	8c 2f       	mov	r24, r28
    1f78:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    1f7c:	0c c0       	rjmp	.+24     	; 0x1f96 <MCP2515_requestToSend+0x3a>
	}
	
	else{
        // SPI write error prints pig on OLED:
		OLED_print_pig();
    1f7e:	0e 94 26 16 	call	0x2c4c	; 0x2c4c <OLED_print_pig>
    1f82:	2a e2       	ldi	r18, 0x2A	; 42
    1f84:	30 e5       	ldi	r19, 0x50	; 80
    1f86:	8e ef       	ldi	r24, 0xFE	; 254
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	21 50       	subi	r18, 0x01	; 1
    1f8c:	30 40       	sbci	r19, 0x00	; 0
    1f8e:	80 40       	sbci	r24, 0x00	; 0
    1f90:	90 40       	sbci	r25, 0x00	; 0
    1f92:	d9 f7       	brne	.-10     	; 0x1f8a <MCP2515_requestToSend+0x2e>
    1f94:	00 00       	nop
		_delay_ms(100000);
	}
	SPI_chipSelect(CHIPHIGH);
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
}
    1f9c:	cf 91       	pop	r28
    1f9e:	08 95       	ret

00001fa0 <MCP2515_bitModify>:
 *  \param uint8_t data,
 *
 *  \return void
 */

void MCP2515_bitModify(uint8_t address ,uint8_t maskByte, uint8_t data){
    1fa0:	1f 93       	push	r17
    1fa2:	cf 93       	push	r28
    1fa4:	df 93       	push	r29
    1fa6:	18 2f       	mov	r17, r24
    1fa8:	d6 2f       	mov	r29, r22
    1faa:	c4 2f       	mov	r28, r20
	SPI_chipSelect(CHIPLOW);
    1fac:	80 e0       	ldi	r24, 0x00	; 0
    1fae:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
    // Write command to SPI:
	SPI_write(MCP_BITMOD);
    1fb2:	85 e0       	ldi	r24, 0x05	; 5
    1fb4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    // Address of data to be masked/modified:
	SPI_write(address);
    1fb8:	81 2f       	mov	r24, r17
    1fba:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    // Masks the data:
	SPI_write(maskByte);
    1fbe:	8d 2f       	mov	r24, r29
    1fc0:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
    // Writes masked data:
	SPI_write(data);
    1fc4:	8c 2f       	mov	r24, r28
    1fc6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
	SPI_chipSelect(CHIPHIGH);
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
}
    1fd0:	df 91       	pop	r29
    1fd2:	cf 91       	pop	r28
    1fd4:	1f 91       	pop	r17
    1fd6:	08 95       	ret

00001fd8 <MCP2515_reset>:
 *
 *  \return void
 */

void MCP2515_reset(){
	SPI_chipSelect(CHIPLOW);
    1fd8:	80 e0       	ldi	r24, 0x00	; 0
    1fda:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
    // Write command to SPI:
	SPI_write(MCP_RESET);
    1fde:	80 ec       	ldi	r24, 0xC0	; 192
    1fe0:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <SPI_write>
	SPI_chipSelect(CHIPHIGH);
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	0e 94 7a 16 	call	0x2cf4	; 0x2cf4 <SPI_chipSelect>
    1fea:	08 95       	ret

00001fec <MCP2515_init>:
 *
 *  \return void
 */

uint8_t MCP2515_init(){
	SPI_init();
    1fec:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <SPI_init>
	MCP2515_reset();
    1ff0:	0e 94 ec 0f 	call	0x1fd8	; 0x1fd8 <MCP2515_reset>
}
    1ff4:	08 95       	ret

00001ff6 <MENU_init_menu>:
 *  \param void
 *
 *  \return void
 */

void MENU_init_menu(){
    1ff6:	6f 92       	push	r6
    1ff8:	7f 92       	push	r7
    1ffa:	8f 92       	push	r8
    1ffc:	9f 92       	push	r9
    1ffe:	af 92       	push	r10
    2000:	bf 92       	push	r11
    2002:	cf 92       	push	r12
    2004:	df 92       	push	r13
    2006:	ef 92       	push	r14
    2008:	ff 92       	push	r15
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	cf 93       	push	r28
    2010:	df 93       	push	r29
	
	main.name = "MainMenu";
    2012:	0f 2e       	mov	r0, r31
    2014:	fc e8       	ldi	r31, 0x8C	; 140
    2016:	6f 2e       	mov	r6, r31
    2018:	f3 e0       	ldi	r31, 0x03	; 3
    201a:	7f 2e       	mov	r7, r31
    201c:	f0 2d       	mov	r31, r0
    201e:	85 e6       	ldi	r24, 0x65	; 101
    2020:	91 e0       	ldi	r25, 0x01	; 1
    2022:	d3 01       	movw	r26, r6
    2024:	8d 93       	st	X+, r24
    2026:	9c 93       	st	X, r25
	main.parent = NULL;
    2028:	10 92 8f 03 	sts	0x038F, r1
    202c:	10 92 8e 03 	sts	0x038E, r1
	main.child[1] = &newGame;
    2030:	cb e7       	ldi	r28, 0x7B	; 123
    2032:	d3 e0       	ldi	r29, 0x03	; 3
    2034:	d0 93 93 03 	sts	0x0393, r29
    2038:	c0 93 92 03 	sts	0x0392, r28
	main.child[2] = &HighScores;
    203c:	8a e6       	ldi	r24, 0x6A	; 106
    203e:	93 e0       	ldi	r25, 0x03	; 3
    2040:	90 93 95 03 	sts	0x0395, r25
    2044:	80 93 94 03 	sts	0x0394, r24
	main.child[3] = &Options;
    2048:	e9 e5       	ldi	r30, 0x59	; 89
    204a:	f3 e0       	ldi	r31, 0x03	; 3
    204c:	f0 93 97 03 	sts	0x0397, r31
    2050:	e0 93 96 03 	sts	0x0396, r30
	main.child[4] = &Credits;
    2054:	44 e0       	ldi	r20, 0x04	; 4
    2056:	53 e0       	ldi	r21, 0x03	; 3
    2058:	50 93 99 03 	sts	0x0399, r21
    205c:	40 93 98 03 	sts	0x0398, r20
	main.nmbrChilds = 4;
    2060:	24 e0       	ldi	r18, 0x04	; 4
    2062:	20 93 9c 03 	sts	0x039C, r18
	
	//main menu children
	newGame.name = "New Game";
    2066:	2e e6       	ldi	r18, 0x6E	; 110
    2068:	31 e0       	ldi	r19, 0x01	; 1
    206a:	39 83       	std	Y+1, r19	; 0x01
    206c:	28 83       	st	Y, r18
	newGame.parent = &main;
    206e:	70 92 7e 03 	sts	0x037E, r7
    2072:	60 92 7d 03 	sts	0x037D, r6
	newGame.child[1] = &easyGame;
    2076:	07 e3       	ldi	r16, 0x37	; 55
    2078:	13 e0       	ldi	r17, 0x03	; 3
    207a:	10 93 82 03 	sts	0x0382, r17
    207e:	00 93 81 03 	sts	0x0381, r16
	newGame.child[2] = &normalGame;
    2082:	66 e2       	ldi	r22, 0x26	; 38
    2084:	73 e0       	ldi	r23, 0x03	; 3
    2086:	70 93 84 03 	sts	0x0384, r23
    208a:	60 93 83 03 	sts	0x0383, r22
	newGame.child[3] = &hardGame;
    208e:	25 e1       	ldi	r18, 0x15	; 21
    2090:	33 e0       	ldi	r19, 0x03	; 3
    2092:	30 93 86 03 	sts	0x0386, r19
    2096:	20 93 85 03 	sts	0x0385, r18
	newGame.nmbrChilds = 3;	
    209a:	0f 2e       	mov	r0, r31
    209c:	f3 e0       	ldi	r31, 0x03	; 3
    209e:	9f 2e       	mov	r9, r31
    20a0:	f0 2d       	mov	r31, r0
    20a2:	90 92 8b 03 	sts	0x038B, r9
	
		//New game children
 		easyGame.name = "Easy";
    20a6:	0f 2e       	mov	r0, r31
    20a8:	f7 e7       	ldi	r31, 0x77	; 119
    20aa:	ef 2e       	mov	r14, r31
    20ac:	f1 e0       	ldi	r31, 0x01	; 1
    20ae:	ff 2e       	mov	r15, r31
    20b0:	f0 2d       	mov	r31, r0
    20b2:	d8 01       	movw	r26, r16
    20b4:	ed 92       	st	X+, r14
    20b6:	fc 92       	st	X, r15
 		easyGame.parent = &newGame;
    20b8:	d0 93 3a 03 	sts	0x033A, r29
    20bc:	c0 93 39 03 	sts	0x0339, r28
 		easyGame.nmbrChilds = 0;
    20c0:	10 92 47 03 	sts	0x0347, r1

 		
 		normalGame.name = "Normal";
    20c4:	0c e7       	ldi	r16, 0x7C	; 124
    20c6:	11 e0       	ldi	r17, 0x01	; 1
    20c8:	db 01       	movw	r26, r22
    20ca:	0d 93       	st	X+, r16
    20cc:	1c 93       	st	X, r17
 		normalGame.parent = &newGame;
    20ce:	d0 93 29 03 	sts	0x0329, r29
    20d2:	c0 93 28 03 	sts	0x0328, r28
 		normalGame.nmbrChilds = 0;
    20d6:	10 92 36 03 	sts	0x0336, r1
 		
 		hardGame.name = "Hard";
    20da:	63 e8       	ldi	r22, 0x83	; 131
    20dc:	71 e0       	ldi	r23, 0x01	; 1
    20de:	d9 01       	movw	r26, r18
    20e0:	6d 93       	st	X+, r22
    20e2:	7c 93       	st	X, r23
 		hardGame.parent = &newGame;
    20e4:	d0 93 18 03 	sts	0x0318, r29
    20e8:	c0 93 17 03 	sts	0x0317, r28
 		hardGame.nmbrChilds = 0;
    20ec:	10 92 25 03 	sts	0x0325, r1
	
	HighScores.name = "High Scores";
    20f0:	28 e8       	ldi	r18, 0x88	; 136
    20f2:	31 e0       	ldi	r19, 0x01	; 1
    20f4:	dc 01       	movw	r26, r24
    20f6:	2d 93       	st	X+, r18
    20f8:	3c 93       	st	X, r19
	HighScores.parent = &main;
    20fa:	70 92 6d 03 	sts	0x036D, r7
    20fe:	60 92 6c 03 	sts	0x036C, r6
	HighScores.nmbrChilds = 0;
    2102:	10 92 7a 03 	sts	0x037A, r1

	Options.name = "Options";
    2106:	84 e9       	ldi	r24, 0x94	; 148
    2108:	91 e0       	ldi	r25, 0x01	; 1
    210a:	91 83       	std	Z+1, r25	; 0x01
    210c:	80 83       	st	Z, r24
	Options.parent = &main;
    210e:	70 92 5c 03 	sts	0x035C, r7
    2112:	60 92 5b 03 	sts	0x035B, r6
	Options.child[1] = &Controller;
    2116:	23 ef       	ldi	r18, 0xF3	; 243
    2118:	32 e0       	ldi	r19, 0x02	; 2
    211a:	30 93 60 03 	sts	0x0360, r19
    211e:	20 93 5f 03 	sts	0x035F, r18
	Options.child[2] = &Sound;
    2122:	60 ec       	ldi	r22, 0xC0	; 192
    2124:	72 e0       	ldi	r23, 0x02	; 2
    2126:	70 93 62 03 	sts	0x0362, r23
    212a:	60 93 61 03 	sts	0x0361, r22
	Options.child[3] = &SolenoidMode;
    212e:	cf ea       	ldi	r28, 0xAF	; 175
    2130:	d2 e0       	ldi	r29, 0x02	; 2
    2132:	d0 93 64 03 	sts	0x0364, r29
    2136:	c0 93 63 03 	sts	0x0363, r28
	Options.child[4] = &InvertedMode;
    213a:	8e e9       	ldi	r24, 0x9E	; 158
    213c:	92 e0       	ldi	r25, 0x02	; 2
    213e:	90 93 66 03 	sts	0x0366, r25
    2142:	80 93 65 03 	sts	0x0365, r24
	Options.child[5] = &resetHighscore;
    2146:	08 e3       	ldi	r16, 0x38	; 56
    2148:	12 e0       	ldi	r17, 0x02	; 2
    214a:	10 93 68 03 	sts	0x0368, r17
    214e:	00 93 67 03 	sts	0x0367, r16
	Options.nmbrChilds = 5;
    2152:	0f 2e       	mov	r0, r31
    2154:	f5 e0       	ldi	r31, 0x05	; 5
    2156:	ff 2e       	mov	r15, r31
    2158:	f0 2d       	mov	r31, r0
    215a:	f0 92 69 03 	sts	0x0369, r15

		//options children
		Controller.name = "Controller sel";
    215e:	0f 2e       	mov	r0, r31
    2160:	fc e9       	ldi	r31, 0x9C	; 156
    2162:	ef 2e       	mov	r14, r31
    2164:	f1 e0       	ldi	r31, 0x01	; 1
    2166:	ff 2e       	mov	r15, r31
    2168:	f0 2d       	mov	r31, r0
    216a:	d9 01       	movw	r26, r18
    216c:	ed 92       	st	X+, r14
    216e:	fc 92       	st	X, r15
		Controller.parent = &Options;
    2170:	f0 93 f6 02 	sts	0x02F6, r31
    2174:	e0 93 f5 02 	sts	0x02F5, r30
		Controller.child[1] = &SpeedController;
    2178:	0f 2e       	mov	r0, r31
    217a:	f2 ee       	ldi	r31, 0xE2	; 226
    217c:	cf 2e       	mov	r12, r31
    217e:	f2 e0       	ldi	r31, 0x02	; 2
    2180:	df 2e       	mov	r13, r31
    2182:	f0 2d       	mov	r31, r0
    2184:	d0 92 fa 02 	sts	0x02FA, r13
    2188:	c0 92 f9 02 	sts	0x02F9, r12
		Controller.child[2] = &PositionController;
    218c:	0f 2e       	mov	r0, r31
    218e:	f1 ed       	ldi	r31, 0xD1	; 209
    2190:	ef 2e       	mov	r14, r31
    2192:	f2 e0       	ldi	r31, 0x02	; 2
    2194:	ff 2e       	mov	r15, r31
    2196:	f0 2d       	mov	r31, r0
    2198:	f0 92 fc 02 	sts	0x02FC, r15
    219c:	e0 92 fb 02 	sts	0x02FB, r14
		Controller.nmbrChilds = 2;
    21a0:	68 94       	set
    21a2:	88 24       	eor	r8, r8
    21a4:	81 f8       	bld	r8, 1
    21a6:	80 92 03 03 	sts	0x0303, r8
			
			//Controller children
			SpeedController.name = "Speed";
    21aa:	0f 2e       	mov	r0, r31
    21ac:	fb ea       	ldi	r31, 0xAB	; 171
    21ae:	af 2e       	mov	r10, r31
    21b0:	f1 e0       	ldi	r31, 0x01	; 1
    21b2:	bf 2e       	mov	r11, r31
    21b4:	f0 2d       	mov	r31, r0
    21b6:	d6 01       	movw	r26, r12
    21b8:	ad 92       	st	X+, r10
    21ba:	bc 92       	st	X, r11
			SpeedController.parent = &Controller;
    21bc:	30 93 e5 02 	sts	0x02E5, r19
    21c0:	20 93 e4 02 	sts	0x02E4, r18
			SpeedController.nmbrChilds = 0;
    21c4:	10 92 f2 02 	sts	0x02F2, r1

			PositionController.name = "Position";
    21c8:	0f 2e       	mov	r0, r31
    21ca:	f1 eb       	ldi	r31, 0xB1	; 177
    21cc:	cf 2e       	mov	r12, r31
    21ce:	f1 e0       	ldi	r31, 0x01	; 1
    21d0:	df 2e       	mov	r13, r31
    21d2:	f0 2d       	mov	r31, r0
    21d4:	d7 01       	movw	r26, r14
    21d6:	cd 92       	st	X+, r12
    21d8:	dc 92       	st	X, r13
			PositionController.parent = &Controller;
    21da:	30 93 d4 02 	sts	0x02D4, r19
    21de:	20 93 d3 02 	sts	0x02D3, r18
			PositionController.nmbrChilds = 0;
    21e2:	10 92 e1 02 	sts	0x02E1, r1
			
		
		SolenoidMode.name = "Solenoid Mode";
    21e6:	2a eb       	ldi	r18, 0xBA	; 186
    21e8:	31 e0       	ldi	r19, 0x01	; 1
    21ea:	39 83       	std	Y+1, r19	; 0x01
    21ec:	28 83       	st	Y, r18
		SolenoidMode.parent = &Options;
    21ee:	f0 93 b2 02 	sts	0x02B2, r31
    21f2:	e0 93 b1 02 	sts	0x02B1, r30
		SolenoidMode.child[1] = &SolenoidSemi;
    21f6:	0f 2e       	mov	r0, r31
    21f8:	fc e7       	ldi	r31, 0x7C	; 124
    21fa:	cf 2e       	mov	r12, r31
    21fc:	f2 e0       	ldi	r31, 0x02	; 2
    21fe:	df 2e       	mov	r13, r31
    2200:	f0 2d       	mov	r31, r0
    2202:	d0 92 b6 02 	sts	0x02B6, r13
    2206:	c0 92 b5 02 	sts	0x02B5, r12
		SolenoidMode.child[2] = &SolenoidAuto;
    220a:	0f 2e       	mov	r0, r31
    220c:	fd e8       	ldi	r31, 0x8D	; 141
    220e:	ef 2e       	mov	r14, r31
    2210:	f2 e0       	ldi	r31, 0x02	; 2
    2212:	ff 2e       	mov	r15, r31
    2214:	f0 2d       	mov	r31, r0
    2216:	f0 92 b8 02 	sts	0x02B8, r15
    221a:	e0 92 b7 02 	sts	0x02B7, r14
		SolenoidMode.child[3] = &SolenoidToggleAuto;
    221e:	2b e6       	ldi	r18, 0x6B	; 107
    2220:	32 e0       	ldi	r19, 0x02	; 2
    2222:	30 93 ba 02 	sts	0x02BA, r19
    2226:	20 93 b9 02 	sts	0x02B9, r18
		SolenoidMode.nmbrChilds = 3;
    222a:	90 92 bf 02 	sts	0x02BF, r9
	
			//SolenoidMode children
			SolenoidSemi.name = "Semi Auto";
    222e:	0f 2e       	mov	r0, r31
    2230:	f8 ec       	ldi	r31, 0xC8	; 200
    2232:	af 2e       	mov	r10, r31
    2234:	f1 e0       	ldi	r31, 0x01	; 1
    2236:	bf 2e       	mov	r11, r31
    2238:	f0 2d       	mov	r31, r0
    223a:	d6 01       	movw	r26, r12
    223c:	ad 92       	st	X+, r10
    223e:	bc 92       	st	X, r11
			SolenoidSemi.parent = &SolenoidMode;
    2240:	d0 93 7f 02 	sts	0x027F, r29
    2244:	c0 93 7e 02 	sts	0x027E, r28
			SolenoidSemi.nmbrChilds = 0;
    2248:	10 92 8c 02 	sts	0x028C, r1
			
			SolenoidAuto.name = "Auto";
    224c:	0f 2e       	mov	r0, r31
    224e:	f9 ed       	ldi	r31, 0xD9	; 217
    2250:	cf 2e       	mov	r12, r31
    2252:	f1 e0       	ldi	r31, 0x01	; 1
    2254:	df 2e       	mov	r13, r31
    2256:	f0 2d       	mov	r31, r0
    2258:	d7 01       	movw	r26, r14
    225a:	cd 92       	st	X+, r12
    225c:	dc 92       	st	X, r13
			SolenoidAuto.parent = &SolenoidMode;
    225e:	d0 93 90 02 	sts	0x0290, r29
    2262:	c0 93 8f 02 	sts	0x028F, r28
			SolenoidAuto.nmbrChilds = 0;
    2266:	10 92 9d 02 	sts	0x029D, r1
	
			SolenoidToggleAuto.name = "Toggle Auto";
    226a:	0f 2e       	mov	r0, r31
    226c:	f2 ed       	ldi	r31, 0xD2	; 210
    226e:	ef 2e       	mov	r14, r31
    2270:	f1 e0       	ldi	r31, 0x01	; 1
    2272:	ff 2e       	mov	r15, r31
    2274:	f0 2d       	mov	r31, r0
    2276:	d9 01       	movw	r26, r18
    2278:	ed 92       	st	X+, r14
    227a:	fc 92       	st	X, r15
			SolenoidToggleAuto.parent = &SolenoidMode;
    227c:	d0 93 6e 02 	sts	0x026E, r29
    2280:	c0 93 6d 02 	sts	0x026D, r28
			SolenoidToggleAuto.nmbrChilds = 0;
    2284:	10 92 7b 02 	sts	0x027B, r1
	
		InvertedMode.name = "Inverted Mode";
    2288:	2e ed       	ldi	r18, 0xDE	; 222
    228a:	31 e0       	ldi	r19, 0x01	; 1
    228c:	dc 01       	movw	r26, r24
    228e:	2d 93       	st	X+, r18
    2290:	3c 93       	st	X, r19
		InvertedMode.parent = &Options;
    2292:	f0 93 a1 02 	sts	0x02A1, r31
    2296:	e0 93 a0 02 	sts	0x02A0, r30
		InvertedMode.child[1] = &NonInverted;
    229a:	2a e5       	ldi	r18, 0x5A	; 90
    229c:	32 e0       	ldi	r19, 0x02	; 2
    229e:	30 93 a5 02 	sts	0x02A5, r19
    22a2:	20 93 a4 02 	sts	0x02A4, r18
		InvertedMode.child[2] = &Inverted;
    22a6:	c9 e4       	ldi	r28, 0x49	; 73
    22a8:	d2 e0       	ldi	r29, 0x02	; 2
    22aa:	d0 93 a7 02 	sts	0x02A7, r29
    22ae:	c0 93 a6 02 	sts	0x02A6, r28
		InvertedMode.nmbrChilds = 2;
    22b2:	80 92 ae 02 	sts	0x02AE, r8
		
			//InvertedMode children
			NonInverted.name = "Non Inverted";
    22b6:	0f 2e       	mov	r0, r31
    22b8:	fc ee       	ldi	r31, 0xEC	; 236
    22ba:	ef 2e       	mov	r14, r31
    22bc:	f1 e0       	ldi	r31, 0x01	; 1
    22be:	ff 2e       	mov	r15, r31
    22c0:	f0 2d       	mov	r31, r0
    22c2:	d9 01       	movw	r26, r18
    22c4:	ed 92       	st	X+, r14
    22c6:	fc 92       	st	X, r15
			NonInverted.parent = &InvertedMode;
    22c8:	90 93 5d 02 	sts	0x025D, r25
    22cc:	80 93 5c 02 	sts	0x025C, r24
			NonInverted.nmbrChilds = 0;
    22d0:	10 92 6a 02 	sts	0x026A, r1
			
			Inverted.name = "Inverted";
    22d4:	20 ef       	ldi	r18, 0xF0	; 240
    22d6:	31 e0       	ldi	r19, 0x01	; 1
    22d8:	39 83       	std	Y+1, r19	; 0x01
    22da:	28 83       	st	Y, r18
			Inverted.parent = &InvertedMode;
    22dc:	90 93 4c 02 	sts	0x024C, r25
    22e0:	80 93 4b 02 	sts	0x024B, r24
			Inverted.nmbrChilds = 0;
    22e4:	10 92 59 02 	sts	0x0259, r1
			
		resetHighscore.name = "Reset Score";
    22e8:	89 ef       	ldi	r24, 0xF9	; 249
    22ea:	91 e0       	ldi	r25, 0x01	; 1
    22ec:	d8 01       	movw	r26, r16
    22ee:	8d 93       	st	X+, r24
    22f0:	9c 93       	st	X, r25
		resetHighscore.parent = &Options;
    22f2:	f0 93 3b 02 	sts	0x023B, r31
    22f6:	e0 93 3a 02 	sts	0x023A, r30
		resetHighscore.nmbrChilds = 0;
    22fa:	10 92 48 02 	sts	0x0248, r1
	
	Sound.name = "Sound";
    22fe:	85 e0       	ldi	r24, 0x05	; 5
    2300:	92 e0       	ldi	r25, 0x02	; 2
    2302:	db 01       	movw	r26, r22
    2304:	8d 93       	st	X+, r24
    2306:	9c 93       	st	X, r25
	Sound.parent = &Options;
    2308:	f0 93 c3 02 	sts	0x02C3, r31
    230c:	e0 93 c2 02 	sts	0x02C2, r30
	Sound.nmbrChilds = 0;
    2310:	10 92 d0 02 	sts	0x02D0, r1
	
	Credits.name = "Credits";
    2314:	8b e0       	ldi	r24, 0x0B	; 11
    2316:	92 e0       	ldi	r25, 0x02	; 2
    2318:	fa 01       	movw	r30, r20
    231a:	91 83       	std	Z+1, r25	; 0x01
    231c:	80 83       	st	Z, r24
	Credits.parent = &main;
    231e:	70 92 07 03 	sts	0x0307, r7
    2322:	60 92 06 03 	sts	0x0306, r6
	Credits.nmbrChilds = 0;	
    2326:	10 92 14 03 	sts	0x0314, r1
	
	currentMenu = main;
    232a:	81 e1       	ldi	r24, 0x11	; 17
    232c:	f3 01       	movw	r30, r6
    232e:	a8 e4       	ldi	r26, 0x48	; 72
    2330:	b3 e0       	ldi	r27, 0x03	; 3
    2332:	01 90       	ld	r0, Z+
    2334:	0d 92       	st	X+, r0
    2336:	8a 95       	dec	r24
    2338:	e1 f7       	brne	.-8      	; 0x2332 <MENU_init_menu+0x33c>
	OLED_go_to_pos(1, 0);
    233a:	60 e0       	ldi	r22, 0x00	; 0
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	markerPage = 1;	
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	80 93 a1 03 	sts	0x03A1, r24
	OLED_print_char((uint8_t)(36));	
    2348:	84 e2       	ldi	r24, 0x24	; 36
    234a:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <OLED_print_char>
}
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    2362:	9f 90       	pop	r9
    2364:	8f 90       	pop	r8
    2366:	7f 90       	pop	r7
    2368:	6f 90       	pop	r6
    236a:	08 95       	ret

0000236c <MENU_print_menu>:
 *  \param void
 *
 *  \return void
 */

void MENU_print_menu(){
    236c:	ef 92       	push	r14
    236e:	ff 92       	push	r15
    2370:	0f 93       	push	r16
    2372:	1f 93       	push	r17
    2374:	cf 93       	push	r28
    2376:	df 93       	push	r29
	OLED_go_to_pos(0, 10);
    2378:	6a e0       	ldi	r22, 0x0A	; 10
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	OLED_print_sentence("*");
    2380:	83 e1       	ldi	r24, 0x13	; 19
    2382:	92 e0       	ldi	r25, 0x02	; 2
    2384:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
	OLED_print_sentence(currentMenu.name);
    2388:	80 91 48 03 	lds	r24, 0x0348
    238c:	90 91 49 03 	lds	r25, 0x0349
    2390:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
	OLED_print_sentence("*");
    2394:	83 e1       	ldi	r24, 0x13	; 19
    2396:	92 e0       	ldi	r25, 0x02	; 2
    2398:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
	for (int i = 1; i < currentMenu.nmbrChilds+1; i++){
    239c:	80 91 58 03 	lds	r24, 0x0358
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	02 97       	sbiw	r24, 0x02	; 2
    23a6:	f4 f0       	brlt	.+60     	; 0x23e4 <MENU_print_menu+0x78>
    23a8:	0e e4       	ldi	r16, 0x4E	; 78
    23aa:	13 e0       	ldi	r17, 0x03	; 3
    23ac:	c1 e0       	ldi	r28, 0x01	; 1
    23ae:	d0 e0       	ldi	r29, 0x00	; 0
    23b0:	0f 2e       	mov	r0, r31
    23b2:	f8 e5       	ldi	r31, 0x58	; 88
    23b4:	ef 2e       	mov	r14, r31
    23b6:	f3 e0       	ldi	r31, 0x03	; 3
    23b8:	ff 2e       	mov	r15, r31
    23ba:	f0 2d       	mov	r31, r0
		
		OLED_go_to_pos(i, 10);
    23bc:	6a e0       	ldi	r22, 0x0A	; 10
    23be:	8c 2f       	mov	r24, r28
    23c0:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
		OLED_print_sentence(currentMenu.child[i]->name);
    23c4:	d8 01       	movw	r26, r16
    23c6:	ed 91       	ld	r30, X+
    23c8:	fd 91       	ld	r31, X+
    23ca:	8d 01       	movw	r16, r26
    23cc:	80 81       	ld	r24, Z
    23ce:	91 81       	ldd	r25, Z+1	; 0x01
    23d0:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
void MENU_print_menu(){
	OLED_go_to_pos(0, 10);
	OLED_print_sentence("*");
	OLED_print_sentence(currentMenu.name);
	OLED_print_sentence("*");
	for (int i = 1; i < currentMenu.nmbrChilds+1; i++){
    23d4:	21 96       	adiw	r28, 0x01	; 1
    23d6:	f7 01       	movw	r30, r14
    23d8:	80 81       	ld	r24, Z
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	01 96       	adiw	r24, 0x01	; 1
    23de:	c8 17       	cp	r28, r24
    23e0:	d9 07       	cpc	r29, r25
    23e2:	64 f3       	brlt	.-40     	; 0x23bc <MENU_print_menu+0x50>
		OLED_go_to_pos(i, 10);
		OLED_print_sentence(currentMenu.child[i]->name);

	}

}
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	1f 91       	pop	r17
    23ea:	0f 91       	pop	r16
    23ec:	ff 90       	pop	r15
    23ee:	ef 90       	pop	r14
    23f0:	08 95       	ret

000023f2 <MENU_selectLine>:
 *
 *  \return void
 */

void MENU_selectLine(uint8_t line){
	OLED_go_to_pos(line, 0);
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	OLED_print_char((uint8_t)(36));
    23f8:	84 e2       	ldi	r24, 0x24	; 36
    23fa:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <OLED_print_char>
    23fe:	08 95       	ret

00002400 <MENU_clearLine>:
 *
 *  \return void
 */

void MENU_clearLine(uint8_t line){
	OLED_go_to_pos(line, 0);
    2400:	60 e0       	ldi	r22, 0x00	; 0
    2402:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	OLED_clear_char();
    2406:	0e 94 60 13 	call	0x26c0	; 0x26c0 <OLED_clear_char>
    240a:	08 95       	ret

0000240c <MENU_goto_parent_menu>:
		}
	}
}

void MENU_goto_parent_menu(){
	currentMenu = *currentMenu.parent;
    240c:	e0 91 4a 03 	lds	r30, 0x034A
    2410:	f0 91 4b 03 	lds	r31, 0x034B
    2414:	81 e1       	ldi	r24, 0x11	; 17
    2416:	a8 e4       	ldi	r26, 0x48	; 72
    2418:	b3 e0       	ldi	r27, 0x03	; 3
    241a:	01 90       	ld	r0, Z+
    241c:	0d 92       	st	X+, r0
    241e:	8a 95       	dec	r24
    2420:	e1 f7       	brne	.-8      	; 0x241a <MENU_goto_parent_menu+0xe>
	OLED_reset();
    2422:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	MENU_print_menu();
    2426:	0e 94 b6 11 	call	0x236c	; 0x236c <MENU_print_menu>
	markerPage = 1;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	80 93 a1 03 	sts	0x03A1, r24
	MENU_selectLine(markerPage);
    2430:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <MENU_selectLine>
    2434:	08 95       	ret

00002436 <MENU_navigate>:
 *  \return void
 */

void MENU_navigate(DIR direction){
	
	if (direction == UP){
    2436:	81 11       	cpse	r24, r1
    2438:	0f c0       	rjmp	.+30     	; 0x2458 <MENU_navigate+0x22>
		if (markerPage > 1){
    243a:	80 91 a1 03 	lds	r24, 0x03A1
    243e:	82 30       	cpi	r24, 0x02	; 2
    2440:	08 f4       	brcc	.+2      	; 0x2444 <MENU_navigate+0xe>
    2442:	49 c0       	rjmp	.+146    	; 0x24d6 <MENU_navigate+0xa0>
			MENU_clearLine(markerPage);
    2444:	0e 94 00 12 	call	0x2400	; 0x2400 <MENU_clearLine>
			markerPage--;
    2448:	80 91 a1 03 	lds	r24, 0x03A1
    244c:	81 50       	subi	r24, 0x01	; 1
    244e:	80 93 a1 03 	sts	0x03A1, r24
			MENU_selectLine(markerPage);	
    2452:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <MENU_selectLine>
    2456:	08 95       	ret
		}
	}
	
	else if (direction == DOWN){
    2458:	81 30       	cpi	r24, 0x01	; 1
    245a:	81 f4       	brne	.+32     	; 0x247c <MENU_navigate+0x46>
		if (markerPage < currentMenu.nmbrChilds){
    245c:	80 91 a1 03 	lds	r24, 0x03A1
    2460:	90 91 58 03 	lds	r25, 0x0358
    2464:	89 17       	cp	r24, r25
    2466:	b8 f5       	brcc	.+110    	; 0x24d6 <MENU_navigate+0xa0>
			MENU_clearLine(markerPage);
    2468:	0e 94 00 12 	call	0x2400	; 0x2400 <MENU_clearLine>
			markerPage++;
    246c:	80 91 a1 03 	lds	r24, 0x03A1
    2470:	8f 5f       	subi	r24, 0xFF	; 255
    2472:	80 93 a1 03 	sts	0x03A1, r24
			MENU_selectLine(markerPage);
    2476:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <MENU_selectLine>
    247a:	08 95       	ret
	}	
}
		else if(direction == RIGHT){
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	09 f5       	brne	.+66     	; 0x24c2 <MENU_navigate+0x8c>
			if ((markerPage <= currentMenu.nmbrChilds) && (markerPage != 0)){
    2480:	e0 91 a1 03 	lds	r30, 0x03A1
    2484:	80 91 58 03 	lds	r24, 0x0358
    2488:	8e 17       	cp	r24, r30
    248a:	28 f1       	brcs	.+74     	; 0x24d6 <MENU_navigate+0xa0>
    248c:	ee 23       	and	r30, r30
    248e:	19 f1       	breq	.+70     	; 0x24d6 <MENU_navigate+0xa0>
				currentMenu = *currentMenu.child[markerPage];
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	ee 0f       	add	r30, r30
    2494:	ff 1f       	adc	r31, r31
    2496:	e4 5b       	subi	r30, 0xB4	; 180
    2498:	fc 4f       	sbci	r31, 0xFC	; 252
    249a:	01 90       	ld	r0, Z+
    249c:	f0 81       	ld	r31, Z
    249e:	e0 2d       	mov	r30, r0
    24a0:	81 e1       	ldi	r24, 0x11	; 17
    24a2:	a8 e4       	ldi	r26, 0x48	; 72
    24a4:	b3 e0       	ldi	r27, 0x03	; 3
    24a6:	01 90       	ld	r0, Z+
    24a8:	0d 92       	st	X+, r0
    24aa:	8a 95       	dec	r24
    24ac:	e1 f7       	brne	.-8      	; 0x24a6 <MENU_navigate+0x70>
				OLED_reset();
    24ae:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
				MENU_print_menu();
    24b2:	0e 94 b6 11 	call	0x236c	; 0x236c <MENU_print_menu>
				markerPage = 1;
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	80 93 a1 03 	sts	0x03A1, r24
				MENU_selectLine(markerPage);
    24bc:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <MENU_selectLine>
    24c0:	08 95       	ret
			}
			
		}
		else if(direction == LEFT){
    24c2:	83 30       	cpi	r24, 0x03	; 3
    24c4:	41 f4       	brne	.+16     	; 0x24d6 <MENU_navigate+0xa0>
			if (currentMenu.parent != NULL){
    24c6:	80 91 4a 03 	lds	r24, 0x034A
    24ca:	90 91 4b 03 	lds	r25, 0x034B
    24ce:	89 2b       	or	r24, r25
    24d0:	11 f0       	breq	.+4      	; 0x24d6 <MENU_navigate+0xa0>
				MENU_goto_parent_menu();		
    24d2:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
    24d6:	08 95       	ret

000024d8 <MENU_goto_main_menu>:
	markerPage = 1;
	MENU_selectLine(markerPage);
}

void MENU_goto_main_menu(){
	currentMenu = main;
    24d8:	81 e1       	ldi	r24, 0x11	; 17
    24da:	ec e8       	ldi	r30, 0x8C	; 140
    24dc:	f3 e0       	ldi	r31, 0x03	; 3
    24de:	a8 e4       	ldi	r26, 0x48	; 72
    24e0:	b3 e0       	ldi	r27, 0x03	; 3
    24e2:	01 90       	ld	r0, Z+
    24e4:	0d 92       	st	X+, r0
    24e6:	8a 95       	dec	r24
    24e8:	e1 f7       	brne	.-8      	; 0x24e2 <MENU_goto_main_menu+0xa>
	OLED_reset();
    24ea:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	MENU_print_menu();
    24ee:	0e 94 b6 11 	call	0x236c	; 0x236c <MENU_print_menu>
	markerPage = 1;
    24f2:	81 e0       	ldi	r24, 0x01	; 1
    24f4:	80 93 a1 03 	sts	0x03A1, r24
	MENU_selectLine(markerPage);
    24f8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <MENU_selectLine>
    24fc:	08 95       	ret

000024fe <MENU_selectAction>:
 *  \param void
 *
 *  \return void
 */

void MENU_selectAction(game_settings *settings, uint8_t *startgame){
    24fe:	ef 92       	push	r14
    2500:	ff 92       	push	r15
    2502:	0f 93       	push	r16
    2504:	1f 93       	push	r17
    2506:	cf 93       	push	r28
    2508:	df 93       	push	r29
    250a:	cd b7       	in	r28, 0x3d	; 61
    250c:	de b7       	in	r29, 0x3e	; 62
    250e:	2b 97       	sbiw	r28, 0x0b	; 11
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	f8 94       	cli
    2514:	de bf       	out	0x3e, r29	; 62
    2516:	0f be       	out	0x3f, r0	; 63
    2518:	cd bf       	out	0x3d, r28	; 61
    251a:	8c 01       	movw	r16, r24
    251c:	7b 01       	movw	r14, r22
	if (currentMenu.nmbrChilds == 0){
    251e:	80 91 58 03 	lds	r24, 0x0358
    2522:	81 11       	cpse	r24, r1
    2524:	c0 c0       	rjmp	.+384    	; 0x26a6 <MENU_selectAction+0x1a8>
		if (currentMenu.name == "High Scores"){
    2526:	80 91 48 03 	lds	r24, 0x0348
    252a:	90 91 49 03 	lds	r25, 0x0349
    252e:	88 58       	subi	r24, 0x88	; 136
    2530:	91 40       	sbci	r25, 0x01	; 1
    2532:	11 f4       	brne	.+4      	; 0x2538 <MENU_selectAction+0x3a>
			GAME_print_highscores();
    2534:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <GAME_print_highscores>
		}
		if (currentMenu.name == "Easy"){
    2538:	80 91 48 03 	lds	r24, 0x0348
    253c:	90 91 49 03 	lds	r25, 0x0349
    2540:	87 57       	subi	r24, 0x77	; 119
    2542:	91 40       	sbci	r25, 0x01	; 1
    2544:	29 f4       	brne	.+10     	; 0x2550 <MENU_selectAction+0x52>
			settings->difficulty = 0;
    2546:	f8 01       	movw	r30, r16
    2548:	11 82       	std	Z+1, r1	; 0x01
			*startgame = 1;
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	f7 01       	movw	r30, r14
    254e:	80 83       	st	Z, r24
		}
		if (currentMenu.name == "Normal"){
    2550:	80 91 48 03 	lds	r24, 0x0348
    2554:	90 91 49 03 	lds	r25, 0x0349
    2558:	8c 57       	subi	r24, 0x7C	; 124
    255a:	91 40       	sbci	r25, 0x01	; 1
    255c:	29 f4       	brne	.+10     	; 0x2568 <MENU_selectAction+0x6a>
			settings->difficulty = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	f8 01       	movw	r30, r16
    2562:	81 83       	std	Z+1, r24	; 0x01
			*startgame = 1;
    2564:	f7 01       	movw	r30, r14
    2566:	80 83       	st	Z, r24
		}
		if (currentMenu.name == "Hard"){
    2568:	80 91 48 03 	lds	r24, 0x0348
    256c:	90 91 49 03 	lds	r25, 0x0349
    2570:	83 58       	subi	r24, 0x83	; 131
    2572:	91 40       	sbci	r25, 0x01	; 1
    2574:	31 f4       	brne	.+12     	; 0x2582 <MENU_selectAction+0x84>
			settings->difficulty = 2;
    2576:	82 e0       	ldi	r24, 0x02	; 2
    2578:	f8 01       	movw	r30, r16
    257a:	81 83       	std	Z+1, r24	; 0x01
			*startgame = 1;
    257c:	81 e0       	ldi	r24, 0x01	; 1
    257e:	f7 01       	movw	r30, r14
    2580:	80 83       	st	Z, r24
		}
		if (currentMenu.name == "Reset Score"){
    2582:	80 91 48 03 	lds	r24, 0x0348
    2586:	90 91 49 03 	lds	r25, 0x0349
    258a:	89 5f       	subi	r24, 0xF9	; 249
    258c:	91 40       	sbci	r25, 0x01	; 1
    258e:	21 f4       	brne	.+8      	; 0x2598 <MENU_selectAction+0x9a>
			EEPROM_init();
    2590:	0e 94 96 0c 	call	0x192c	; 0x192c <EEPROM_init>
			MENU_goto_main_menu();	
    2594:	0e 94 6c 12 	call	0x24d8	; 0x24d8 <MENU_goto_main_menu>
		}
		if (currentMenu.name == "Sound"){
    2598:	80 91 48 03 	lds	r24, 0x0348
    259c:	90 91 49 03 	lds	r25, 0x0349
    25a0:	85 50       	subi	r24, 0x05	; 5
    25a2:	92 40       	sbci	r25, 0x02	; 2
    25a4:	59 f4       	brne	.+22     	; 0x25bc <MENU_selectAction+0xbe>
			CAN_message msg;
			ID id = SUPERMARIO;
			int length = 1;
			msg.id = id;
    25a6:	86 e0       	ldi	r24, 0x06	; 6
    25a8:	90 e0       	ldi	r25, 0x00	; 0
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
			msg.length = length;
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	8b 83       	std	Y+3, r24	; 0x03
			msg.data[0] = 0;
    25b2:	1c 82       	std	Y+4, r1	; 0x04
			CAN_message_send(&msg);
    25b4:	ce 01       	movw	r24, r28
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	0e 94 4e 0c 	call	0x189c	; 0x189c <CAN_message_send>
		}
		if (currentMenu.name == "Credits"){
    25bc:	80 91 48 03 	lds	r24, 0x0348
    25c0:	90 91 49 03 	lds	r25, 0x0349
    25c4:	8b 50       	subi	r24, 0x0B	; 11
    25c6:	92 40       	sbci	r25, 0x02	; 2
    25c8:	79 f4       	brne	.+30     	; 0x25e8 <MENU_selectAction+0xea>
			OLED_reset();
    25ca:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
			CAN_message msg;
			ID id = CREDITS;
			int length = 1;
			msg.id = id;
    25ce:	85 e0       	ldi	r24, 0x05	; 5
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	9a 83       	std	Y+2, r25	; 0x02
    25d4:	89 83       	std	Y+1, r24	; 0x01
			msg.length = length;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	8b 83       	std	Y+3, r24	; 0x03
			msg.data[0] = 0;
    25da:	1c 82       	std	Y+4, r1	; 0x04
			CAN_message_send(&msg);
    25dc:	ce 01       	movw	r24, r28
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	0e 94 4e 0c 	call	0x189c	; 0x189c <CAN_message_send>
			OLED_credits();
    25e4:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <OLED_credits>
		}
		if (currentMenu.name == "Speed"){
    25e8:	80 91 48 03 	lds	r24, 0x0348
    25ec:	90 91 49 03 	lds	r25, 0x0349
    25f0:	8b 5a       	subi	r24, 0xAB	; 171
    25f2:	91 40       	sbci	r25, 0x01	; 1
    25f4:	39 f4       	brne	.+14     	; 0x2604 <MENU_selectAction+0x106>
			settings->regulator = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	f8 01       	movw	r30, r16
    25fa:	80 83       	st	Z, r24
			MENU_goto_parent_menu();
    25fc:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
			MENU_goto_parent_menu();
    2600:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
		}
		if (currentMenu.name == "Position"){
    2604:	80 91 48 03 	lds	r24, 0x0348
    2608:	90 91 49 03 	lds	r25, 0x0349
    260c:	81 5b       	subi	r24, 0xB1	; 177
    260e:	91 40       	sbci	r25, 0x01	; 1
    2610:	31 f4       	brne	.+12     	; 0x261e <MENU_selectAction+0x120>
			settings->regulator = 0;
    2612:	f8 01       	movw	r30, r16
    2614:	10 82       	st	Z, r1
			MENU_goto_parent_menu();
    2616:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
			MENU_goto_parent_menu();
    261a:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
		}
		if (currentMenu.name == "Semi Auto"){
    261e:	80 91 48 03 	lds	r24, 0x0348
    2622:	90 91 49 03 	lds	r25, 0x0349
    2626:	88 5c       	subi	r24, 0xC8	; 200
    2628:	91 40       	sbci	r25, 0x01	; 1
    262a:	31 f4       	brne	.+12     	; 0x2638 <MENU_selectAction+0x13a>
			settings->solenoid = 0;
    262c:	f8 01       	movw	r30, r16
    262e:	12 82       	std	Z+2, r1	; 0x02
			MENU_goto_parent_menu();
    2630:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
			MENU_goto_parent_menu();
    2634:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
		}
		if (currentMenu.name == "Auto"){
    2638:	80 91 48 03 	lds	r24, 0x0348
    263c:	90 91 49 03 	lds	r25, 0x0349
    2640:	89 5d       	subi	r24, 0xD9	; 217
    2642:	91 40       	sbci	r25, 0x01	; 1
    2644:	39 f4       	brne	.+14     	; 0x2654 <MENU_selectAction+0x156>
			settings->solenoid = 1;
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	f8 01       	movw	r30, r16
    264a:	82 83       	std	Z+2, r24	; 0x02
			MENU_goto_parent_menu();
    264c:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
			MENU_goto_parent_menu();
    2650:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
		}
		if (currentMenu.name == "Toggle Auto"){
    2654:	80 91 48 03 	lds	r24, 0x0348
    2658:	90 91 49 03 	lds	r25, 0x0349
    265c:	82 5d       	subi	r24, 0xD2	; 210
    265e:	91 40       	sbci	r25, 0x01	; 1
    2660:	39 f4       	brne	.+14     	; 0x2670 <MENU_selectAction+0x172>
			settings->solenoid = 2;
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	f8 01       	movw	r30, r16
    2666:	82 83       	std	Z+2, r24	; 0x02
			MENU_goto_parent_menu();
    2668:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
			MENU_goto_parent_menu();
    266c:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
		}
		if (currentMenu.name == "Non Inverted"){
    2670:	80 91 48 03 	lds	r24, 0x0348
    2674:	90 91 49 03 	lds	r25, 0x0349
    2678:	8c 5e       	subi	r24, 0xEC	; 236
    267a:	91 40       	sbci	r25, 0x01	; 1
    267c:	31 f4       	brne	.+12     	; 0x268a <MENU_selectAction+0x18c>
			settings->inverted = 0;
    267e:	f8 01       	movw	r30, r16
    2680:	13 82       	std	Z+3, r1	; 0x03
			MENU_goto_parent_menu();
    2682:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
			MENU_goto_parent_menu();
    2686:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
		}
		if (currentMenu.name == "Inverted"){
    268a:	80 91 48 03 	lds	r24, 0x0348
    268e:	90 91 49 03 	lds	r25, 0x0349
    2692:	80 5f       	subi	r24, 0xF0	; 240
    2694:	91 40       	sbci	r25, 0x01	; 1
    2696:	39 f4       	brne	.+14     	; 0x26a6 <MENU_selectAction+0x1a8>
			settings->inverted = 1;
    2698:	81 e0       	ldi	r24, 0x01	; 1
    269a:	f8 01       	movw	r30, r16
    269c:	83 83       	std	Z+3, r24	; 0x03
			MENU_goto_parent_menu();
    269e:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
			MENU_goto_parent_menu();
    26a2:	0e 94 06 12 	call	0x240c	; 0x240c <MENU_goto_parent_menu>
		}
	}

}
    26a6:	2b 96       	adiw	r28, 0x0b	; 11
    26a8:	0f b6       	in	r0, 0x3f	; 63
    26aa:	f8 94       	cli
    26ac:	de bf       	out	0x3e, r29	; 62
    26ae:	0f be       	out	0x3f, r0	; 63
    26b0:	cd bf       	out	0x3d, r28	; 61
    26b2:	df 91       	pop	r29
    26b4:	cf 91       	pop	r28
    26b6:	1f 91       	pop	r17
    26b8:	0f 91       	pop	r16
    26ba:	ff 90       	pop	r15
    26bc:	ef 90       	pop	r14
    26be:	08 95       	ret

000026c0 <OLED_clear_char>:
 *  \param void
 *
 *  \return void
 */

void OLED_clear_char(){
    26c0:	88 e0       	ldi	r24, 0x08	; 8
    26c2:	90 e0       	ldi	r25, 0x00	; 0
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    26c4:	e0 91 08 01 	lds	r30, 0x0108
    26c8:	f0 91 09 01 	lds	r31, 0x0109
    26cc:	10 82       	st	Z, r1
    26ce:	01 97       	sbiw	r24, 0x01	; 1
 *
 *  \return void
 */

void OLED_clear_char(){
	for (int i = 0; i < FONTSIZE; i++){
    26d0:	00 97       	sbiw	r24, 0x00	; 0
    26d2:	c1 f7       	brne	.-16     	; 0x26c4 <OLED_clear_char+0x4>
		OLED_write_data(0x00);
	}
}
    26d4:	08 95       	ret

000026d6 <OLED_print_char>:
 *  \param char input, char to be written at current place.
 *
 *  \return void
 */

void OLED_print_char(char input){ //Har blitt gjort VOID
    26d6:	28 e0       	ldi	r18, 0x08	; 8
    26d8:	82 9f       	mul	r24, r18
    26da:	c0 01       	movw	r24, r0
    26dc:	11 24       	eor	r1, r1
    26de:	fc 01       	movw	r30, r24
    26e0:	e0 59       	subi	r30, 0x90	; 144
    26e2:	fc 4e       	sbci	r31, 0xEC	; 236
	for (int i = 0; i < FONTSIZE; i++){
    26e4:	20 e0       	ldi	r18, 0x00	; 0
    26e6:	30 e0       	ldi	r19, 0x00	; 0
		OLED_write_data(pgm_read_byte(&font[(int)input-32][i]));
    26e8:	84 91       	lpm	r24, Z
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    26ea:	a0 91 08 01 	lds	r26, 0x0108
    26ee:	b0 91 09 01 	lds	r27, 0x0109
    26f2:	8c 93       	st	X, r24
 */

void OLED_print_char(char input){ //Har blitt gjort VOID
	for (int i = 0; i < FONTSIZE; i++){
		OLED_write_data(pgm_read_byte(&font[(int)input-32][i]));
		col ++;
    26f4:	80 91 a2 03 	lds	r24, 0x03A2
    26f8:	8f 5f       	subi	r24, 0xFF	; 255
    26fa:	80 93 a2 03 	sts	0x03A2, r24
 *
 *  \return void
 */

void OLED_print_char(char input){ //Har blitt gjort VOID
	for (int i = 0; i < FONTSIZE; i++){
    26fe:	2f 5f       	subi	r18, 0xFF	; 255
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	31 96       	adiw	r30, 0x01	; 1
    2704:	28 30       	cpi	r18, 0x08	; 8
    2706:	31 05       	cpc	r19, r1
    2708:	79 f7       	brne	.-34     	; 0x26e8 <OLED_print_char+0x12>
		OLED_write_data(pgm_read_byte(&font[(int)input-32][i]));
		col ++;
	}
}
    270a:	08 95       	ret

0000270c <OLED_goto_page>:
 *
 *  \return void
 */

void OLED_goto_page(uint8_t newpage){
	page = newpage;
    270c:	80 93 a3 03 	sts	0x03A3, r24
	OLED_write_command(0xB0+page);
    2710:	80 55       	subi	r24, 0x50	; 80
 *
 *  \return void
 */

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    2712:	e0 91 0a 01 	lds	r30, 0x010A
    2716:	f0 91 0b 01 	lds	r31, 0x010B
    271a:	80 83       	st	Z, r24
    271c:	08 95       	ret

0000271e <OLED_goto_column>:
 *
 *  \return void
 */

void OLED_goto_column(uint8_t column){
 	col = column;
    271e:	80 93 a2 03 	sts	0x03A2, r24
 	if (column < 16){
    2722:	80 31       	cpi	r24, 0x10	; 16
    2724:	60 f4       	brcc	.+24     	; 0x273e <OLED_goto_column+0x20>
 *
 *  \return void
 */

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    2726:	e0 91 0a 01 	lds	r30, 0x010A
    272a:	f0 91 0b 01 	lds	r31, 0x010B
    272e:	80 83       	st	Z, r24
    2730:	e0 91 0a 01 	lds	r30, 0x010A
    2734:	f0 91 0b 01 	lds	r31, 0x010B
    2738:	80 e1       	ldi	r24, 0x10	; 16
    273a:	80 83       	st	Z, r24
    273c:	08 95       	ret
 	if (column < 16){
 		OLED_write_command(0x00+column);
		OLED_write_command(0x10);
 	}
	else{
		OLED_write_command((column & 0b00001111));
    273e:	98 2f       	mov	r25, r24
    2740:	9f 70       	andi	r25, 0x0F	; 15
 *
 *  \return void
 */

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    2742:	e0 91 0a 01 	lds	r30, 0x010A
    2746:	f0 91 0b 01 	lds	r31, 0x010B
    274a:	90 83       	st	Z, r25
 		OLED_write_command(0x00+column);
		OLED_write_command(0x10);
 	}
	else{
		OLED_write_command((column & 0b00001111));
		OLED_write_command(0x10+((column)>>4));
    274c:	82 95       	swap	r24
    274e:	8f 70       	andi	r24, 0x0F	; 15
    2750:	80 5f       	subi	r24, 0xF0	; 240
 *
 *  \return void
 */

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    2752:	e0 91 0a 01 	lds	r30, 0x010A
    2756:	f0 91 0b 01 	lds	r31, 0x010B
    275a:	80 83       	st	Z, r24
    275c:	08 95       	ret

0000275e <OLED_go_to_pos>:
 *  \uint8_t column, desired column.
 *
 *  \return void
 */

void OLED_go_to_pos(uint8_t page, uint8_t column){
    275e:	cf 93       	push	r28
    2760:	c8 2f       	mov	r28, r24
    2762:	86 2f       	mov	r24, r22
	 OLED_goto_column(column);
    2764:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
	 OLED_goto_page(page);
    2768:	8c 2f       	mov	r24, r28
    276a:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
 }
    276e:	cf 91       	pop	r28
    2770:	08 95       	ret

00002772 <OLED_home>:
 *
 *  \return void
 */

void OLED_home(){
	col = 0;
    2772:	10 92 a2 03 	sts	0x03A2, r1
	page = 0;
    2776:	10 92 a3 03 	sts	0x03A3, r1
	OLED_go_to_pos(0,0);
    277a:	60 e0       	ldi	r22, 0x00	; 0
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
    2782:	08 95       	ret

00002784 <OLED_print_sentence>:
 *  \param char sentence[], sentence to be written.
 *
 *  \return void
 */

void OLED_print_sentence(char sentence[]){
    2784:	ef 92       	push	r14
    2786:	ff 92       	push	r15
    2788:	0f 93       	push	r16
    278a:	1f 93       	push	r17
    278c:	cf 93       	push	r28
    278e:	df 93       	push	r29
    2790:	8c 01       	movw	r16, r24
    2792:	7c 01       	movw	r14, r24
	for (int i = 0; i < strlen(sentence); i++){
    2794:	c0 e0       	ldi	r28, 0x00	; 0
    2796:	d0 e0       	ldi	r29, 0x00	; 0
    2798:	19 c0       	rjmp	.+50     	; 0x27cc <OLED_print_sentence+0x48>
		if (col > 128 - FONTSIZE+1){
    279a:	80 91 a2 03 	lds	r24, 0x03A2
    279e:	8a 37       	cpi	r24, 0x7A	; 122
    27a0:	78 f0       	brcs	.+30     	; 0x27c0 <OLED_print_sentence+0x3c>
			OLED_goto_page(page+1);
    27a2:	80 91 a3 03 	lds	r24, 0x03A3
    27a6:	8f 5f       	subi	r24, 0xFF	; 255
    27a8:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
			OLED_goto_column(0);
    27ac:	80 e0       	ldi	r24, 0x00	; 0
    27ae:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
			if (page == 8){
    27b2:	80 91 a3 03 	lds	r24, 0x03A3
    27b6:	88 30       	cpi	r24, 0x08	; 8
    27b8:	19 f4       	brne	.+6      	; 0x27c0 <OLED_print_sentence+0x3c>
				OLED_home();
    27ba:	0e 94 b9 13 	call	0x2772	; 0x2772 <OLED_home>
				break;
    27be:	10 c0       	rjmp	.+32     	; 0x27e0 <OLED_print_sentence+0x5c>
			}
		}
		OLED_print_char(sentence[i]);
    27c0:	f7 01       	movw	r30, r14
    27c2:	81 91       	ld	r24, Z+
    27c4:	7f 01       	movw	r14, r30
    27c6:	0e 94 6b 13 	call	0x26d6	; 0x26d6 <OLED_print_char>
 *
 *  \return void
 */

void OLED_print_sentence(char sentence[]){
	for (int i = 0; i < strlen(sentence); i++){
    27ca:	21 96       	adiw	r28, 0x01	; 1
    27cc:	f8 01       	movw	r30, r16
    27ce:	01 90       	ld	r0, Z+
    27d0:	00 20       	and	r0, r0
    27d2:	e9 f7       	brne	.-6      	; 0x27ce <OLED_print_sentence+0x4a>
    27d4:	31 97       	sbiw	r30, 0x01	; 1
    27d6:	e0 1b       	sub	r30, r16
    27d8:	f1 0b       	sbc	r31, r17
    27da:	ce 17       	cp	r28, r30
    27dc:	df 07       	cpc	r29, r31
    27de:	e8 f2       	brcs	.-70     	; 0x279a <OLED_print_sentence+0x16>
				break;
			}
		}
		OLED_print_char(sentence[i]);
	} 
}
    27e0:	df 91       	pop	r29
    27e2:	cf 91       	pop	r28
    27e4:	1f 91       	pop	r17
    27e6:	0f 91       	pop	r16
    27e8:	ff 90       	pop	r15
    27ea:	ef 90       	pop	r14
    27ec:	08 95       	ret

000027ee <OLED_print_int>:
 *  \param int value, int to be written.
 *
 *  \return void
 */

void OLED_print_int(int value){
    27ee:	0f 93       	push	r16
    27f0:	1f 93       	push	r17
    27f2:	cf 93       	push	r28
    27f4:	df 93       	push	r29
    27f6:	cd b7       	in	r28, 0x3d	; 61
    27f8:	de b7       	in	r29, 0x3e	; 62
    27fa:	2a 97       	sbiw	r28, 0x0a	; 10
    27fc:	0f b6       	in	r0, 0x3f	; 63
    27fe:	f8 94       	cli
    2800:	de bf       	out	0x3e, r29	; 62
    2802:	0f be       	out	0x3f, r0	; 63
    2804:	cd bf       	out	0x3d, r28	; 61
	char charvalue[10];
	sprintf(charvalue, "%d", value);
    2806:	9f 93       	push	r25
    2808:	8f 93       	push	r24
    280a:	85 e2       	ldi	r24, 0x25	; 37
    280c:	91 e0       	ldi	r25, 0x01	; 1
    280e:	9f 93       	push	r25
    2810:	8f 93       	push	r24
    2812:	8e 01       	movw	r16, r28
    2814:	0f 5f       	subi	r16, 0xFF	; 255
    2816:	1f 4f       	sbci	r17, 0xFF	; 255
    2818:	1f 93       	push	r17
    281a:	0f 93       	push	r16
    281c:	0e 94 09 17 	call	0x2e12	; 0x2e12 <sprintf>
	OLED_print_sentence(charvalue);
    2820:	c8 01       	movw	r24, r16
    2822:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	0f 90       	pop	r0
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
}
    2832:	2a 96       	adiw	r28, 0x0a	; 10
    2834:	0f b6       	in	r0, 0x3f	; 63
    2836:	f8 94       	cli
    2838:	de bf       	out	0x3e, r29	; 62
    283a:	0f be       	out	0x3f, r0	; 63
    283c:	cd bf       	out	0x3d, r28	; 61
    283e:	df 91       	pop	r29
    2840:	cf 91       	pop	r28
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	08 95       	ret

00002848 <OLED_reset>:
 *  \param void
 *
 *  \return void
 */

void OLED_reset(){
    2848:	1f 93       	push	r17
    284a:	cf 93       	push	r28
    284c:	df 93       	push	r29
	OLED_go_to_pos(0,0);
    284e:	60 e0       	ldi	r22, 0x00	; 0
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
    2856:	c0 e0       	ldi	r28, 0x00	; 0
	
	for (int i = 0; i < 8; i++){
		OLED_goto_page(i);
    2858:	10 e8       	ldi	r17, 0x80	; 128
    285a:	d0 e0       	ldi	r29, 0x00	; 0
    285c:	8c 2f       	mov	r24, r28
    285e:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
    2862:	21 2f       	mov	r18, r17
    2864:	3d 2f       	mov	r19, r29
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2866:	e0 91 08 01 	lds	r30, 0x0108
    286a:	f0 91 09 01 	lds	r31, 0x0109
    286e:	10 82       	st	Z, r1
    2870:	21 50       	subi	r18, 0x01	; 1
    2872:	31 09       	sbc	r19, r1
	OLED_go_to_pos(0,0);
	
	for (int i = 0; i < 8; i++){
		OLED_goto_page(i);
		
		for (int j = 0; j < 128; j++){
    2874:	21 15       	cp	r18, r1
    2876:	31 05       	cpc	r19, r1
    2878:	b1 f7       	brne	.-20     	; 0x2866 <OLED_reset+0x1e>
    287a:	cf 5f       	subi	r28, 0xFF	; 255
 */

void OLED_reset(){
	OLED_go_to_pos(0,0);
	
	for (int i = 0; i < 8; i++){
    287c:	c8 30       	cpi	r28, 0x08	; 8
    287e:	71 f7       	brne	.-36     	; 0x285c <OLED_reset+0x14>
		
		for (int j = 0; j < 128; j++){
			OLED_write_data(0x00);
		}
	}
	OLED_go_to_pos(0,0);
    2880:	60 e0       	ldi	r22, 0x00	; 0
    2882:	80 e0       	ldi	r24, 0x00	; 0
    2884:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
}
    2888:	df 91       	pop	r29
    288a:	cf 91       	pop	r28
    288c:	1f 91       	pop	r17
    288e:	08 95       	ret

00002890 <OLED_init>:
 *
 *  \return void
 */

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    2890:	e0 91 0a 01 	lds	r30, 0x010A
    2894:	f0 91 0b 01 	lds	r31, 0x010B
    2898:	8e ea       	ldi	r24, 0xAE	; 174
    289a:	80 83       	st	Z, r24
    289c:	e0 91 0a 01 	lds	r30, 0x010A
    28a0:	f0 91 0b 01 	lds	r31, 0x010B
    28a4:	81 ea       	ldi	r24, 0xA1	; 161
    28a6:	80 83       	st	Z, r24
    28a8:	e0 91 0a 01 	lds	r30, 0x010A
    28ac:	f0 91 0b 01 	lds	r31, 0x010B
    28b0:	8a ed       	ldi	r24, 0xDA	; 218
    28b2:	80 83       	st	Z, r24
    28b4:	e0 91 0a 01 	lds	r30, 0x010A
    28b8:	f0 91 0b 01 	lds	r31, 0x010B
    28bc:	82 e1       	ldi	r24, 0x12	; 18
    28be:	80 83       	st	Z, r24
    28c0:	e0 91 0a 01 	lds	r30, 0x010A
    28c4:	f0 91 0b 01 	lds	r31, 0x010B
    28c8:	88 ec       	ldi	r24, 0xC8	; 200
    28ca:	80 83       	st	Z, r24
    28cc:	e0 91 0a 01 	lds	r30, 0x010A
    28d0:	f0 91 0b 01 	lds	r31, 0x010B
    28d4:	88 ea       	ldi	r24, 0xA8	; 168
    28d6:	80 83       	st	Z, r24
    28d8:	e0 91 0a 01 	lds	r30, 0x010A
    28dc:	f0 91 0b 01 	lds	r31, 0x010B
    28e0:	8f e3       	ldi	r24, 0x3F	; 63
    28e2:	80 83       	st	Z, r24
    28e4:	e0 91 0a 01 	lds	r30, 0x010A
    28e8:	f0 91 0b 01 	lds	r31, 0x010B
    28ec:	85 ed       	ldi	r24, 0xD5	; 213
    28ee:	80 83       	st	Z, r24
    28f0:	e0 91 0a 01 	lds	r30, 0x010A
    28f4:	f0 91 0b 01 	lds	r31, 0x010B
    28f8:	80 e8       	ldi	r24, 0x80	; 128
    28fa:	80 83       	st	Z, r24
    28fc:	e0 91 0a 01 	lds	r30, 0x010A
    2900:	f0 91 0b 01 	lds	r31, 0x010B
    2904:	81 e8       	ldi	r24, 0x81	; 129
    2906:	80 83       	st	Z, r24
    2908:	e0 91 0a 01 	lds	r30, 0x010A
    290c:	f0 91 0b 01 	lds	r31, 0x010B
    2910:	80 e5       	ldi	r24, 0x50	; 80
    2912:	80 83       	st	Z, r24
    2914:	e0 91 0a 01 	lds	r30, 0x010A
    2918:	f0 91 0b 01 	lds	r31, 0x010B
    291c:	89 ed       	ldi	r24, 0xD9	; 217
    291e:	80 83       	st	Z, r24
    2920:	e0 91 0a 01 	lds	r30, 0x010A
    2924:	f0 91 0b 01 	lds	r31, 0x010B
    2928:	81 e2       	ldi	r24, 0x21	; 33
    292a:	80 83       	st	Z, r24
    292c:	e0 91 0a 01 	lds	r30, 0x010A
    2930:	f0 91 0b 01 	lds	r31, 0x010B
    2934:	80 e2       	ldi	r24, 0x20	; 32
    2936:	80 83       	st	Z, r24
    2938:	e0 91 0a 01 	lds	r30, 0x010A
    293c:	f0 91 0b 01 	lds	r31, 0x010B
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	80 83       	st	Z, r24
    2944:	e0 91 0a 01 	lds	r30, 0x010A
    2948:	f0 91 0b 01 	lds	r31, 0x010B
    294c:	8b ed       	ldi	r24, 0xDB	; 219
    294e:	80 83       	st	Z, r24
    2950:	e0 91 0a 01 	lds	r30, 0x010A
    2954:	f0 91 0b 01 	lds	r31, 0x010B
    2958:	80 e3       	ldi	r24, 0x30	; 48
    295a:	80 83       	st	Z, r24
    295c:	e0 91 0a 01 	lds	r30, 0x010A
    2960:	f0 91 0b 01 	lds	r31, 0x010B
    2964:	8d ea       	ldi	r24, 0xAD	; 173
    2966:	80 83       	st	Z, r24
    2968:	e0 91 0a 01 	lds	r30, 0x010A
    296c:	f0 91 0b 01 	lds	r31, 0x010B
    2970:	10 82       	st	Z, r1
    2972:	e0 91 0a 01 	lds	r30, 0x010A
    2976:	f0 91 0b 01 	lds	r31, 0x010B
    297a:	84 ea       	ldi	r24, 0xA4	; 164
    297c:	80 83       	st	Z, r24
    297e:	e0 91 0a 01 	lds	r30, 0x010A
    2982:	f0 91 0b 01 	lds	r31, 0x010B
    2986:	86 ea       	ldi	r24, 0xA6	; 166
    2988:	80 83       	st	Z, r24
    298a:	e0 91 0a 01 	lds	r30, 0x010A
    298e:	f0 91 0b 01 	lds	r31, 0x010B
    2992:	8f ea       	ldi	r24, 0xAF	; 175
    2994:	80 83       	st	Z, r24
	OLED_write_command(0xad); //master configuration
	OLED_write_command(0x00);
	OLED_write_command(0xa4); //out follows RAM content
	OLED_write_command(0xa6); //set normal display
	OLED_write_command(0xaf); // display on
	OLED_reset();             // reset
    2996:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
    299a:	08 95       	ret

0000299c <OLED_print_score>:
	OLED_print_sentence(charvalue);
}



void OLED_print_score(int score){
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
	OLED_go_to_pos(2, 44);
    29a2:	6c e2       	ldi	r22, 0x2C	; 44
    29a4:	82 e0       	ldi	r24, 0x02	; 2
    29a6:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	OLED_print_sentence("score: ");
    29aa:	85 e1       	ldi	r24, 0x15	; 21
    29ac:	92 e0       	ldi	r25, 0x02	; 2
    29ae:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
	
	//clear old score from OLED
	OLED_go_to_pos(3, 44);
    29b2:	6c e2       	ldi	r22, 0x2C	; 44
    29b4:	83 e0       	ldi	r24, 0x03	; 3
    29b6:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	for (int i = 0; i < 5; i++){
		OLED_clear_char();
    29ba:	0e 94 60 13 	call	0x26c0	; 0x26c0 <OLED_clear_char>
    29be:	0e 94 60 13 	call	0x26c0	; 0x26c0 <OLED_clear_char>
    29c2:	0e 94 60 13 	call	0x26c0	; 0x26c0 <OLED_clear_char>
    29c6:	0e 94 60 13 	call	0x26c0	; 0x26c0 <OLED_clear_char>
    29ca:	0e 94 60 13 	call	0x26c0	; 0x26c0 <OLED_clear_char>
	}
	OLED_go_to_pos(3, 44);
    29ce:	6c e2       	ldi	r22, 0x2C	; 44
    29d0:	83 e0       	ldi	r24, 0x03	; 3
    29d2:	0e 94 af 13 	call	0x275e	; 0x275e <OLED_go_to_pos>
	OLED_print_int(score);
    29d6:	ce 01       	movw	r24, r28
    29d8:	0e 94 f7 13 	call	0x27ee	; 0x27ee <OLED_print_int>
}
    29dc:	df 91       	pop	r29
    29de:	cf 91       	pop	r28
    29e0:	08 95       	ret

000029e2 <OLED_print_brage>:
 *
 *  \param void
 *
 *  \return void
 */
void OLED_print_brage(){
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	cf 93       	push	r28
    29e8:	df 93       	push	r29
	OLED_reset();
    29ea:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	
	OLED_goto_column(0);
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    29f4:	c0 e8       	ldi	r28, 0x80	; 128
    29f6:	d0 e0       	ldi	r29, 0x00	; 0
 *
 *  \param void
 *
 *  \return void
 */
void OLED_print_brage(){
    29f8:	00 e0       	ldi	r16, 0x00	; 0
    29fa:	10 e0       	ldi	r17, 0x00	; 0
    29fc:	26 c0       	rjmp	.+76     	; 0x2a4a <OLED_print_brage+0x68>
    29fe:	f9 01       	movw	r30, r18
    2a00:	e8 0f       	add	r30, r24
    2a02:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&brage[j+k][i]));
    2a04:	e4 91       	lpm	r30, Z
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2a06:	a0 91 08 01 	lds	r26, 0x0108
    2a0a:	b0 91 09 01 	lds	r27, 0x0109
    2a0e:	ec 93       	st	X, r30
    2a10:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2a12:	88 30       	cpi	r24, 0x08	; 8
    2a14:	91 05       	cpc	r25, r1
    2a16:	99 f7       	brne	.-26     	; 0x29fe <OLED_print_brage+0x1c>
    2a18:	48 5f       	subi	r20, 0xF8	; 248
    2a1a:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2a1c:	4c 17       	cp	r20, r28
    2a1e:	5d 07       	cpc	r21, r29
    2a20:	31 f0       	breq	.+12     	; 0x2a2e <OLED_print_brage+0x4c>
 *
 *  \param void
 *
 *  \return void
 */
void OLED_print_brage(){
    2a22:	80 2f       	mov	r24, r16
    2a24:	91 2f       	mov	r25, r17
    2a26:	9a 01       	movw	r18, r20
    2a28:	20 59       	subi	r18, 0x90	; 144
    2a2a:	37 4f       	sbci	r19, 0xF7	; 247
    2a2c:	e8 cf       	rjmp	.-48     	; 0x29fe <OLED_print_brage+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&brage[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2a2e:	80 91 a3 03 	lds	r24, 0x03A3
    2a32:	8f 5f       	subi	r24, 0xFF	; 255
    2a34:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
		OLED_goto_column(0);
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2a3e:	c0 58       	subi	r28, 0x80	; 128
    2a40:	df 4f       	sbci	r29, 0xFF	; 255
 */
void OLED_print_brage(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    2a42:	c0 38       	cpi	r28, 0x80	; 128
    2a44:	84 e0       	ldi	r24, 0x04	; 4
    2a46:	d8 07       	cpc	r29, r24
    2a48:	21 f0       	breq	.+8      	; 0x2a52 <OLED_print_brage+0x70>
    2a4a:	ae 01       	movw	r20, r28
    2a4c:	40 58       	subi	r20, 0x80	; 128
    2a4e:	51 09       	sbc	r21, r1
    2a50:	e8 cf       	rjmp	.-48     	; 0x2a22 <OLED_print_brage+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();	
    2a52:	0e 94 b9 13 	call	0x2772	; 0x2772 <OLED_home>
	OLED_print_sentence("Brage");
    2a56:	8d e1       	ldi	r24, 0x1D	; 29
    2a58:	92 e0       	ldi	r25, 0x02	; 2
    2a5a:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
}
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	1f 91       	pop	r17
    2a64:	0f 91       	pop	r16
    2a66:	08 95       	ret

00002a68 <OLED_print_tobias>:
 *  \param void
 *
 *  \return void
 */

void OLED_print_tobias(){
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
	OLED_reset();
    2a70:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	
	OLED_goto_column(0);
    2a74:	80 e0       	ldi	r24, 0x00	; 0
    2a76:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2a7a:	c0 e8       	ldi	r28, 0x80	; 128
    2a7c:	d0 e0       	ldi	r29, 0x00	; 0
 *  \param void
 *
 *  \return void
 */

void OLED_print_tobias(){
    2a7e:	00 e0       	ldi	r16, 0x00	; 0
    2a80:	10 e0       	ldi	r17, 0x00	; 0
    2a82:	26 c0       	rjmp	.+76     	; 0x2ad0 <OLED_print_tobias+0x68>
    2a84:	f9 01       	movw	r30, r18
    2a86:	e8 0f       	add	r30, r24
    2a88:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&tobias[j+k][i]));
    2a8a:	e4 91       	lpm	r30, Z
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2a8c:	a0 91 08 01 	lds	r26, 0x0108
    2a90:	b0 91 09 01 	lds	r27, 0x0109
    2a94:	ec 93       	st	X, r30
    2a96:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2a98:	88 30       	cpi	r24, 0x08	; 8
    2a9a:	91 05       	cpc	r25, r1
    2a9c:	99 f7       	brne	.-26     	; 0x2a84 <OLED_print_tobias+0x1c>
    2a9e:	48 5f       	subi	r20, 0xF8	; 248
    2aa0:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2aa2:	4c 17       	cp	r20, r28
    2aa4:	5d 07       	cpc	r21, r29
    2aa6:	31 f0       	breq	.+12     	; 0x2ab4 <OLED_print_tobias+0x4c>
 *  \param void
 *
 *  \return void
 */

void OLED_print_tobias(){
    2aa8:	80 2f       	mov	r24, r16
    2aaa:	91 2f       	mov	r25, r17
    2aac:	9a 01       	movw	r18, r20
    2aae:	20 59       	subi	r18, 0x90	; 144
    2ab0:	33 4f       	sbci	r19, 0xF3	; 243
    2ab2:	e8 cf       	rjmp	.-48     	; 0x2a84 <OLED_print_tobias+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&tobias[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2ab4:	80 91 a3 03 	lds	r24, 0x03A3
    2ab8:	8f 5f       	subi	r24, 0xFF	; 255
    2aba:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
		OLED_goto_column(0);
    2abe:	80 e0       	ldi	r24, 0x00	; 0
    2ac0:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2ac4:	c0 58       	subi	r28, 0x80	; 128
    2ac6:	df 4f       	sbci	r29, 0xFF	; 255

void OLED_print_tobias(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    2ac8:	c0 38       	cpi	r28, 0x80	; 128
    2aca:	84 e0       	ldi	r24, 0x04	; 4
    2acc:	d8 07       	cpc	r29, r24
    2ace:	21 f0       	breq	.+8      	; 0x2ad8 <OLED_print_tobias+0x70>
    2ad0:	ae 01       	movw	r20, r28
    2ad2:	40 58       	subi	r20, 0x80	; 128
    2ad4:	51 09       	sbc	r21, r1
    2ad6:	e8 cf       	rjmp	.-48     	; 0x2aa8 <OLED_print_tobias+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    2ad8:	0e 94 b9 13 	call	0x2772	; 0x2772 <OLED_home>
	OLED_print_sentence("Tobias");
    2adc:	83 e2       	ldi	r24, 0x23	; 35
    2ade:	92 e0       	ldi	r25, 0x02	; 2
    2ae0:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
}
    2ae4:	df 91       	pop	r29
    2ae6:	cf 91       	pop	r28
    2ae8:	1f 91       	pop	r17
    2aea:	0f 91       	pop	r16
    2aec:	08 95       	ret

00002aee <OLED_print_henning>:
 *  \param void
 *
 *  \return void
 */

void OLED_print_henning(){
    2aee:	0f 93       	push	r16
    2af0:	1f 93       	push	r17
    2af2:	cf 93       	push	r28
    2af4:	df 93       	push	r29
	OLED_reset();
    2af6:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	
	OLED_goto_column(0);
    2afa:	80 e0       	ldi	r24, 0x00	; 0
    2afc:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2b00:	c0 e8       	ldi	r28, 0x80	; 128
    2b02:	d0 e0       	ldi	r29, 0x00	; 0
 *  \param void
 *
 *  \return void
 */

void OLED_print_henning(){
    2b04:	00 e0       	ldi	r16, 0x00	; 0
    2b06:	10 e0       	ldi	r17, 0x00	; 0
    2b08:	26 c0       	rjmp	.+76     	; 0x2b56 <OLED_print_henning+0x68>
    2b0a:	f9 01       	movw	r30, r18
    2b0c:	e8 0f       	add	r30, r24
    2b0e:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&henning[j+k][i]));
    2b10:	e4 91       	lpm	r30, Z
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2b12:	a0 91 08 01 	lds	r26, 0x0108
    2b16:	b0 91 09 01 	lds	r27, 0x0109
    2b1a:	ec 93       	st	X, r30
    2b1c:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2b1e:	88 30       	cpi	r24, 0x08	; 8
    2b20:	91 05       	cpc	r25, r1
    2b22:	99 f7       	brne	.-26     	; 0x2b0a <OLED_print_henning+0x1c>
    2b24:	48 5f       	subi	r20, 0xF8	; 248
    2b26:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2b28:	4c 17       	cp	r20, r28
    2b2a:	5d 07       	cpc	r21, r29
    2b2c:	31 f0       	breq	.+12     	; 0x2b3a <OLED_print_henning+0x4c>
 *  \param void
 *
 *  \return void
 */

void OLED_print_henning(){
    2b2e:	80 2f       	mov	r24, r16
    2b30:	91 2f       	mov	r25, r17
    2b32:	9a 01       	movw	r18, r20
    2b34:	20 59       	subi	r18, 0x90	; 144
    2b36:	3f 4f       	sbci	r19, 0xFF	; 255
    2b38:	e8 cf       	rjmp	.-48     	; 0x2b0a <OLED_print_henning+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&henning[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2b3a:	80 91 a3 03 	lds	r24, 0x03A3
    2b3e:	8f 5f       	subi	r24, 0xFF	; 255
    2b40:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
		OLED_goto_column(0);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2b4a:	c0 58       	subi	r28, 0x80	; 128
    2b4c:	df 4f       	sbci	r29, 0xFF	; 255

void OLED_print_henning(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    2b4e:	c0 38       	cpi	r28, 0x80	; 128
    2b50:	84 e0       	ldi	r24, 0x04	; 4
    2b52:	d8 07       	cpc	r29, r24
    2b54:	21 f0       	breq	.+8      	; 0x2b5e <OLED_print_henning+0x70>
    2b56:	ae 01       	movw	r20, r28
    2b58:	40 58       	subi	r20, 0x80	; 128
    2b5a:	51 09       	sbc	r21, r1
    2b5c:	e8 cf       	rjmp	.-48     	; 0x2b2e <OLED_print_henning+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    2b5e:	0e 94 b9 13 	call	0x2772	; 0x2772 <OLED_home>
	OLED_print_sentence("Henning");
    2b62:	8a e2       	ldi	r24, 0x2A	; 42
    2b64:	92 e0       	ldi	r25, 0x02	; 2
    2b66:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
}
    2b6a:	df 91       	pop	r29
    2b6c:	cf 91       	pop	r28
    2b6e:	1f 91       	pop	r17
    2b70:	0f 91       	pop	r16
    2b72:	08 95       	ret

00002b74 <OLED_print_credits>:
 *  \param void
 *
 *  \return void
 */

void OLED_print_credits(){
    2b74:	0f 93       	push	r16
    2b76:	1f 93       	push	r17
    2b78:	cf 93       	push	r28
    2b7a:	df 93       	push	r29
	OLED_reset();
    2b7c:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	OLED_goto_column(0);
    2b80:	80 e0       	ldi	r24, 0x00	; 0
    2b82:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2b86:	c0 e8       	ldi	r28, 0x80	; 128
    2b88:	d0 e0       	ldi	r29, 0x00	; 0
 *  \param void
 *
 *  \return void
 */

void OLED_print_credits(){
    2b8a:	00 e0       	ldi	r16, 0x00	; 0
    2b8c:	10 e0       	ldi	r17, 0x00	; 0
    2b8e:	26 c0       	rjmp	.+76     	; 0x2bdc <OLED_print_credits+0x68>
    2b90:	f9 01       	movw	r30, r18
    2b92:	e8 0f       	add	r30, r24
    2b94:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&credits[j+k][i]));
    2b96:	e4 91       	lpm	r30, Z
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2b98:	a0 91 08 01 	lds	r26, 0x0108
    2b9c:	b0 91 09 01 	lds	r27, 0x0109
    2ba0:	ec 93       	st	X, r30
    2ba2:	01 96       	adiw	r24, 0x01	; 1
	OLED_reset();
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2ba4:	88 30       	cpi	r24, 0x08	; 8
    2ba6:	91 05       	cpc	r25, r1
    2ba8:	99 f7       	brne	.-26     	; 0x2b90 <OLED_print_credits+0x1c>
    2baa:	48 5f       	subi	r20, 0xF8	; 248
    2bac:	5f 4f       	sbci	r21, 0xFF	; 255
void OLED_print_credits(){
	OLED_reset();
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2bae:	4c 17       	cp	r20, r28
    2bb0:	5d 07       	cpc	r21, r29
    2bb2:	31 f0       	breq	.+12     	; 0x2bc0 <OLED_print_credits+0x4c>
 *  \param void
 *
 *  \return void
 */

void OLED_print_credits(){
    2bb4:	80 2f       	mov	r24, r16
    2bb6:	91 2f       	mov	r25, r17
    2bb8:	9a 01       	movw	r18, r20
    2bba:	20 59       	subi	r18, 0x90	; 144
    2bbc:	3b 4f       	sbci	r19, 0xFB	; 251
    2bbe:	e8 cf       	rjmp	.-48     	; 0x2b90 <OLED_print_credits+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&credits[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2bc0:	80 91 a3 03 	lds	r24, 0x03A3
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
		OLED_goto_column(0);
    2bca:	80 e0       	ldi	r24, 0x00	; 0
    2bcc:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2bd0:	c0 58       	subi	r28, 0x80	; 128
    2bd2:	df 4f       	sbci	r29, 0xFF	; 255
 */

void OLED_print_credits(){
	OLED_reset();
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    2bd4:	c0 38       	cpi	r28, 0x80	; 128
    2bd6:	84 e0       	ldi	r24, 0x04	; 4
    2bd8:	d8 07       	cpc	r29, r24
    2bda:	21 f0       	breq	.+8      	; 0x2be4 <OLED_print_credits+0x70>
    2bdc:	ae 01       	movw	r20, r28
    2bde:	40 58       	subi	r20, 0x80	; 128
    2be0:	51 09       	sbc	r21, r1
    2be2:	e8 cf       	rjmp	.-48     	; 0x2bb4 <OLED_print_credits+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    2be4:	0e 94 b9 13 	call	0x2772	; 0x2772 <OLED_home>
}
    2be8:	df 91       	pop	r29
    2bea:	cf 91       	pop	r28
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	08 95       	ret

00002bf2 <OLED_credits>:
 *
 *  \return void
 */

void OLED_credits(){
	OLED_print_credits();
    2bf2:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <OLED_print_credits>
    2bf6:	2f e7       	ldi	r18, 0x7F	; 127
    2bf8:	84 e8       	ldi	r24, 0x84	; 132
    2bfa:	9e e1       	ldi	r25, 0x1E	; 30
    2bfc:	21 50       	subi	r18, 0x01	; 1
    2bfe:	80 40       	sbci	r24, 0x00	; 0
    2c00:	90 40       	sbci	r25, 0x00	; 0
    2c02:	e1 f7       	brne	.-8      	; 0x2bfc <OLED_credits+0xa>
    2c04:	00 c0       	rjmp	.+0      	; 0x2c06 <OLED_credits+0x14>
    2c06:	00 00       	nop
	_delay_ms(10000);
	OLED_print_henning();
    2c08:	0e 94 77 15 	call	0x2aee	; 0x2aee <OLED_print_henning>
    2c0c:	2f e7       	ldi	r18, 0x7F	; 127
    2c0e:	84 e8       	ldi	r24, 0x84	; 132
    2c10:	9e e1       	ldi	r25, 0x1E	; 30
    2c12:	21 50       	subi	r18, 0x01	; 1
    2c14:	80 40       	sbci	r24, 0x00	; 0
    2c16:	90 40       	sbci	r25, 0x00	; 0
    2c18:	e1 f7       	brne	.-8      	; 0x2c12 <OLED_credits+0x20>
    2c1a:	00 c0       	rjmp	.+0      	; 0x2c1c <OLED_credits+0x2a>
    2c1c:	00 00       	nop
	_delay_ms(10000);
	OLED_print_brage();
    2c1e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <OLED_print_brage>
    2c22:	2f e7       	ldi	r18, 0x7F	; 127
    2c24:	84 e8       	ldi	r24, 0x84	; 132
    2c26:	9e e1       	ldi	r25, 0x1E	; 30
    2c28:	21 50       	subi	r18, 0x01	; 1
    2c2a:	80 40       	sbci	r24, 0x00	; 0
    2c2c:	90 40       	sbci	r25, 0x00	; 0
    2c2e:	e1 f7       	brne	.-8      	; 0x2c28 <OLED_credits+0x36>
    2c30:	00 c0       	rjmp	.+0      	; 0x2c32 <OLED_credits+0x40>
    2c32:	00 00       	nop
	_delay_ms(10000);
	OLED_print_tobias();
    2c34:	0e 94 34 15 	call	0x2a68	; 0x2a68 <OLED_print_tobias>
    2c38:	2f e7       	ldi	r18, 0x7F	; 127
    2c3a:	84 e8       	ldi	r24, 0x84	; 132
    2c3c:	9e e1       	ldi	r25, 0x1E	; 30
    2c3e:	21 50       	subi	r18, 0x01	; 1
    2c40:	80 40       	sbci	r24, 0x00	; 0
    2c42:	90 40       	sbci	r25, 0x00	; 0
    2c44:	e1 f7       	brne	.-8      	; 0x2c3e <OLED_credits+0x4c>
    2c46:	00 c0       	rjmp	.+0      	; 0x2c48 <OLED_credits+0x56>
    2c48:	00 00       	nop
    2c4a:	08 95       	ret

00002c4c <OLED_print_pig>:
 *  \param void
 *
 *  \return void
 */

void OLED_print_pig(){
    2c4c:	0f 93       	push	r16
    2c4e:	1f 93       	push	r17
    2c50:	cf 93       	push	r28
    2c52:	df 93       	push	r29
	OLED_reset();
    2c54:	0e 94 24 14 	call	0x2848	; 0x2848 <OLED_reset>
	
	OLED_goto_column(0);
    2c58:	80 e0       	ldi	r24, 0x00	; 0
    2c5a:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2c5e:	c0 e8       	ldi	r28, 0x80	; 128
    2c60:	d0 e0       	ldi	r29, 0x00	; 0
 *  \param void
 *
 *  \return void
 */

void OLED_print_pig(){
    2c62:	00 e0       	ldi	r16, 0x00	; 0
    2c64:	10 e0       	ldi	r17, 0x00	; 0
    2c66:	26 c0       	rjmp	.+76     	; 0x2cb4 <OLED_print_pig+0x68>
    2c68:	f9 01       	movw	r30, r18
    2c6a:	e8 0f       	add	r30, r24
    2c6c:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&pig[j+k][i]));
    2c6e:	e4 91       	lpm	r30, Z
 *
 *  \return void
 */
void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2c70:	a0 91 08 01 	lds	r26, 0x0108
    2c74:	b0 91 09 01 	lds	r27, 0x0109
    2c78:	ec 93       	st	X, r30
    2c7a:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2c7c:	88 30       	cpi	r24, 0x08	; 8
    2c7e:	91 05       	cpc	r25, r1
    2c80:	99 f7       	brne	.-26     	; 0x2c68 <OLED_print_pig+0x1c>
    2c82:	48 5f       	subi	r20, 0xF8	; 248
    2c84:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2c86:	4c 17       	cp	r20, r28
    2c88:	5d 07       	cpc	r21, r29
    2c8a:	31 f0       	breq	.+12     	; 0x2c98 <OLED_print_pig+0x4c>
 *  \param void
 *
 *  \return void
 */

void OLED_print_pig(){
    2c8c:	80 2f       	mov	r24, r16
    2c8e:	91 2f       	mov	r25, r17
    2c90:	9a 01       	movw	r18, r20
    2c92:	20 59       	subi	r18, 0x90	; 144
    2c94:	3f 4e       	sbci	r19, 0xEF	; 239
    2c96:	e8 cf       	rjmp	.-48     	; 0x2c68 <OLED_print_pig+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&pig[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2c98:	80 91 a3 03 	lds	r24, 0x03A3
    2c9c:	8f 5f       	subi	r24, 0xFF	; 255
    2c9e:	0e 94 86 13 	call	0x270c	; 0x270c <OLED_goto_page>
		OLED_goto_column(0);
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	0e 94 8f 13 	call	0x271e	; 0x271e <OLED_goto_column>
    2ca8:	c0 58       	subi	r28, 0x80	; 128
    2caa:	df 4f       	sbci	r29, 0xFF	; 255

void OLED_print_pig(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    2cac:	c0 38       	cpi	r28, 0x80	; 128
    2cae:	84 e0       	ldi	r24, 0x04	; 4
    2cb0:	d8 07       	cpc	r29, r24
    2cb2:	21 f0       	breq	.+8      	; 0x2cbc <OLED_print_pig+0x70>
    2cb4:	ae 01       	movw	r20, r28
    2cb6:	40 58       	subi	r20, 0x80	; 128
    2cb8:	51 09       	sbc	r21, r1
    2cba:	e8 cf       	rjmp	.-48     	; 0x2c8c <OLED_print_pig+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    2cbc:	0e 94 b9 13 	call	0x2772	; 0x2772 <OLED_home>
	OLED_print_sentence("Pig<3");
    2cc0:	82 e3       	ldi	r24, 0x32	; 50
    2cc2:	92 e0       	ldi	r25, 0x02	; 2
    2cc4:	0e 94 c2 13 	call	0x2784	; 0x2784 <OLED_print_sentence>
}
    2cc8:	df 91       	pop	r29
    2cca:	cf 91       	pop	r28
    2ccc:	1f 91       	pop	r17
    2cce:	0f 91       	pop	r16
    2cd0:	08 95       	ret

00002cd2 <SPI_write>:
    2cd2:	8f b9       	out	0x0f, r24	; 15
    2cd4:	77 9b       	sbis	0x0e, 7	; 14
    2cd6:	fe cf       	rjmp	.-4      	; 0x2cd4 <SPI_write+0x2>
    2cd8:	08 95       	ret

00002cda <SPI_read>:
    2cda:	1f b8       	out	0x0f, r1	; 15
    2cdc:	77 9b       	sbis	0x0e, 7	; 14
    2cde:	fe cf       	rjmp	.-4      	; 0x2cdc <SPI_read+0x2>
    2ce0:	8f b1       	in	r24, 0x0f	; 15
    2ce2:	08 95       	ret

00002ce4 <SPI_init>:
    2ce4:	bd 9a       	sbi	0x17, 5	; 23
    2ce6:	bf 9a       	sbi	0x17, 7	; 23
    2ce8:	bc 9a       	sbi	0x17, 4	; 23
    2cea:	be 98       	cbi	0x17, 6	; 23
    2cec:	8d b1       	in	r24, 0x0d	; 13
    2cee:	81 65       	ori	r24, 0x51	; 81
    2cf0:	8d b9       	out	0x0d, r24	; 13
    2cf2:	08 95       	ret

00002cf4 <SPI_chipSelect>:
    2cf4:	81 11       	cpse	r24, r1
    2cf6:	02 c0       	rjmp	.+4      	; 0x2cfc <SPI_chipSelect+0x8>
    2cf8:	c4 98       	cbi	0x18, 4	; 24
    2cfa:	08 95       	ret
    2cfc:	c4 9a       	sbi	0x18, 4	; 24
    2cfe:	08 95       	ret

00002d00 <USART_receive>:
    2d00:	5f 9b       	sbis	0x0b, 7	; 11
    2d02:	fe cf       	rjmp	.-4      	; 0x2d00 <USART_receive>
    2d04:	8c b1       	in	r24, 0x0c	; 12
    2d06:	08 95       	ret

00002d08 <USART_transmit>:
    2d08:	5d 9b       	sbis	0x0b, 5	; 11
    2d0a:	fe cf       	rjmp	.-4      	; 0x2d08 <USART_transmit>
    2d0c:	8c b9       	out	0x0c, r24	; 12
    2d0e:	08 95       	ret

00002d10 <USART_init>:
    2d10:	8f e1       	ldi	r24, 0x1F	; 31
    2d12:	89 b9       	out	0x09, r24	; 9
    2d14:	10 bc       	out	0x20, r1	; 32
    2d16:	88 e1       	ldi	r24, 0x18	; 24
    2d18:	8a b9       	out	0x0a, r24	; 10
    2d1a:	86 e8       	ldi	r24, 0x86	; 134
    2d1c:	80 bd       	out	0x20, r24	; 32
    2d1e:	60 e8       	ldi	r22, 0x80	; 128
    2d20:	76 e1       	ldi	r23, 0x16	; 22
    2d22:	84 e8       	ldi	r24, 0x84	; 132
    2d24:	96 e1       	ldi	r25, 0x16	; 22
    2d26:	0e 94 be 16 	call	0x2d7c	; 0x2d7c <fdevopen>
    2d2a:	08 95       	ret

00002d2c <__divmodhi4>:
    2d2c:	97 fb       	bst	r25, 7
    2d2e:	07 2e       	mov	r0, r23
    2d30:	16 f4       	brtc	.+4      	; 0x2d36 <__divmodhi4+0xa>
    2d32:	00 94       	com	r0
    2d34:	07 d0       	rcall	.+14     	; 0x2d44 <__divmodhi4_neg1>
    2d36:	77 fd       	sbrc	r23, 7
    2d38:	09 d0       	rcall	.+18     	; 0x2d4c <__divmodhi4_neg2>
    2d3a:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__udivmodhi4>
    2d3e:	07 fc       	sbrc	r0, 7
    2d40:	05 d0       	rcall	.+10     	; 0x2d4c <__divmodhi4_neg2>
    2d42:	3e f4       	brtc	.+14     	; 0x2d52 <__divmodhi4_exit>

00002d44 <__divmodhi4_neg1>:
    2d44:	90 95       	com	r25
    2d46:	81 95       	neg	r24
    2d48:	9f 4f       	sbci	r25, 0xFF	; 255
    2d4a:	08 95       	ret

00002d4c <__divmodhi4_neg2>:
    2d4c:	70 95       	com	r23
    2d4e:	61 95       	neg	r22
    2d50:	7f 4f       	sbci	r23, 0xFF	; 255

00002d52 <__divmodhi4_exit>:
    2d52:	08 95       	ret

00002d54 <__udivmodhi4>:
    2d54:	aa 1b       	sub	r26, r26
    2d56:	bb 1b       	sub	r27, r27
    2d58:	51 e1       	ldi	r21, 0x11	; 17
    2d5a:	07 c0       	rjmp	.+14     	; 0x2d6a <__udivmodhi4_ep>

00002d5c <__udivmodhi4_loop>:
    2d5c:	aa 1f       	adc	r26, r26
    2d5e:	bb 1f       	adc	r27, r27
    2d60:	a6 17       	cp	r26, r22
    2d62:	b7 07       	cpc	r27, r23
    2d64:	10 f0       	brcs	.+4      	; 0x2d6a <__udivmodhi4_ep>
    2d66:	a6 1b       	sub	r26, r22
    2d68:	b7 0b       	sbc	r27, r23

00002d6a <__udivmodhi4_ep>:
    2d6a:	88 1f       	adc	r24, r24
    2d6c:	99 1f       	adc	r25, r25
    2d6e:	5a 95       	dec	r21
    2d70:	a9 f7       	brne	.-22     	; 0x2d5c <__udivmodhi4_loop>
    2d72:	80 95       	com	r24
    2d74:	90 95       	com	r25
    2d76:	bc 01       	movw	r22, r24
    2d78:	cd 01       	movw	r24, r26
    2d7a:	08 95       	ret

00002d7c <fdevopen>:
    2d7c:	0f 93       	push	r16
    2d7e:	1f 93       	push	r17
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	ec 01       	movw	r28, r24
    2d86:	8b 01       	movw	r16, r22
    2d88:	00 97       	sbiw	r24, 0x00	; 0
    2d8a:	31 f4       	brne	.+12     	; 0x2d98 <fdevopen+0x1c>
    2d8c:	61 15       	cp	r22, r1
    2d8e:	71 05       	cpc	r23, r1
    2d90:	19 f4       	brne	.+6      	; 0x2d98 <fdevopen+0x1c>
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	38 c0       	rjmp	.+112    	; 0x2e08 <fdevopen+0x8c>
    2d98:	6e e0       	ldi	r22, 0x0E	; 14
    2d9a:	70 e0       	ldi	r23, 0x00	; 0
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	90 e0       	ldi	r25, 0x00	; 0
    2da0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <calloc>
    2da4:	fc 01       	movw	r30, r24
    2da6:	00 97       	sbiw	r24, 0x00	; 0
    2da8:	a1 f3       	breq	.-24     	; 0x2d92 <fdevopen+0x16>
    2daa:	80 e8       	ldi	r24, 0x80	; 128
    2dac:	83 83       	std	Z+3, r24	; 0x03
    2dae:	01 15       	cp	r16, r1
    2db0:	11 05       	cpc	r17, r1
    2db2:	71 f0       	breq	.+28     	; 0x2dd0 <fdevopen+0x54>
    2db4:	13 87       	std	Z+11, r17	; 0x0b
    2db6:	02 87       	std	Z+10, r16	; 0x0a
    2db8:	81 e8       	ldi	r24, 0x81	; 129
    2dba:	83 83       	std	Z+3, r24	; 0x03
    2dbc:	80 91 a4 03 	lds	r24, 0x03A4
    2dc0:	90 91 a5 03 	lds	r25, 0x03A5
    2dc4:	89 2b       	or	r24, r25
    2dc6:	21 f4       	brne	.+8      	; 0x2dd0 <fdevopen+0x54>
    2dc8:	f0 93 a5 03 	sts	0x03A5, r31
    2dcc:	e0 93 a4 03 	sts	0x03A4, r30
    2dd0:	20 97       	sbiw	r28, 0x00	; 0
    2dd2:	c9 f0       	breq	.+50     	; 0x2e06 <fdevopen+0x8a>
    2dd4:	d1 87       	std	Z+9, r29	; 0x09
    2dd6:	c0 87       	std	Z+8, r28	; 0x08
    2dd8:	83 81       	ldd	r24, Z+3	; 0x03
    2dda:	82 60       	ori	r24, 0x02	; 2
    2ddc:	83 83       	std	Z+3, r24	; 0x03
    2dde:	80 91 a6 03 	lds	r24, 0x03A6
    2de2:	90 91 a7 03 	lds	r25, 0x03A7
    2de6:	89 2b       	or	r24, r25
    2de8:	71 f4       	brne	.+28     	; 0x2e06 <fdevopen+0x8a>
    2dea:	f0 93 a7 03 	sts	0x03A7, r31
    2dee:	e0 93 a6 03 	sts	0x03A6, r30
    2df2:	80 91 a8 03 	lds	r24, 0x03A8
    2df6:	90 91 a9 03 	lds	r25, 0x03A9
    2dfa:	89 2b       	or	r24, r25
    2dfc:	21 f4       	brne	.+8      	; 0x2e06 <fdevopen+0x8a>
    2dfe:	f0 93 a9 03 	sts	0x03A9, r31
    2e02:	e0 93 a8 03 	sts	0x03A8, r30
    2e06:	cf 01       	movw	r24, r30
    2e08:	df 91       	pop	r29
    2e0a:	cf 91       	pop	r28
    2e0c:	1f 91       	pop	r17
    2e0e:	0f 91       	pop	r16
    2e10:	08 95       	ret

00002e12 <sprintf>:
    2e12:	ae e0       	ldi	r26, 0x0E	; 14
    2e14:	b0 e0       	ldi	r27, 0x00	; 0
    2e16:	ef e0       	ldi	r30, 0x0F	; 15
    2e18:	f7 e1       	ldi	r31, 0x17	; 23
    2e1a:	0c 94 fb 1a 	jmp	0x35f6	; 0x35f6 <__prologue_saves__+0x1c>
    2e1e:	0d 89       	ldd	r16, Y+21	; 0x15
    2e20:	1e 89       	ldd	r17, Y+22	; 0x16
    2e22:	86 e0       	ldi	r24, 0x06	; 6
    2e24:	8c 83       	std	Y+4, r24	; 0x04
    2e26:	1a 83       	std	Y+2, r17	; 0x02
    2e28:	09 83       	std	Y+1, r16	; 0x01
    2e2a:	8f ef       	ldi	r24, 0xFF	; 255
    2e2c:	9f e7       	ldi	r25, 0x7F	; 127
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	ae 01       	movw	r20, r28
    2e34:	47 5e       	subi	r20, 0xE7	; 231
    2e36:	5f 4f       	sbci	r21, 0xFF	; 255
    2e38:	6f 89       	ldd	r22, Y+23	; 0x17
    2e3a:	78 8d       	ldd	r23, Y+24	; 0x18
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	01 96       	adiw	r24, 0x01	; 1
    2e40:	0e 94 2b 17 	call	0x2e56	; 0x2e56 <vfprintf>
    2e44:	ef 81       	ldd	r30, Y+7	; 0x07
    2e46:	f8 85       	ldd	r31, Y+8	; 0x08
    2e48:	e0 0f       	add	r30, r16
    2e4a:	f1 1f       	adc	r31, r17
    2e4c:	10 82       	st	Z, r1
    2e4e:	2e 96       	adiw	r28, 0x0e	; 14
    2e50:	e4 e0       	ldi	r30, 0x04	; 4
    2e52:	0c 94 17 1b 	jmp	0x362e	; 0x362e <__epilogue_restores__+0x1c>

00002e56 <vfprintf>:
    2e56:	ac e0       	ldi	r26, 0x0C	; 12
    2e58:	b0 e0       	ldi	r27, 0x00	; 0
    2e5a:	e1 e3       	ldi	r30, 0x31	; 49
    2e5c:	f7 e1       	ldi	r31, 0x17	; 23
    2e5e:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__prologue_saves__>
    2e62:	7c 01       	movw	r14, r24
    2e64:	6b 01       	movw	r12, r22
    2e66:	8a 01       	movw	r16, r20
    2e68:	fc 01       	movw	r30, r24
    2e6a:	17 82       	std	Z+7, r1	; 0x07
    2e6c:	16 82       	std	Z+6, r1	; 0x06
    2e6e:	83 81       	ldd	r24, Z+3	; 0x03
    2e70:	81 ff       	sbrs	r24, 1
    2e72:	bd c1       	rjmp	.+890    	; 0x31ee <vfprintf+0x398>
    2e74:	ce 01       	movw	r24, r28
    2e76:	01 96       	adiw	r24, 0x01	; 1
    2e78:	4c 01       	movw	r8, r24
    2e7a:	f7 01       	movw	r30, r14
    2e7c:	93 81       	ldd	r25, Z+3	; 0x03
    2e7e:	f6 01       	movw	r30, r12
    2e80:	93 fd       	sbrc	r25, 3
    2e82:	85 91       	lpm	r24, Z+
    2e84:	93 ff       	sbrs	r25, 3
    2e86:	81 91       	ld	r24, Z+
    2e88:	6f 01       	movw	r12, r30
    2e8a:	88 23       	and	r24, r24
    2e8c:	09 f4       	brne	.+2      	; 0x2e90 <vfprintf+0x3a>
    2e8e:	ab c1       	rjmp	.+854    	; 0x31e6 <vfprintf+0x390>
    2e90:	85 32       	cpi	r24, 0x25	; 37
    2e92:	39 f4       	brne	.+14     	; 0x2ea2 <vfprintf+0x4c>
    2e94:	93 fd       	sbrc	r25, 3
    2e96:	85 91       	lpm	r24, Z+
    2e98:	93 ff       	sbrs	r25, 3
    2e9a:	81 91       	ld	r24, Z+
    2e9c:	6f 01       	movw	r12, r30
    2e9e:	85 32       	cpi	r24, 0x25	; 37
    2ea0:	29 f4       	brne	.+10     	; 0x2eac <vfprintf+0x56>
    2ea2:	b7 01       	movw	r22, r14
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    2eaa:	e7 cf       	rjmp	.-50     	; 0x2e7a <vfprintf+0x24>
    2eac:	51 2c       	mov	r5, r1
    2eae:	31 2c       	mov	r3, r1
    2eb0:	20 e0       	ldi	r18, 0x00	; 0
    2eb2:	20 32       	cpi	r18, 0x20	; 32
    2eb4:	a0 f4       	brcc	.+40     	; 0x2ede <vfprintf+0x88>
    2eb6:	8b 32       	cpi	r24, 0x2B	; 43
    2eb8:	69 f0       	breq	.+26     	; 0x2ed4 <vfprintf+0x7e>
    2eba:	30 f4       	brcc	.+12     	; 0x2ec8 <vfprintf+0x72>
    2ebc:	80 32       	cpi	r24, 0x20	; 32
    2ebe:	59 f0       	breq	.+22     	; 0x2ed6 <vfprintf+0x80>
    2ec0:	83 32       	cpi	r24, 0x23	; 35
    2ec2:	69 f4       	brne	.+26     	; 0x2ede <vfprintf+0x88>
    2ec4:	20 61       	ori	r18, 0x10	; 16
    2ec6:	2c c0       	rjmp	.+88     	; 0x2f20 <vfprintf+0xca>
    2ec8:	8d 32       	cpi	r24, 0x2D	; 45
    2eca:	39 f0       	breq	.+14     	; 0x2eda <vfprintf+0x84>
    2ecc:	80 33       	cpi	r24, 0x30	; 48
    2ece:	39 f4       	brne	.+14     	; 0x2ede <vfprintf+0x88>
    2ed0:	21 60       	ori	r18, 0x01	; 1
    2ed2:	26 c0       	rjmp	.+76     	; 0x2f20 <vfprintf+0xca>
    2ed4:	22 60       	ori	r18, 0x02	; 2
    2ed6:	24 60       	ori	r18, 0x04	; 4
    2ed8:	23 c0       	rjmp	.+70     	; 0x2f20 <vfprintf+0xca>
    2eda:	28 60       	ori	r18, 0x08	; 8
    2edc:	21 c0       	rjmp	.+66     	; 0x2f20 <vfprintf+0xca>
    2ede:	27 fd       	sbrc	r18, 7
    2ee0:	27 c0       	rjmp	.+78     	; 0x2f30 <vfprintf+0xda>
    2ee2:	30 ed       	ldi	r19, 0xD0	; 208
    2ee4:	38 0f       	add	r19, r24
    2ee6:	3a 30       	cpi	r19, 0x0A	; 10
    2ee8:	78 f4       	brcc	.+30     	; 0x2f08 <vfprintf+0xb2>
    2eea:	26 ff       	sbrs	r18, 6
    2eec:	06 c0       	rjmp	.+12     	; 0x2efa <vfprintf+0xa4>
    2eee:	fa e0       	ldi	r31, 0x0A	; 10
    2ef0:	5f 9e       	mul	r5, r31
    2ef2:	30 0d       	add	r19, r0
    2ef4:	11 24       	eor	r1, r1
    2ef6:	53 2e       	mov	r5, r19
    2ef8:	13 c0       	rjmp	.+38     	; 0x2f20 <vfprintf+0xca>
    2efa:	8a e0       	ldi	r24, 0x0A	; 10
    2efc:	38 9e       	mul	r3, r24
    2efe:	30 0d       	add	r19, r0
    2f00:	11 24       	eor	r1, r1
    2f02:	33 2e       	mov	r3, r19
    2f04:	20 62       	ori	r18, 0x20	; 32
    2f06:	0c c0       	rjmp	.+24     	; 0x2f20 <vfprintf+0xca>
    2f08:	8e 32       	cpi	r24, 0x2E	; 46
    2f0a:	21 f4       	brne	.+8      	; 0x2f14 <vfprintf+0xbe>
    2f0c:	26 fd       	sbrc	r18, 6
    2f0e:	6b c1       	rjmp	.+726    	; 0x31e6 <vfprintf+0x390>
    2f10:	20 64       	ori	r18, 0x40	; 64
    2f12:	06 c0       	rjmp	.+12     	; 0x2f20 <vfprintf+0xca>
    2f14:	8c 36       	cpi	r24, 0x6C	; 108
    2f16:	11 f4       	brne	.+4      	; 0x2f1c <vfprintf+0xc6>
    2f18:	20 68       	ori	r18, 0x80	; 128
    2f1a:	02 c0       	rjmp	.+4      	; 0x2f20 <vfprintf+0xca>
    2f1c:	88 36       	cpi	r24, 0x68	; 104
    2f1e:	41 f4       	brne	.+16     	; 0x2f30 <vfprintf+0xda>
    2f20:	f6 01       	movw	r30, r12
    2f22:	93 fd       	sbrc	r25, 3
    2f24:	85 91       	lpm	r24, Z+
    2f26:	93 ff       	sbrs	r25, 3
    2f28:	81 91       	ld	r24, Z+
    2f2a:	6f 01       	movw	r12, r30
    2f2c:	81 11       	cpse	r24, r1
    2f2e:	c1 cf       	rjmp	.-126    	; 0x2eb2 <vfprintf+0x5c>
    2f30:	98 2f       	mov	r25, r24
    2f32:	9f 7d       	andi	r25, 0xDF	; 223
    2f34:	95 54       	subi	r25, 0x45	; 69
    2f36:	93 30       	cpi	r25, 0x03	; 3
    2f38:	28 f4       	brcc	.+10     	; 0x2f44 <vfprintf+0xee>
    2f3a:	0c 5f       	subi	r16, 0xFC	; 252
    2f3c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f3e:	ff e3       	ldi	r31, 0x3F	; 63
    2f40:	f9 83       	std	Y+1, r31	; 0x01
    2f42:	0d c0       	rjmp	.+26     	; 0x2f5e <vfprintf+0x108>
    2f44:	83 36       	cpi	r24, 0x63	; 99
    2f46:	31 f0       	breq	.+12     	; 0x2f54 <vfprintf+0xfe>
    2f48:	83 37       	cpi	r24, 0x73	; 115
    2f4a:	71 f0       	breq	.+28     	; 0x2f68 <vfprintf+0x112>
    2f4c:	83 35       	cpi	r24, 0x53	; 83
    2f4e:	09 f0       	breq	.+2      	; 0x2f52 <vfprintf+0xfc>
    2f50:	5b c0       	rjmp	.+182    	; 0x3008 <vfprintf+0x1b2>
    2f52:	22 c0       	rjmp	.+68     	; 0x2f98 <vfprintf+0x142>
    2f54:	f8 01       	movw	r30, r16
    2f56:	80 81       	ld	r24, Z
    2f58:	89 83       	std	Y+1, r24	; 0x01
    2f5a:	0e 5f       	subi	r16, 0xFE	; 254
    2f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2f5e:	44 24       	eor	r4, r4
    2f60:	43 94       	inc	r4
    2f62:	51 2c       	mov	r5, r1
    2f64:	54 01       	movw	r10, r8
    2f66:	15 c0       	rjmp	.+42     	; 0x2f92 <vfprintf+0x13c>
    2f68:	38 01       	movw	r6, r16
    2f6a:	f2 e0       	ldi	r31, 0x02	; 2
    2f6c:	6f 0e       	add	r6, r31
    2f6e:	71 1c       	adc	r7, r1
    2f70:	f8 01       	movw	r30, r16
    2f72:	a0 80       	ld	r10, Z
    2f74:	b1 80       	ldd	r11, Z+1	; 0x01
    2f76:	26 ff       	sbrs	r18, 6
    2f78:	03 c0       	rjmp	.+6      	; 0x2f80 <vfprintf+0x12a>
    2f7a:	65 2d       	mov	r22, r5
    2f7c:	70 e0       	ldi	r23, 0x00	; 0
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <vfprintf+0x12e>
    2f80:	6f ef       	ldi	r22, 0xFF	; 255
    2f82:	7f ef       	ldi	r23, 0xFF	; 255
    2f84:	c5 01       	movw	r24, r10
    2f86:	2c 87       	std	Y+12, r18	; 0x0c
    2f88:	0e 94 52 1a 	call	0x34a4	; 0x34a4 <strnlen>
    2f8c:	2c 01       	movw	r4, r24
    2f8e:	83 01       	movw	r16, r6
    2f90:	2c 85       	ldd	r18, Y+12	; 0x0c
    2f92:	2f 77       	andi	r18, 0x7F	; 127
    2f94:	22 2e       	mov	r2, r18
    2f96:	17 c0       	rjmp	.+46     	; 0x2fc6 <vfprintf+0x170>
    2f98:	38 01       	movw	r6, r16
    2f9a:	f2 e0       	ldi	r31, 0x02	; 2
    2f9c:	6f 0e       	add	r6, r31
    2f9e:	71 1c       	adc	r7, r1
    2fa0:	f8 01       	movw	r30, r16
    2fa2:	a0 80       	ld	r10, Z
    2fa4:	b1 80       	ldd	r11, Z+1	; 0x01
    2fa6:	26 ff       	sbrs	r18, 6
    2fa8:	03 c0       	rjmp	.+6      	; 0x2fb0 <vfprintf+0x15a>
    2faa:	65 2d       	mov	r22, r5
    2fac:	70 e0       	ldi	r23, 0x00	; 0
    2fae:	02 c0       	rjmp	.+4      	; 0x2fb4 <vfprintf+0x15e>
    2fb0:	6f ef       	ldi	r22, 0xFF	; 255
    2fb2:	7f ef       	ldi	r23, 0xFF	; 255
    2fb4:	c5 01       	movw	r24, r10
    2fb6:	2c 87       	std	Y+12, r18	; 0x0c
    2fb8:	0e 94 40 1a 	call	0x3480	; 0x3480 <strnlen_P>
    2fbc:	2c 01       	movw	r4, r24
    2fbe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2fc0:	20 68       	ori	r18, 0x80	; 128
    2fc2:	22 2e       	mov	r2, r18
    2fc4:	83 01       	movw	r16, r6
    2fc6:	23 fc       	sbrc	r2, 3
    2fc8:	1b c0       	rjmp	.+54     	; 0x3000 <vfprintf+0x1aa>
    2fca:	83 2d       	mov	r24, r3
    2fcc:	90 e0       	ldi	r25, 0x00	; 0
    2fce:	48 16       	cp	r4, r24
    2fd0:	59 06       	cpc	r5, r25
    2fd2:	b0 f4       	brcc	.+44     	; 0x3000 <vfprintf+0x1aa>
    2fd4:	b7 01       	movw	r22, r14
    2fd6:	80 e2       	ldi	r24, 0x20	; 32
    2fd8:	90 e0       	ldi	r25, 0x00	; 0
    2fda:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    2fde:	3a 94       	dec	r3
    2fe0:	f4 cf       	rjmp	.-24     	; 0x2fca <vfprintf+0x174>
    2fe2:	f5 01       	movw	r30, r10
    2fe4:	27 fc       	sbrc	r2, 7
    2fe6:	85 91       	lpm	r24, Z+
    2fe8:	27 fe       	sbrs	r2, 7
    2fea:	81 91       	ld	r24, Z+
    2fec:	5f 01       	movw	r10, r30
    2fee:	b7 01       	movw	r22, r14
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    2ff6:	31 10       	cpse	r3, r1
    2ff8:	3a 94       	dec	r3
    2ffa:	f1 e0       	ldi	r31, 0x01	; 1
    2ffc:	4f 1a       	sub	r4, r31
    2ffe:	51 08       	sbc	r5, r1
    3000:	41 14       	cp	r4, r1
    3002:	51 04       	cpc	r5, r1
    3004:	71 f7       	brne	.-36     	; 0x2fe2 <vfprintf+0x18c>
    3006:	e5 c0       	rjmp	.+458    	; 0x31d2 <vfprintf+0x37c>
    3008:	84 36       	cpi	r24, 0x64	; 100
    300a:	11 f0       	breq	.+4      	; 0x3010 <vfprintf+0x1ba>
    300c:	89 36       	cpi	r24, 0x69	; 105
    300e:	39 f5       	brne	.+78     	; 0x305e <vfprintf+0x208>
    3010:	f8 01       	movw	r30, r16
    3012:	27 ff       	sbrs	r18, 7
    3014:	07 c0       	rjmp	.+14     	; 0x3024 <vfprintf+0x1ce>
    3016:	60 81       	ld	r22, Z
    3018:	71 81       	ldd	r23, Z+1	; 0x01
    301a:	82 81       	ldd	r24, Z+2	; 0x02
    301c:	93 81       	ldd	r25, Z+3	; 0x03
    301e:	0c 5f       	subi	r16, 0xFC	; 252
    3020:	1f 4f       	sbci	r17, 0xFF	; 255
    3022:	08 c0       	rjmp	.+16     	; 0x3034 <vfprintf+0x1de>
    3024:	60 81       	ld	r22, Z
    3026:	71 81       	ldd	r23, Z+1	; 0x01
    3028:	88 27       	eor	r24, r24
    302a:	77 fd       	sbrc	r23, 7
    302c:	80 95       	com	r24
    302e:	98 2f       	mov	r25, r24
    3030:	0e 5f       	subi	r16, 0xFE	; 254
    3032:	1f 4f       	sbci	r17, 0xFF	; 255
    3034:	2f 76       	andi	r18, 0x6F	; 111
    3036:	b2 2e       	mov	r11, r18
    3038:	97 ff       	sbrs	r25, 7
    303a:	09 c0       	rjmp	.+18     	; 0x304e <vfprintf+0x1f8>
    303c:	90 95       	com	r25
    303e:	80 95       	com	r24
    3040:	70 95       	com	r23
    3042:	61 95       	neg	r22
    3044:	7f 4f       	sbci	r23, 0xFF	; 255
    3046:	8f 4f       	sbci	r24, 0xFF	; 255
    3048:	9f 4f       	sbci	r25, 0xFF	; 255
    304a:	20 68       	ori	r18, 0x80	; 128
    304c:	b2 2e       	mov	r11, r18
    304e:	2a e0       	ldi	r18, 0x0A	; 10
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	a4 01       	movw	r20, r8
    3054:	0e 94 8f 1a 	call	0x351e	; 0x351e <__ultoa_invert>
    3058:	a8 2e       	mov	r10, r24
    305a:	a8 18       	sub	r10, r8
    305c:	44 c0       	rjmp	.+136    	; 0x30e6 <vfprintf+0x290>
    305e:	85 37       	cpi	r24, 0x75	; 117
    3060:	29 f4       	brne	.+10     	; 0x306c <vfprintf+0x216>
    3062:	2f 7e       	andi	r18, 0xEF	; 239
    3064:	b2 2e       	mov	r11, r18
    3066:	2a e0       	ldi	r18, 0x0A	; 10
    3068:	30 e0       	ldi	r19, 0x00	; 0
    306a:	25 c0       	rjmp	.+74     	; 0x30b6 <vfprintf+0x260>
    306c:	f2 2f       	mov	r31, r18
    306e:	f9 7f       	andi	r31, 0xF9	; 249
    3070:	bf 2e       	mov	r11, r31
    3072:	8f 36       	cpi	r24, 0x6F	; 111
    3074:	c1 f0       	breq	.+48     	; 0x30a6 <vfprintf+0x250>
    3076:	18 f4       	brcc	.+6      	; 0x307e <vfprintf+0x228>
    3078:	88 35       	cpi	r24, 0x58	; 88
    307a:	79 f0       	breq	.+30     	; 0x309a <vfprintf+0x244>
    307c:	b4 c0       	rjmp	.+360    	; 0x31e6 <vfprintf+0x390>
    307e:	80 37       	cpi	r24, 0x70	; 112
    3080:	19 f0       	breq	.+6      	; 0x3088 <vfprintf+0x232>
    3082:	88 37       	cpi	r24, 0x78	; 120
    3084:	21 f0       	breq	.+8      	; 0x308e <vfprintf+0x238>
    3086:	af c0       	rjmp	.+350    	; 0x31e6 <vfprintf+0x390>
    3088:	2f 2f       	mov	r18, r31
    308a:	20 61       	ori	r18, 0x10	; 16
    308c:	b2 2e       	mov	r11, r18
    308e:	b4 fe       	sbrs	r11, 4
    3090:	0d c0       	rjmp	.+26     	; 0x30ac <vfprintf+0x256>
    3092:	8b 2d       	mov	r24, r11
    3094:	84 60       	ori	r24, 0x04	; 4
    3096:	b8 2e       	mov	r11, r24
    3098:	09 c0       	rjmp	.+18     	; 0x30ac <vfprintf+0x256>
    309a:	24 ff       	sbrs	r18, 4
    309c:	0a c0       	rjmp	.+20     	; 0x30b2 <vfprintf+0x25c>
    309e:	9f 2f       	mov	r25, r31
    30a0:	96 60       	ori	r25, 0x06	; 6
    30a2:	b9 2e       	mov	r11, r25
    30a4:	06 c0       	rjmp	.+12     	; 0x30b2 <vfprintf+0x25c>
    30a6:	28 e0       	ldi	r18, 0x08	; 8
    30a8:	30 e0       	ldi	r19, 0x00	; 0
    30aa:	05 c0       	rjmp	.+10     	; 0x30b6 <vfprintf+0x260>
    30ac:	20 e1       	ldi	r18, 0x10	; 16
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <vfprintf+0x260>
    30b2:	20 e1       	ldi	r18, 0x10	; 16
    30b4:	32 e0       	ldi	r19, 0x02	; 2
    30b6:	f8 01       	movw	r30, r16
    30b8:	b7 fe       	sbrs	r11, 7
    30ba:	07 c0       	rjmp	.+14     	; 0x30ca <vfprintf+0x274>
    30bc:	60 81       	ld	r22, Z
    30be:	71 81       	ldd	r23, Z+1	; 0x01
    30c0:	82 81       	ldd	r24, Z+2	; 0x02
    30c2:	93 81       	ldd	r25, Z+3	; 0x03
    30c4:	0c 5f       	subi	r16, 0xFC	; 252
    30c6:	1f 4f       	sbci	r17, 0xFF	; 255
    30c8:	06 c0       	rjmp	.+12     	; 0x30d6 <vfprintf+0x280>
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 5f       	subi	r16, 0xFE	; 254
    30d4:	1f 4f       	sbci	r17, 0xFF	; 255
    30d6:	a4 01       	movw	r20, r8
    30d8:	0e 94 8f 1a 	call	0x351e	; 0x351e <__ultoa_invert>
    30dc:	a8 2e       	mov	r10, r24
    30de:	a8 18       	sub	r10, r8
    30e0:	fb 2d       	mov	r31, r11
    30e2:	ff 77       	andi	r31, 0x7F	; 127
    30e4:	bf 2e       	mov	r11, r31
    30e6:	b6 fe       	sbrs	r11, 6
    30e8:	0b c0       	rjmp	.+22     	; 0x3100 <vfprintf+0x2aa>
    30ea:	2b 2d       	mov	r18, r11
    30ec:	2e 7f       	andi	r18, 0xFE	; 254
    30ee:	a5 14       	cp	r10, r5
    30f0:	50 f4       	brcc	.+20     	; 0x3106 <vfprintf+0x2b0>
    30f2:	b4 fe       	sbrs	r11, 4
    30f4:	0a c0       	rjmp	.+20     	; 0x310a <vfprintf+0x2b4>
    30f6:	b2 fc       	sbrc	r11, 2
    30f8:	08 c0       	rjmp	.+16     	; 0x310a <vfprintf+0x2b4>
    30fa:	2b 2d       	mov	r18, r11
    30fc:	2e 7e       	andi	r18, 0xEE	; 238
    30fe:	05 c0       	rjmp	.+10     	; 0x310a <vfprintf+0x2b4>
    3100:	7a 2c       	mov	r7, r10
    3102:	2b 2d       	mov	r18, r11
    3104:	03 c0       	rjmp	.+6      	; 0x310c <vfprintf+0x2b6>
    3106:	7a 2c       	mov	r7, r10
    3108:	01 c0       	rjmp	.+2      	; 0x310c <vfprintf+0x2b6>
    310a:	75 2c       	mov	r7, r5
    310c:	24 ff       	sbrs	r18, 4
    310e:	0d c0       	rjmp	.+26     	; 0x312a <vfprintf+0x2d4>
    3110:	fe 01       	movw	r30, r28
    3112:	ea 0d       	add	r30, r10
    3114:	f1 1d       	adc	r31, r1
    3116:	80 81       	ld	r24, Z
    3118:	80 33       	cpi	r24, 0x30	; 48
    311a:	11 f4       	brne	.+4      	; 0x3120 <vfprintf+0x2ca>
    311c:	29 7e       	andi	r18, 0xE9	; 233
    311e:	09 c0       	rjmp	.+18     	; 0x3132 <vfprintf+0x2dc>
    3120:	22 ff       	sbrs	r18, 2
    3122:	06 c0       	rjmp	.+12     	; 0x3130 <vfprintf+0x2da>
    3124:	73 94       	inc	r7
    3126:	73 94       	inc	r7
    3128:	04 c0       	rjmp	.+8      	; 0x3132 <vfprintf+0x2dc>
    312a:	82 2f       	mov	r24, r18
    312c:	86 78       	andi	r24, 0x86	; 134
    312e:	09 f0       	breq	.+2      	; 0x3132 <vfprintf+0x2dc>
    3130:	73 94       	inc	r7
    3132:	23 fd       	sbrc	r18, 3
    3134:	13 c0       	rjmp	.+38     	; 0x315c <vfprintf+0x306>
    3136:	20 ff       	sbrs	r18, 0
    3138:	06 c0       	rjmp	.+12     	; 0x3146 <vfprintf+0x2f0>
    313a:	5a 2c       	mov	r5, r10
    313c:	73 14       	cp	r7, r3
    313e:	18 f4       	brcc	.+6      	; 0x3146 <vfprintf+0x2f0>
    3140:	53 0c       	add	r5, r3
    3142:	57 18       	sub	r5, r7
    3144:	73 2c       	mov	r7, r3
    3146:	73 14       	cp	r7, r3
    3148:	68 f4       	brcc	.+26     	; 0x3164 <vfprintf+0x30e>
    314a:	b7 01       	movw	r22, r14
    314c:	80 e2       	ldi	r24, 0x20	; 32
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	2c 87       	std	Y+12, r18	; 0x0c
    3152:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    3156:	73 94       	inc	r7
    3158:	2c 85       	ldd	r18, Y+12	; 0x0c
    315a:	f5 cf       	rjmp	.-22     	; 0x3146 <vfprintf+0x2f0>
    315c:	73 14       	cp	r7, r3
    315e:	10 f4       	brcc	.+4      	; 0x3164 <vfprintf+0x30e>
    3160:	37 18       	sub	r3, r7
    3162:	01 c0       	rjmp	.+2      	; 0x3166 <vfprintf+0x310>
    3164:	31 2c       	mov	r3, r1
    3166:	24 ff       	sbrs	r18, 4
    3168:	12 c0       	rjmp	.+36     	; 0x318e <vfprintf+0x338>
    316a:	b7 01       	movw	r22, r14
    316c:	80 e3       	ldi	r24, 0x30	; 48
    316e:	90 e0       	ldi	r25, 0x00	; 0
    3170:	2c 87       	std	Y+12, r18	; 0x0c
    3172:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    3176:	2c 85       	ldd	r18, Y+12	; 0x0c
    3178:	22 ff       	sbrs	r18, 2
    317a:	17 c0       	rjmp	.+46     	; 0x31aa <vfprintf+0x354>
    317c:	21 ff       	sbrs	r18, 1
    317e:	03 c0       	rjmp	.+6      	; 0x3186 <vfprintf+0x330>
    3180:	88 e5       	ldi	r24, 0x58	; 88
    3182:	90 e0       	ldi	r25, 0x00	; 0
    3184:	02 c0       	rjmp	.+4      	; 0x318a <vfprintf+0x334>
    3186:	88 e7       	ldi	r24, 0x78	; 120
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	b7 01       	movw	r22, r14
    318c:	0c c0       	rjmp	.+24     	; 0x31a6 <vfprintf+0x350>
    318e:	82 2f       	mov	r24, r18
    3190:	86 78       	andi	r24, 0x86	; 134
    3192:	59 f0       	breq	.+22     	; 0x31aa <vfprintf+0x354>
    3194:	21 fd       	sbrc	r18, 1
    3196:	02 c0       	rjmp	.+4      	; 0x319c <vfprintf+0x346>
    3198:	80 e2       	ldi	r24, 0x20	; 32
    319a:	01 c0       	rjmp	.+2      	; 0x319e <vfprintf+0x348>
    319c:	8b e2       	ldi	r24, 0x2B	; 43
    319e:	27 fd       	sbrc	r18, 7
    31a0:	8d e2       	ldi	r24, 0x2D	; 45
    31a2:	b7 01       	movw	r22, r14
    31a4:	90 e0       	ldi	r25, 0x00	; 0
    31a6:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    31aa:	a5 14       	cp	r10, r5
    31ac:	38 f4       	brcc	.+14     	; 0x31bc <vfprintf+0x366>
    31ae:	b7 01       	movw	r22, r14
    31b0:	80 e3       	ldi	r24, 0x30	; 48
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    31b8:	5a 94       	dec	r5
    31ba:	f7 cf       	rjmp	.-18     	; 0x31aa <vfprintf+0x354>
    31bc:	aa 94       	dec	r10
    31be:	f4 01       	movw	r30, r8
    31c0:	ea 0d       	add	r30, r10
    31c2:	f1 1d       	adc	r31, r1
    31c4:	80 81       	ld	r24, Z
    31c6:	b7 01       	movw	r22, r14
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    31ce:	a1 10       	cpse	r10, r1
    31d0:	f5 cf       	rjmp	.-22     	; 0x31bc <vfprintf+0x366>
    31d2:	33 20       	and	r3, r3
    31d4:	09 f4       	brne	.+2      	; 0x31d8 <vfprintf+0x382>
    31d6:	51 ce       	rjmp	.-862    	; 0x2e7a <vfprintf+0x24>
    31d8:	b7 01       	movw	r22, r14
    31da:	80 e2       	ldi	r24, 0x20	; 32
    31dc:	90 e0       	ldi	r25, 0x00	; 0
    31de:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <fputc>
    31e2:	3a 94       	dec	r3
    31e4:	f6 cf       	rjmp	.-20     	; 0x31d2 <vfprintf+0x37c>
    31e6:	f7 01       	movw	r30, r14
    31e8:	86 81       	ldd	r24, Z+6	; 0x06
    31ea:	97 81       	ldd	r25, Z+7	; 0x07
    31ec:	02 c0       	rjmp	.+4      	; 0x31f2 <vfprintf+0x39c>
    31ee:	8f ef       	ldi	r24, 0xFF	; 255
    31f0:	9f ef       	ldi	r25, 0xFF	; 255
    31f2:	2c 96       	adiw	r28, 0x0c	; 12
    31f4:	e2 e1       	ldi	r30, 0x12	; 18
    31f6:	0c 94 09 1b 	jmp	0x3612	; 0x3612 <__epilogue_restores__>

000031fa <calloc>:
    31fa:	0f 93       	push	r16
    31fc:	1f 93       	push	r17
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
    3202:	86 9f       	mul	r24, r22
    3204:	80 01       	movw	r16, r0
    3206:	87 9f       	mul	r24, r23
    3208:	10 0d       	add	r17, r0
    320a:	96 9f       	mul	r25, r22
    320c:	10 0d       	add	r17, r0
    320e:	11 24       	eor	r1, r1
    3210:	c8 01       	movw	r24, r16
    3212:	0e 94 19 19 	call	0x3232	; 0x3232 <malloc>
    3216:	ec 01       	movw	r28, r24
    3218:	00 97       	sbiw	r24, 0x00	; 0
    321a:	29 f0       	breq	.+10     	; 0x3226 <calloc+0x2c>
    321c:	a8 01       	movw	r20, r16
    321e:	60 e0       	ldi	r22, 0x00	; 0
    3220:	70 e0       	ldi	r23, 0x00	; 0
    3222:	0e 94 4b 1a 	call	0x3496	; 0x3496 <memset>
    3226:	ce 01       	movw	r24, r28
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	1f 91       	pop	r17
    322e:	0f 91       	pop	r16
    3230:	08 95       	ret

00003232 <malloc>:
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	82 30       	cpi	r24, 0x02	; 2
    3238:	91 05       	cpc	r25, r1
    323a:	10 f4       	brcc	.+4      	; 0x3240 <malloc+0xe>
    323c:	82 e0       	ldi	r24, 0x02	; 2
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	e0 91 ac 03 	lds	r30, 0x03AC
    3244:	f0 91 ad 03 	lds	r31, 0x03AD
    3248:	20 e0       	ldi	r18, 0x00	; 0
    324a:	30 e0       	ldi	r19, 0x00	; 0
    324c:	a0 e0       	ldi	r26, 0x00	; 0
    324e:	b0 e0       	ldi	r27, 0x00	; 0
    3250:	30 97       	sbiw	r30, 0x00	; 0
    3252:	39 f1       	breq	.+78     	; 0x32a2 <malloc+0x70>
    3254:	40 81       	ld	r20, Z
    3256:	51 81       	ldd	r21, Z+1	; 0x01
    3258:	48 17       	cp	r20, r24
    325a:	59 07       	cpc	r21, r25
    325c:	b8 f0       	brcs	.+46     	; 0x328c <malloc+0x5a>
    325e:	48 17       	cp	r20, r24
    3260:	59 07       	cpc	r21, r25
    3262:	71 f4       	brne	.+28     	; 0x3280 <malloc+0x4e>
    3264:	82 81       	ldd	r24, Z+2	; 0x02
    3266:	93 81       	ldd	r25, Z+3	; 0x03
    3268:	10 97       	sbiw	r26, 0x00	; 0
    326a:	29 f0       	breq	.+10     	; 0x3276 <malloc+0x44>
    326c:	13 96       	adiw	r26, 0x03	; 3
    326e:	9c 93       	st	X, r25
    3270:	8e 93       	st	-X, r24
    3272:	12 97       	sbiw	r26, 0x02	; 2
    3274:	2c c0       	rjmp	.+88     	; 0x32ce <malloc+0x9c>
    3276:	90 93 ad 03 	sts	0x03AD, r25
    327a:	80 93 ac 03 	sts	0x03AC, r24
    327e:	27 c0       	rjmp	.+78     	; 0x32ce <malloc+0x9c>
    3280:	21 15       	cp	r18, r1
    3282:	31 05       	cpc	r19, r1
    3284:	31 f0       	breq	.+12     	; 0x3292 <malloc+0x60>
    3286:	42 17       	cp	r20, r18
    3288:	53 07       	cpc	r21, r19
    328a:	18 f0       	brcs	.+6      	; 0x3292 <malloc+0x60>
    328c:	a9 01       	movw	r20, r18
    328e:	db 01       	movw	r26, r22
    3290:	01 c0       	rjmp	.+2      	; 0x3294 <malloc+0x62>
    3292:	ef 01       	movw	r28, r30
    3294:	9a 01       	movw	r18, r20
    3296:	bd 01       	movw	r22, r26
    3298:	df 01       	movw	r26, r30
    329a:	02 80       	ldd	r0, Z+2	; 0x02
    329c:	f3 81       	ldd	r31, Z+3	; 0x03
    329e:	e0 2d       	mov	r30, r0
    32a0:	d7 cf       	rjmp	.-82     	; 0x3250 <malloc+0x1e>
    32a2:	21 15       	cp	r18, r1
    32a4:	31 05       	cpc	r19, r1
    32a6:	f9 f0       	breq	.+62     	; 0x32e6 <malloc+0xb4>
    32a8:	28 1b       	sub	r18, r24
    32aa:	39 0b       	sbc	r19, r25
    32ac:	24 30       	cpi	r18, 0x04	; 4
    32ae:	31 05       	cpc	r19, r1
    32b0:	80 f4       	brcc	.+32     	; 0x32d2 <malloc+0xa0>
    32b2:	8a 81       	ldd	r24, Y+2	; 0x02
    32b4:	9b 81       	ldd	r25, Y+3	; 0x03
    32b6:	61 15       	cp	r22, r1
    32b8:	71 05       	cpc	r23, r1
    32ba:	21 f0       	breq	.+8      	; 0x32c4 <malloc+0x92>
    32bc:	fb 01       	movw	r30, r22
    32be:	93 83       	std	Z+3, r25	; 0x03
    32c0:	82 83       	std	Z+2, r24	; 0x02
    32c2:	04 c0       	rjmp	.+8      	; 0x32cc <malloc+0x9a>
    32c4:	90 93 ad 03 	sts	0x03AD, r25
    32c8:	80 93 ac 03 	sts	0x03AC, r24
    32cc:	fe 01       	movw	r30, r28
    32ce:	32 96       	adiw	r30, 0x02	; 2
    32d0:	44 c0       	rjmp	.+136    	; 0x335a <malloc+0x128>
    32d2:	fe 01       	movw	r30, r28
    32d4:	e2 0f       	add	r30, r18
    32d6:	f3 1f       	adc	r31, r19
    32d8:	81 93       	st	Z+, r24
    32da:	91 93       	st	Z+, r25
    32dc:	22 50       	subi	r18, 0x02	; 2
    32de:	31 09       	sbc	r19, r1
    32e0:	39 83       	std	Y+1, r19	; 0x01
    32e2:	28 83       	st	Y, r18
    32e4:	3a c0       	rjmp	.+116    	; 0x335a <malloc+0x128>
    32e6:	20 91 aa 03 	lds	r18, 0x03AA
    32ea:	30 91 ab 03 	lds	r19, 0x03AB
    32ee:	23 2b       	or	r18, r19
    32f0:	41 f4       	brne	.+16     	; 0x3302 <malloc+0xd0>
    32f2:	20 91 02 01 	lds	r18, 0x0102
    32f6:	30 91 03 01 	lds	r19, 0x0103
    32fa:	30 93 ab 03 	sts	0x03AB, r19
    32fe:	20 93 aa 03 	sts	0x03AA, r18
    3302:	20 91 00 01 	lds	r18, 0x0100
    3306:	30 91 01 01 	lds	r19, 0x0101
    330a:	21 15       	cp	r18, r1
    330c:	31 05       	cpc	r19, r1
    330e:	41 f4       	brne	.+16     	; 0x3320 <malloc+0xee>
    3310:	2d b7       	in	r18, 0x3d	; 61
    3312:	3e b7       	in	r19, 0x3e	; 62
    3314:	40 91 04 01 	lds	r20, 0x0104
    3318:	50 91 05 01 	lds	r21, 0x0105
    331c:	24 1b       	sub	r18, r20
    331e:	35 0b       	sbc	r19, r21
    3320:	e0 91 aa 03 	lds	r30, 0x03AA
    3324:	f0 91 ab 03 	lds	r31, 0x03AB
    3328:	e2 17       	cp	r30, r18
    332a:	f3 07       	cpc	r31, r19
    332c:	a0 f4       	brcc	.+40     	; 0x3356 <malloc+0x124>
    332e:	2e 1b       	sub	r18, r30
    3330:	3f 0b       	sbc	r19, r31
    3332:	28 17       	cp	r18, r24
    3334:	39 07       	cpc	r19, r25
    3336:	78 f0       	brcs	.+30     	; 0x3356 <malloc+0x124>
    3338:	ac 01       	movw	r20, r24
    333a:	4e 5f       	subi	r20, 0xFE	; 254
    333c:	5f 4f       	sbci	r21, 0xFF	; 255
    333e:	24 17       	cp	r18, r20
    3340:	35 07       	cpc	r19, r21
    3342:	48 f0       	brcs	.+18     	; 0x3356 <malloc+0x124>
    3344:	4e 0f       	add	r20, r30
    3346:	5f 1f       	adc	r21, r31
    3348:	50 93 ab 03 	sts	0x03AB, r21
    334c:	40 93 aa 03 	sts	0x03AA, r20
    3350:	81 93       	st	Z+, r24
    3352:	91 93       	st	Z+, r25
    3354:	02 c0       	rjmp	.+4      	; 0x335a <malloc+0x128>
    3356:	e0 e0       	ldi	r30, 0x00	; 0
    3358:	f0 e0       	ldi	r31, 0x00	; 0
    335a:	cf 01       	movw	r24, r30
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	08 95       	ret

00003362 <free>:
    3362:	cf 93       	push	r28
    3364:	df 93       	push	r29
    3366:	00 97       	sbiw	r24, 0x00	; 0
    3368:	09 f4       	brne	.+2      	; 0x336c <free+0xa>
    336a:	87 c0       	rjmp	.+270    	; 0x347a <free+0x118>
    336c:	fc 01       	movw	r30, r24
    336e:	32 97       	sbiw	r30, 0x02	; 2
    3370:	13 82       	std	Z+3, r1	; 0x03
    3372:	12 82       	std	Z+2, r1	; 0x02
    3374:	c0 91 ac 03 	lds	r28, 0x03AC
    3378:	d0 91 ad 03 	lds	r29, 0x03AD
    337c:	20 97       	sbiw	r28, 0x00	; 0
    337e:	81 f4       	brne	.+32     	; 0x33a0 <free+0x3e>
    3380:	20 81       	ld	r18, Z
    3382:	31 81       	ldd	r19, Z+1	; 0x01
    3384:	28 0f       	add	r18, r24
    3386:	39 1f       	adc	r19, r25
    3388:	80 91 aa 03 	lds	r24, 0x03AA
    338c:	90 91 ab 03 	lds	r25, 0x03AB
    3390:	82 17       	cp	r24, r18
    3392:	93 07       	cpc	r25, r19
    3394:	79 f5       	brne	.+94     	; 0x33f4 <free+0x92>
    3396:	f0 93 ab 03 	sts	0x03AB, r31
    339a:	e0 93 aa 03 	sts	0x03AA, r30
    339e:	6d c0       	rjmp	.+218    	; 0x347a <free+0x118>
    33a0:	de 01       	movw	r26, r28
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	ae 17       	cp	r26, r30
    33a8:	bf 07       	cpc	r27, r31
    33aa:	50 f4       	brcc	.+20     	; 0x33c0 <free+0x5e>
    33ac:	12 96       	adiw	r26, 0x02	; 2
    33ae:	4d 91       	ld	r20, X+
    33b0:	5c 91       	ld	r21, X
    33b2:	13 97       	sbiw	r26, 0x03	; 3
    33b4:	9d 01       	movw	r18, r26
    33b6:	41 15       	cp	r20, r1
    33b8:	51 05       	cpc	r21, r1
    33ba:	09 f1       	breq	.+66     	; 0x33fe <free+0x9c>
    33bc:	da 01       	movw	r26, r20
    33be:	f3 cf       	rjmp	.-26     	; 0x33a6 <free+0x44>
    33c0:	b3 83       	std	Z+3, r27	; 0x03
    33c2:	a2 83       	std	Z+2, r26	; 0x02
    33c4:	40 81       	ld	r20, Z
    33c6:	51 81       	ldd	r21, Z+1	; 0x01
    33c8:	84 0f       	add	r24, r20
    33ca:	95 1f       	adc	r25, r21
    33cc:	8a 17       	cp	r24, r26
    33ce:	9b 07       	cpc	r25, r27
    33d0:	71 f4       	brne	.+28     	; 0x33ee <free+0x8c>
    33d2:	8d 91       	ld	r24, X+
    33d4:	9c 91       	ld	r25, X
    33d6:	11 97       	sbiw	r26, 0x01	; 1
    33d8:	84 0f       	add	r24, r20
    33da:	95 1f       	adc	r25, r21
    33dc:	02 96       	adiw	r24, 0x02	; 2
    33de:	91 83       	std	Z+1, r25	; 0x01
    33e0:	80 83       	st	Z, r24
    33e2:	12 96       	adiw	r26, 0x02	; 2
    33e4:	8d 91       	ld	r24, X+
    33e6:	9c 91       	ld	r25, X
    33e8:	13 97       	sbiw	r26, 0x03	; 3
    33ea:	93 83       	std	Z+3, r25	; 0x03
    33ec:	82 83       	std	Z+2, r24	; 0x02
    33ee:	21 15       	cp	r18, r1
    33f0:	31 05       	cpc	r19, r1
    33f2:	29 f4       	brne	.+10     	; 0x33fe <free+0x9c>
    33f4:	f0 93 ad 03 	sts	0x03AD, r31
    33f8:	e0 93 ac 03 	sts	0x03AC, r30
    33fc:	3e c0       	rjmp	.+124    	; 0x347a <free+0x118>
    33fe:	d9 01       	movw	r26, r18
    3400:	13 96       	adiw	r26, 0x03	; 3
    3402:	fc 93       	st	X, r31
    3404:	ee 93       	st	-X, r30
    3406:	12 97       	sbiw	r26, 0x02	; 2
    3408:	4d 91       	ld	r20, X+
    340a:	5d 91       	ld	r21, X+
    340c:	a4 0f       	add	r26, r20
    340e:	b5 1f       	adc	r27, r21
    3410:	ea 17       	cp	r30, r26
    3412:	fb 07       	cpc	r31, r27
    3414:	79 f4       	brne	.+30     	; 0x3434 <free+0xd2>
    3416:	80 81       	ld	r24, Z
    3418:	91 81       	ldd	r25, Z+1	; 0x01
    341a:	84 0f       	add	r24, r20
    341c:	95 1f       	adc	r25, r21
    341e:	02 96       	adiw	r24, 0x02	; 2
    3420:	d9 01       	movw	r26, r18
    3422:	11 96       	adiw	r26, 0x01	; 1
    3424:	9c 93       	st	X, r25
    3426:	8e 93       	st	-X, r24
    3428:	82 81       	ldd	r24, Z+2	; 0x02
    342a:	93 81       	ldd	r25, Z+3	; 0x03
    342c:	13 96       	adiw	r26, 0x03	; 3
    342e:	9c 93       	st	X, r25
    3430:	8e 93       	st	-X, r24
    3432:	12 97       	sbiw	r26, 0x02	; 2
    3434:	e0 e0       	ldi	r30, 0x00	; 0
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	8a 81       	ldd	r24, Y+2	; 0x02
    343a:	9b 81       	ldd	r25, Y+3	; 0x03
    343c:	00 97       	sbiw	r24, 0x00	; 0
    343e:	19 f0       	breq	.+6      	; 0x3446 <free+0xe4>
    3440:	fe 01       	movw	r30, r28
    3442:	ec 01       	movw	r28, r24
    3444:	f9 cf       	rjmp	.-14     	; 0x3438 <free+0xd6>
    3446:	ce 01       	movw	r24, r28
    3448:	02 96       	adiw	r24, 0x02	; 2
    344a:	28 81       	ld	r18, Y
    344c:	39 81       	ldd	r19, Y+1	; 0x01
    344e:	82 0f       	add	r24, r18
    3450:	93 1f       	adc	r25, r19
    3452:	20 91 aa 03 	lds	r18, 0x03AA
    3456:	30 91 ab 03 	lds	r19, 0x03AB
    345a:	28 17       	cp	r18, r24
    345c:	39 07       	cpc	r19, r25
    345e:	69 f4       	brne	.+26     	; 0x347a <free+0x118>
    3460:	30 97       	sbiw	r30, 0x00	; 0
    3462:	29 f4       	brne	.+10     	; 0x346e <free+0x10c>
    3464:	10 92 ad 03 	sts	0x03AD, r1
    3468:	10 92 ac 03 	sts	0x03AC, r1
    346c:	02 c0       	rjmp	.+4      	; 0x3472 <free+0x110>
    346e:	13 82       	std	Z+3, r1	; 0x03
    3470:	12 82       	std	Z+2, r1	; 0x02
    3472:	d0 93 ab 03 	sts	0x03AB, r29
    3476:	c0 93 aa 03 	sts	0x03AA, r28
    347a:	df 91       	pop	r29
    347c:	cf 91       	pop	r28
    347e:	08 95       	ret

00003480 <strnlen_P>:
    3480:	fc 01       	movw	r30, r24
    3482:	05 90       	lpm	r0, Z+
    3484:	61 50       	subi	r22, 0x01	; 1
    3486:	70 40       	sbci	r23, 0x00	; 0
    3488:	01 10       	cpse	r0, r1
    348a:	d8 f7       	brcc	.-10     	; 0x3482 <strnlen_P+0x2>
    348c:	80 95       	com	r24
    348e:	90 95       	com	r25
    3490:	8e 0f       	add	r24, r30
    3492:	9f 1f       	adc	r25, r31
    3494:	08 95       	ret

00003496 <memset>:
    3496:	dc 01       	movw	r26, r24
    3498:	01 c0       	rjmp	.+2      	; 0x349c <memset+0x6>
    349a:	6d 93       	st	X+, r22
    349c:	41 50       	subi	r20, 0x01	; 1
    349e:	50 40       	sbci	r21, 0x00	; 0
    34a0:	e0 f7       	brcc	.-8      	; 0x349a <memset+0x4>
    34a2:	08 95       	ret

000034a4 <strnlen>:
    34a4:	fc 01       	movw	r30, r24
    34a6:	61 50       	subi	r22, 0x01	; 1
    34a8:	70 40       	sbci	r23, 0x00	; 0
    34aa:	01 90       	ld	r0, Z+
    34ac:	01 10       	cpse	r0, r1
    34ae:	d8 f7       	brcc	.-10     	; 0x34a6 <strnlen+0x2>
    34b0:	80 95       	com	r24
    34b2:	90 95       	com	r25
    34b4:	8e 0f       	add	r24, r30
    34b6:	9f 1f       	adc	r25, r31
    34b8:	08 95       	ret

000034ba <fputc>:
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	18 2f       	mov	r17, r24
    34c4:	09 2f       	mov	r16, r25
    34c6:	eb 01       	movw	r28, r22
    34c8:	8b 81       	ldd	r24, Y+3	; 0x03
    34ca:	81 fd       	sbrc	r24, 1
    34cc:	03 c0       	rjmp	.+6      	; 0x34d4 <fputc+0x1a>
    34ce:	8f ef       	ldi	r24, 0xFF	; 255
    34d0:	9f ef       	ldi	r25, 0xFF	; 255
    34d2:	20 c0       	rjmp	.+64     	; 0x3514 <fputc+0x5a>
    34d4:	82 ff       	sbrs	r24, 2
    34d6:	10 c0       	rjmp	.+32     	; 0x34f8 <fputc+0x3e>
    34d8:	4e 81       	ldd	r20, Y+6	; 0x06
    34da:	5f 81       	ldd	r21, Y+7	; 0x07
    34dc:	2c 81       	ldd	r18, Y+4	; 0x04
    34de:	3d 81       	ldd	r19, Y+5	; 0x05
    34e0:	42 17       	cp	r20, r18
    34e2:	53 07       	cpc	r21, r19
    34e4:	7c f4       	brge	.+30     	; 0x3504 <fputc+0x4a>
    34e6:	e8 81       	ld	r30, Y
    34e8:	f9 81       	ldd	r31, Y+1	; 0x01
    34ea:	9f 01       	movw	r18, r30
    34ec:	2f 5f       	subi	r18, 0xFF	; 255
    34ee:	3f 4f       	sbci	r19, 0xFF	; 255
    34f0:	39 83       	std	Y+1, r19	; 0x01
    34f2:	28 83       	st	Y, r18
    34f4:	10 83       	st	Z, r17
    34f6:	06 c0       	rjmp	.+12     	; 0x3504 <fputc+0x4a>
    34f8:	e8 85       	ldd	r30, Y+8	; 0x08
    34fa:	f9 85       	ldd	r31, Y+9	; 0x09
    34fc:	81 2f       	mov	r24, r17
    34fe:	09 95       	icall
    3500:	89 2b       	or	r24, r25
    3502:	29 f7       	brne	.-54     	; 0x34ce <fputc+0x14>
    3504:	2e 81       	ldd	r18, Y+6	; 0x06
    3506:	3f 81       	ldd	r19, Y+7	; 0x07
    3508:	2f 5f       	subi	r18, 0xFF	; 255
    350a:	3f 4f       	sbci	r19, 0xFF	; 255
    350c:	3f 83       	std	Y+7, r19	; 0x07
    350e:	2e 83       	std	Y+6, r18	; 0x06
    3510:	81 2f       	mov	r24, r17
    3512:	90 2f       	mov	r25, r16
    3514:	df 91       	pop	r29
    3516:	cf 91       	pop	r28
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	08 95       	ret

0000351e <__ultoa_invert>:
    351e:	fa 01       	movw	r30, r20
    3520:	aa 27       	eor	r26, r26
    3522:	28 30       	cpi	r18, 0x08	; 8
    3524:	51 f1       	breq	.+84     	; 0x357a <__ultoa_invert+0x5c>
    3526:	20 31       	cpi	r18, 0x10	; 16
    3528:	81 f1       	breq	.+96     	; 0x358a <__ultoa_invert+0x6c>
    352a:	e8 94       	clt
    352c:	6f 93       	push	r22
    352e:	6e 7f       	andi	r22, 0xFE	; 254
    3530:	6e 5f       	subi	r22, 0xFE	; 254
    3532:	7f 4f       	sbci	r23, 0xFF	; 255
    3534:	8f 4f       	sbci	r24, 0xFF	; 255
    3536:	9f 4f       	sbci	r25, 0xFF	; 255
    3538:	af 4f       	sbci	r26, 0xFF	; 255
    353a:	b1 e0       	ldi	r27, 0x01	; 1
    353c:	3e d0       	rcall	.+124    	; 0x35ba <__ultoa_invert+0x9c>
    353e:	b4 e0       	ldi	r27, 0x04	; 4
    3540:	3c d0       	rcall	.+120    	; 0x35ba <__ultoa_invert+0x9c>
    3542:	67 0f       	add	r22, r23
    3544:	78 1f       	adc	r23, r24
    3546:	89 1f       	adc	r24, r25
    3548:	9a 1f       	adc	r25, r26
    354a:	a1 1d       	adc	r26, r1
    354c:	68 0f       	add	r22, r24
    354e:	79 1f       	adc	r23, r25
    3550:	8a 1f       	adc	r24, r26
    3552:	91 1d       	adc	r25, r1
    3554:	a1 1d       	adc	r26, r1
    3556:	6a 0f       	add	r22, r26
    3558:	71 1d       	adc	r23, r1
    355a:	81 1d       	adc	r24, r1
    355c:	91 1d       	adc	r25, r1
    355e:	a1 1d       	adc	r26, r1
    3560:	20 d0       	rcall	.+64     	; 0x35a2 <__ultoa_invert+0x84>
    3562:	09 f4       	brne	.+2      	; 0x3566 <__ultoa_invert+0x48>
    3564:	68 94       	set
    3566:	3f 91       	pop	r19
    3568:	2a e0       	ldi	r18, 0x0A	; 10
    356a:	26 9f       	mul	r18, r22
    356c:	11 24       	eor	r1, r1
    356e:	30 19       	sub	r19, r0
    3570:	30 5d       	subi	r19, 0xD0	; 208
    3572:	31 93       	st	Z+, r19
    3574:	de f6       	brtc	.-74     	; 0x352c <__ultoa_invert+0xe>
    3576:	cf 01       	movw	r24, r30
    3578:	08 95       	ret
    357a:	46 2f       	mov	r20, r22
    357c:	47 70       	andi	r20, 0x07	; 7
    357e:	40 5d       	subi	r20, 0xD0	; 208
    3580:	41 93       	st	Z+, r20
    3582:	b3 e0       	ldi	r27, 0x03	; 3
    3584:	0f d0       	rcall	.+30     	; 0x35a4 <__ultoa_invert+0x86>
    3586:	c9 f7       	brne	.-14     	; 0x357a <__ultoa_invert+0x5c>
    3588:	f6 cf       	rjmp	.-20     	; 0x3576 <__ultoa_invert+0x58>
    358a:	46 2f       	mov	r20, r22
    358c:	4f 70       	andi	r20, 0x0F	; 15
    358e:	40 5d       	subi	r20, 0xD0	; 208
    3590:	4a 33       	cpi	r20, 0x3A	; 58
    3592:	18 f0       	brcs	.+6      	; 0x359a <__ultoa_invert+0x7c>
    3594:	49 5d       	subi	r20, 0xD9	; 217
    3596:	31 fd       	sbrc	r19, 1
    3598:	40 52       	subi	r20, 0x20	; 32
    359a:	41 93       	st	Z+, r20
    359c:	02 d0       	rcall	.+4      	; 0x35a2 <__ultoa_invert+0x84>
    359e:	a9 f7       	brne	.-22     	; 0x358a <__ultoa_invert+0x6c>
    35a0:	ea cf       	rjmp	.-44     	; 0x3576 <__ultoa_invert+0x58>
    35a2:	b4 e0       	ldi	r27, 0x04	; 4
    35a4:	a6 95       	lsr	r26
    35a6:	97 95       	ror	r25
    35a8:	87 95       	ror	r24
    35aa:	77 95       	ror	r23
    35ac:	67 95       	ror	r22
    35ae:	ba 95       	dec	r27
    35b0:	c9 f7       	brne	.-14     	; 0x35a4 <__ultoa_invert+0x86>
    35b2:	00 97       	sbiw	r24, 0x00	; 0
    35b4:	61 05       	cpc	r22, r1
    35b6:	71 05       	cpc	r23, r1
    35b8:	08 95       	ret
    35ba:	9b 01       	movw	r18, r22
    35bc:	ac 01       	movw	r20, r24
    35be:	0a 2e       	mov	r0, r26
    35c0:	06 94       	lsr	r0
    35c2:	57 95       	ror	r21
    35c4:	47 95       	ror	r20
    35c6:	37 95       	ror	r19
    35c8:	27 95       	ror	r18
    35ca:	ba 95       	dec	r27
    35cc:	c9 f7       	brne	.-14     	; 0x35c0 <__ultoa_invert+0xa2>
    35ce:	62 0f       	add	r22, r18
    35d0:	73 1f       	adc	r23, r19
    35d2:	84 1f       	adc	r24, r20
    35d4:	95 1f       	adc	r25, r21
    35d6:	a0 1d       	adc	r26, r0
    35d8:	08 95       	ret

000035da <__prologue_saves__>:
    35da:	2f 92       	push	r2
    35dc:	3f 92       	push	r3
    35de:	4f 92       	push	r4
    35e0:	5f 92       	push	r5
    35e2:	6f 92       	push	r6
    35e4:	7f 92       	push	r7
    35e6:	8f 92       	push	r8
    35e8:	9f 92       	push	r9
    35ea:	af 92       	push	r10
    35ec:	bf 92       	push	r11
    35ee:	cf 92       	push	r12
    35f0:	df 92       	push	r13
    35f2:	ef 92       	push	r14
    35f4:	ff 92       	push	r15
    35f6:	0f 93       	push	r16
    35f8:	1f 93       	push	r17
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	cd b7       	in	r28, 0x3d	; 61
    3600:	de b7       	in	r29, 0x3e	; 62
    3602:	ca 1b       	sub	r28, r26
    3604:	db 0b       	sbc	r29, r27
    3606:	0f b6       	in	r0, 0x3f	; 63
    3608:	f8 94       	cli
    360a:	de bf       	out	0x3e, r29	; 62
    360c:	0f be       	out	0x3f, r0	; 63
    360e:	cd bf       	out	0x3d, r28	; 61
    3610:	09 94       	ijmp

00003612 <__epilogue_restores__>:
    3612:	2a 88       	ldd	r2, Y+18	; 0x12
    3614:	39 88       	ldd	r3, Y+17	; 0x11
    3616:	48 88       	ldd	r4, Y+16	; 0x10
    3618:	5f 84       	ldd	r5, Y+15	; 0x0f
    361a:	6e 84       	ldd	r6, Y+14	; 0x0e
    361c:	7d 84       	ldd	r7, Y+13	; 0x0d
    361e:	8c 84       	ldd	r8, Y+12	; 0x0c
    3620:	9b 84       	ldd	r9, Y+11	; 0x0b
    3622:	aa 84       	ldd	r10, Y+10	; 0x0a
    3624:	b9 84       	ldd	r11, Y+9	; 0x09
    3626:	c8 84       	ldd	r12, Y+8	; 0x08
    3628:	df 80       	ldd	r13, Y+7	; 0x07
    362a:	ee 80       	ldd	r14, Y+6	; 0x06
    362c:	fd 80       	ldd	r15, Y+5	; 0x05
    362e:	0c 81       	ldd	r16, Y+4	; 0x04
    3630:	1b 81       	ldd	r17, Y+3	; 0x03
    3632:	aa 81       	ldd	r26, Y+2	; 0x02
    3634:	b9 81       	ldd	r27, Y+1	; 0x01
    3636:	ce 0f       	add	r28, r30
    3638:	d1 1d       	adc	r29, r1
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	f8 94       	cli
    363e:	de bf       	out	0x3e, r29	; 62
    3640:	0f be       	out	0x3f, r0	; 63
    3642:	cd bf       	out	0x3d, r28	; 61
    3644:	ed 01       	movw	r28, r26
    3646:	08 95       	ret

00003648 <_exit>:
    3648:	f8 94       	cli

0000364a <__stop_program>:
    364a:	ff cf       	rjmp	.-2      	; 0x364a <__stop_program>
