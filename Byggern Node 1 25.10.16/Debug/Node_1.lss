
Node_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000080  00800100  00002894  00002928  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002894  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000e0  00800180  00800180  000029a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000029a8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000002a0  00000000  00000000  000029d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a0c  00000000  00000000  00002c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000f23  00000000  00000000  00005684  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ed3  00000000  00000000  000065a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000638  00000000  00000000  0000747c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000007c4  00000000  00000000  00007ab4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014fd  00000000  00000000  00008278  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002a0  00000000  00000000  00009775  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <__ctors_end>
       4:	0c 94 ef 0b 	jmp	0x17de	; 0x17de <__vector_1>
       8:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
       c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      10:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      14:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      18:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      1c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      20:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      24:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      28:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      2c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      30:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      34:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      38:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      3c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      40:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      44:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      48:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      4c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      50:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      54:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      58:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      5c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      60:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      64:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      68:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>
      6c:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	00 00       	nop
      72:	08 00       	.word	0x0008	; ????
      74:	01 01       	movw	r0, r2
      76:	00 00       	nop
      78:	00 00       	nop
      7a:	00 04       	cpc	r0, r0
      7c:	06 00       	.word	0x0006	; ????
      7e:	50 c0       	rjmp	.+160    	; 0x120 <__trampolines_end+0xb0>
      80:	c6 c6       	rjmp	.+3468   	; 0xe0e <tobias+0x19e>
      82:	52 52       	subi	r21, 0x22	; 34
      84:	02 02       	muls	r16, r18
      86:	01 01       	movw	r0, r2
      88:	30 30       	cpi	r19, 0x00	; 0
      8a:	30 00       	.word	0x0030	; ????
	...
      94:	00 e0       	ldi	r16, 0x00	; 0
      96:	f0 f0       	brcs	.+60     	; 0xd4 <__trampolines_end+0x64>
      98:	e0 e0       	ldi	r30, 0x00	; 0
      9a:	e0 c0       	rjmp	.+448    	; 0x25c <__trampolines_end+0x1ec>
      9c:	c0 80       	ld	r12, Z
      9e:	80 80       	ld	r8, Z
	...
      e8:	e0 f0       	brcs	.+56     	; 0x122 <__trampolines_end+0xb2>
      ea:	f0 f0       	brcs	.+60     	; 0x128 <__trampolines_end+0xb8>
      ec:	e4 e4       	ldi	r30, 0x44	; 68
      ee:	e4 f4       	brge	.+56     	; 0x128 <__trampolines_end+0xb8>
      f0:	10 00       	.word	0x0010	; ????
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	00 04       	cpc	r0, r0
      f8:	04 00       	.word	0x0004	; ????
      fa:	00 03       	mulsu	r16, r16
      fc:	63 e3       	ldi	r22, 0x33	; 51
      fe:	e3 63       	ori	r30, 0x33	; 51
     100:	02 0b       	sbc	r16, r18
     102:	6b 63       	ori	r22, 0x3B	; 59
     104:	e0 fc       	sbrc	r14, 0
     106:	fe ff       	.word	0xfffe	; ????
     108:	e7 e3       	ldi	r30, 0x37	; 55
     10a:	f3 f2       	brvs	.-68     	; 0xc8 <__trampolines_end+0x58>
     10c:	fc f0       	brlt	.+62     	; 0x14c <__trampolines_end+0xdc>
     10e:	e0 80       	ld	r14, Z
     110:	00 00       	nop
     112:	00 00       	nop
     114:	c0 ff       	sbrs	r28, 0
     116:	ff ff       	.word	0xffff	; ????
     118:	ff ff       	.word	0xffff	; ????
     11a:	ff ff       	.word	0xffff	; ????
     11c:	ff ff       	.word	0xffff	; ????
     11e:	ff ff       	.word	0xffff	; ????
     120:	ff fe       	.word	0xfeff	; ????
     122:	ee c3       	rjmp	.+2012   	; 0x900 <brage+0x90>
     124:	c1 c0       	rjmp	.+386    	; 0x2a8 <__trampolines_end+0x238>
     126:	e0 e0       	ldi	r30, 0x00	; 0
     128:	e0 e0       	ldi	r30, 0x00	; 0
     12a:	60 40       	sbci	r22, 0x00	; 0
     12c:	40 00       	.word	0x0040	; ????
	...
     136:	80 c0       	rjmp	.+256    	; 0x238 <__trampolines_end+0x1c8>
     138:	80 c0       	rjmp	.+256    	; 0x23a <__trampolines_end+0x1ca>
     13a:	e0 f8       	bld	r14, 0
     13c:	f8 f0       	brcs	.+62     	; 0x17c <__trampolines_end+0x10c>
	...
     162:	c0 c0       	rjmp	.+384    	; 0x2e4 <__trampolines_end+0x274>
     164:	e0 f0       	brcs	.+56     	; 0x19e <__trampolines_end+0x12e>
     166:	f8 fc       	.word	0xfcf8	; ????
     168:	ff ff       	.word	0xffff	; ????
     16a:	ff ff       	.word	0xffff	; ????
     16c:	ff ff       	.word	0xffff	; ????
     16e:	ff ff       	.word	0xffff	; ????
     170:	00 0c       	add	r0, r0
     172:	1c 78       	andi	r17, 0x8C	; 140
     174:	1c 1c       	adc	r1, r12
     176:	2c 0c       	add	r2, r12
     178:	0c 04       	cpc	r0, r12
     17a:	00 00       	nop
     17c:	00 01       	movw	r0, r0
     17e:	43 41       	sbci	r20, 0x13	; 19
     180:	1c 1c       	adc	r1, r12
     182:	0c 08       	sbc	r0, r12
     184:	7f ff       	.word	0xff7f	; ????
     186:	ff ff       	.word	0xffff	; ????
     188:	ff ff       	.word	0xffff	; ????
     18a:	ff ff       	.word	0xffff	; ????
     18c:	c3 e3       	ldi	r28, 0x33	; 51
     18e:	f1 f3       	breq	.-4      	; 0x18c <__trampolines_end+0x11c>
     190:	ff fe       	.word	0xfeff	; ????
     192:	fc fc       	.word	0xfcfc	; ????
     194:	ff ff       	.word	0xffff	; ????
     196:	ff ff       	.word	0xffff	; ????
     198:	ff ff       	.word	0xffff	; ????
     19a:	ff ff       	.word	0xffff	; ????
     19c:	ff ff       	.word	0xffff	; ????
     19e:	ff ff       	.word	0xffff	; ????
     1a0:	ff ff       	.word	0xffff	; ????
     1a2:	ff ff       	.word	0xffff	; ????
     1a4:	ff ff       	.word	0xffff	; ????
     1a6:	ff ff       	.word	0xffff	; ????
     1a8:	ff fe       	.word	0xfeff	; ????
     1aa:	fc fc       	.word	0xfcfc	; ????
     1ac:	fc fc       	.word	0xfcfc	; ????
     1ae:	fc fc       	.word	0xfcfc	; ????
     1b0:	fc fc       	.word	0xfcfc	; ????
     1b2:	fc fe       	.word	0xfefc	; ????
     1b4:	fe fe       	.word	0xfefe	; ????
     1b6:	ff ff       	.word	0xffff	; ????
     1b8:	ff ff       	.word	0xffff	; ????
     1ba:	ff ff       	.word	0xffff	; ????
     1bc:	7f 07       	cpc	r23, r31
	...
     1c6:	c0 c0       	rjmp	.+384    	; 0x348 <__trampolines_end+0x2d8>
     1c8:	c0 80       	ld	r12, Z
     1ca:	80 80       	ld	r8, Z
	...
     1e0:	00 08       	sbc	r0, r0
     1e2:	7f ff       	.word	0xff7f	; ????
     1e4:	ff ff       	.word	0xffff	; ????
     1e6:	ff ff       	.word	0xffff	; ????
     1e8:	ff ff       	.word	0xffff	; ????
     1ea:	ff ff       	.word	0xffff	; ????
     1ec:	ff ff       	.word	0xffff	; ????
     1ee:	ff 7f       	andi	r31, 0xFF	; 255
     1f0:	00 00       	nop
     1f2:	30 31       	cpi	r19, 0x10	; 16
     1f4:	00 00       	nop
     1f6:	00 00       	nop
     1f8:	32 02       	muls	r19, r18
     1fa:	00 00       	nop
     1fc:	00 08       	sbc	r0, r0
     1fe:	00 00       	nop
     200:	00 00       	nop
     202:	00 80       	ld	r0, Z
     204:	80 c7       	rjmp	.+3840   	; 0x1106 <pig+0x96>
     206:	df ff       	.word	0xffdf	; ????
     208:	ff ff       	.word	0xffff	; ????
     20a:	ff ff       	.word	0xffff	; ????
     20c:	ff ff       	.word	0xffff	; ????
     20e:	ff ff       	.word	0xffff	; ????
     210:	ff ff       	.word	0xffff	; ????
     212:	ff ff       	.word	0xffff	; ????
     214:	ff ff       	.word	0xffff	; ????
     216:	ff ff       	.word	0xffff	; ????
     218:	ff ff       	.word	0xffff	; ????
     21a:	ff ff       	.word	0xffff	; ????
     21c:	ff ff       	.word	0xffff	; ????
     21e:	ff ff       	.word	0xffff	; ????
     220:	ff ff       	.word	0xffff	; ????
     222:	ff ff       	.word	0xffff	; ????
     224:	ff 7f       	andi	r31, 0xFF	; 255
     226:	3f 3f       	cpi	r19, 0xFF	; 255
     228:	1f 0f       	add	r17, r31
     22a:	0f 87       	std	Y+15, r16	; 0x0f
     22c:	87 c7       	rjmp	.+3854   	; 0x113c <pig+0xcc>
     22e:	e3 f3       	brvs	.-8      	; 0x228 <__trampolines_end+0x1b8>
     230:	7f 3f       	cpi	r23, 0xFF	; 255
     232:	3f 3f       	cpi	r19, 0xFF	; 255
     234:	3f 3f       	cpi	r19, 0xFF	; 255
     236:	3f 3f       	cpi	r19, 0xFF	; 255
     238:	3f 3f       	cpi	r19, 0xFF	; 255
     23a:	3f 3f       	cpi	r19, 0xFF	; 255
     23c:	3f 1c       	adc	r3, r15
     23e:	00 00       	nop
     240:	00 00       	nop
     242:	00 00       	nop
     244:	00 7e       	andi	r16, 0xE0	; 224
     246:	ff ff       	.word	0xffff	; ????
     248:	ff ff       	.word	0xffff	; ????
     24a:	ff ff       	.word	0xffff	; ????
     24c:	ff ff       	.word	0xffff	; ????
     24e:	ff ff       	.word	0xffff	; ????
     250:	fe fc       	.word	0xfcfe	; ????
     252:	fc 20       	and	r15, r12
	...
     260:	00 00       	nop
     262:	18 1f       	adc	r17, r24
     264:	1f 1f       	adc	r17, r31
     266:	0f 0f       	add	r16, r31
     268:	07 03       	mulsu	r16, r23
     26a:	03 03       	mulsu	r16, r19
     26c:	01 00       	.word	0x0001	; ????
     26e:	00 00       	nop
     270:	00 08       	sbc	r0, r0
     272:	1e 72       	andi	r17, 0x2E	; 46
     274:	32 00       	.word	0x0032	; ????
     276:	0c 5f       	subi	r16, 0xFC	; 252
     278:	ff da       	rcall	.-2562   	; 0xfffff878 <__eeprom_end+0xff7ef878>
     27a:	c0 00       	.word	0x00c0	; ????
     27c:	00 00       	nop
     27e:	00 00       	nop
     280:	b9 ff       	.word	0xffb9	; ????
     282:	bb b9       	out	0x0b, r27	; 11
     284:	bb ff       	.word	0xffbb	; ????
     286:	b9 99       	sbic	0x17, 1	; 23
     288:	bf bf       	out	0x3f, r27	; 63
     28a:	bf bf       	out	0x3f, r27	; 63
     28c:	bf bf       	out	0x3f, r27	; 63
     28e:	9f 9f       	mul	r25, r31
     290:	ff ff       	.word	0xffff	; ????
     292:	f7 ff       	sbrs	r31, 7
     294:	ff ff       	.word	0xffff	; ????
     296:	ff ff       	.word	0xffff	; ????
     298:	ff ff       	.word	0xffff	; ????
     29a:	ff ff       	.word	0xffff	; ????
     29c:	ff fb       	.word	0xfbff	; ????
     29e:	f1 ff       	sbrs	r31, 1
     2a0:	ff ff       	.word	0xffff	; ????
     2a2:	e7 e1       	ldi	r30, 0x17	; 23
     2a4:	f0 f8       	bld	r15, 0
     2a6:	7c 3e       	cpi	r23, 0xEC	; 236
     2a8:	3e 3f       	cpi	r19, 0xFE	; 254
     2aa:	7f 7f       	andi	r23, 0xFF	; 255
     2ac:	7f 7f       	andi	r23, 0xFF	; 255
     2ae:	3f 3f       	cpi	r19, 0xFF	; 255
     2b0:	7f 7e       	andi	r23, 0xEF	; 239
     2b2:	7c 7c       	andi	r23, 0xCC	; 204
     2b4:	7c 78       	andi	r23, 0x8C	; 140
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	c0 c0       	rjmp	.+384    	; 0x43a <__trampolines_end+0x3ca>
     2ba:	c0 c0       	rjmp	.+384    	; 0x43c <__trampolines_end+0x3cc>
     2bc:	c0 00       	.word	0x00c0	; ????
	...
     2c6:	30 61       	ori	r19, 0x10	; 16
     2c8:	c3 87       	std	Z+11, r28	; 0x0b
     2ca:	0f 0f       	add	r16, r31
     2cc:	0f 1f       	adc	r16, r31
     2ce:	1f 0f       	add	r17, r31
     2d0:	0f 07       	cpc	r16, r31
	...
     2f2:	00 66       	ori	r16, 0x60	; 96
     2f4:	26 06       	cpc	r2, r22
     2f6:	84 86       	std	Z+12, r8	; 0x0c
     2f8:	c7 c7       	rjmp	.+3982   	; 0x1288 <pig+0x218>
     2fa:	c3 01       	movw	r24, r6
     2fc:	00 00       	nop
     2fe:	00 00       	nop
     300:	33 7f       	andi	r19, 0xF3	; 243
     302:	ff fb       	.word	0xfbff	; ????
     304:	3b ff       	.word	0xff3b	; ????
     306:	ff fb       	.word	0xfbff	; ????
     308:	fb ff       	.word	0xfffb	; ????
     30a:	fb bb       	out	0x1b, r31	; 27
     30c:	ff ff       	.word	0xffff	; ????
     30e:	bb 3b       	cpi	r27, 0xBB	; 187
     310:	ff ff       	.word	0xffff	; ????
     312:	ff ff       	.word	0xffff	; ????
     314:	ff ff       	.word	0xffff	; ????
     316:	ff ff       	.word	0xffff	; ????
     318:	ff ff       	.word	0xffff	; ????
     31a:	9f 1f       	adc	r25, r31
     31c:	3f 7f       	andi	r19, 0xFF	; 255
     31e:	ff ff       	.word	0xffff	; ????
     320:	ff ff       	.word	0xffff	; ????
     322:	ff ff       	.word	0xffff	; ????
     324:	ff ff       	.word	0xffff	; ????
     326:	fe fe       	.word	0xfefe	; ????
     328:	fe fe       	.word	0xfefe	; ????
     32a:	fe fe       	.word	0xfefe	; ????
     32c:	fc fc       	.word	0xfcfc	; ????
     32e:	fc fc       	.word	0xfcfc	; ????
     330:	fc fc       	.word	0xfcfc	; ????
     332:	fc fc       	.word	0xfcfc	; ????
     334:	fc fc       	.word	0xfcfc	; ????
     336:	f8 e8       	ldi	r31, 0x88	; 136
     338:	e0 c0       	rjmp	.+448    	; 0x4fa <credits+0x8a>
     33a:	c0 c0       	rjmp	.+384    	; 0x4bc <credits+0x4c>
     33c:	80 00       	.word	0x0080	; ????
	...
     346:	00 00       	nop
     348:	00 c1       	rjmp	.+512    	; 0x54a <__stack+0x4b>
     34a:	c3 00       	.word	0x00c3	; ????
	...
     370:	00 00       	nop
     372:	20 01       	movw	r4, r0
     374:	01 71       	andi	r16, 0x11	; 17
     376:	f1 f0       	breq	.+60     	; 0x3b4 <__trampolines_end+0x344>
     378:	f0 f0       	brcs	.+60     	; 0x3b6 <__trampolines_end+0x346>
     37a:	f0 70       	andi	r31, 0x00	; 0
     37c:	70 00       	.word	0x0070	; ????
     37e:	e0 e0       	ldi	r30, 0x00	; 0
     380:	a3 87       	std	Z+11, r26	; 0x0b
     382:	87 07       	cpc	r24, r23
     384:	07 07       	cpc	r16, r23
     386:	07 07       	cpc	r16, r23
     388:	07 07       	cpc	r16, r23
     38a:	07 07       	cpc	r16, r23
     38c:	03 07       	cpc	r16, r19
     38e:	c7 f3       	brie	.-16     	; 0x380 <__trampolines_end+0x310>
     390:	ff ff       	.word	0xffff	; ????
     392:	ff ff       	.word	0xffff	; ????
     394:	ff ff       	.word	0xffff	; ????
     396:	ff ff       	.word	0xffff	; ????
     398:	ff fd       	.word	0xfdff	; ????
     39a:	c1 04       	cpc	r12, r1
     39c:	08 00       	.word	0x0008	; ????
     39e:	01 0f       	add	r16, r17
     3a0:	3f 7f       	andi	r19, 0xFF	; 255
     3a2:	ff ff       	.word	0xffff	; ????
     3a4:	ff ff       	.word	0xffff	; ????
     3a6:	ff ff       	.word	0xffff	; ????
     3a8:	ff ff       	.word	0xffff	; ????
     3aa:	ff ff       	.word	0xffff	; ????
     3ac:	ff ff       	.word	0xffff	; ????
     3ae:	ff ff       	.word	0xffff	; ????
     3b0:	ff ff       	.word	0xffff	; ????
     3b2:	ff ff       	.word	0xffff	; ????
     3b4:	ff ff       	.word	0xffff	; ????
     3b6:	ff fd       	.word	0xfdff	; ????
     3b8:	f9 f9       	.word	0xf9f9	; ????
     3ba:	f8 f8       	.word	0xf8f8	; ????
     3bc:	f8 f8       	.word	0xf8f8	; ????
     3be:	f0 e0       	ldi	r31, 0x00	; 0
     3c0:	c0 c0       	rjmp	.+384    	; 0x542 <__stack+0x43>
     3c2:	c0 00       	.word	0x00c0	; ????
	...
     3d0:	00 00       	nop
     3d2:	00 80       	ld	r0, Z
     3d4:	80 00       	.word	0x0080	; ????
     3d6:	80 00       	.word	0x0080	; ????
	...
     3f0:	00 00       	nop
     3f2:	04 07       	cpc	r16, r20
     3f4:	07 83       	std	Z+7, r16	; 0x07
     3f6:	81 81       	ldd	r24, Z+1	; 0x01
     3f8:	83 cb       	rjmp	.-2298   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
     3fa:	cb 03       	fmulsu	r20, r19
     3fc:	0b 08       	sbc	r0, r11
     3fe:	0c 0f       	add	r16, r28
     400:	03 01       	movw	r0, r6
     402:	01 00       	.word	0x0001	; ????
	...
     40c:	78 fe       	.word	0xfe78	; ????
     40e:	ff ff       	.word	0xffff	; ????
     410:	ff ff       	.word	0xffff	; ????
     412:	ff ff       	.word	0xffff	; ????
     414:	ff ff       	.word	0xffff	; ????
     416:	ff ff       	.word	0xffff	; ????
     418:	ff ff       	.word	0xffff	; ????
     41a:	ff ff       	.word	0xffff	; ????
     41c:	fe fc       	.word	0xfcfe	; ????
     41e:	f8 f0       	brcs	.+62     	; 0x45e <__trampolines_end+0x3ee>
     420:	e0 c0       	rjmp	.+448    	; 0x5e2 <__stack+0xe3>
     422:	00 00       	nop
     424:	01 01       	movw	r0, r2
     426:	03 03       	mulsu	r16, r19
     428:	03 03       	mulsu	r16, r19
     42a:	03 07       	cpc	r16, r19
     42c:	07 0f       	add	r16, r23
     42e:	0f 0f       	add	r16, r31
     430:	0f 1f       	adc	r16, r31
     432:	1f 1f       	adc	r17, r31
     434:	1f 1f       	adc	r17, r31
     436:	1f 1f       	adc	r17, r31
     438:	1f 1f       	adc	r17, r31
     43a:	0f 0f       	add	r16, r31
     43c:	07 03       	mulsu	r16, r23
     43e:	03 01       	movw	r0, r6
     440:	01 01       	movw	r0, r2
	...
     44e:	00 00       	nop
     450:	04 00       	.word	0x0004	; ????
     452:	02 07       	cpc	r16, r18
     454:	03 00       	.word	0x0003	; ????
	...
     46a:	00 80       	ld	r0, Z
     46c:	c0 c0       	rjmp	.+384    	; 0x5ee <__stack+0xef>
	...

00000470 <credits>:
     470:	ff ff ff ff ff ff ff ff ff 3f 3f 3f 3f 1f 1f 1f     .........????...
     480:	0f 0f 0f 0f 07 07 07 07 07 07 07 07 07 0f 0f 1f     ................
     490:	1f 3f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff ff     .??.............
     4a0:	ff 7f 7f 3f 3f 1f 1f 1f 1f 1f 1f 3f 3f 7f 7f ff     ...??......??...
     4b0:	ff ff ff ff ff 7f 7f 7f 3f 3f 1f 1f 1f 0f 0f 0f     ........??......
     4c0:	0f 0f 0f 0f 0f 0f 0f 0f 0f 1f 1f 1f 1f 1f 1f 3f     ...............?
     4d0:	3f 3f 3f 3f 3f 1f 1f 1f 0f 0f 07 07 07 07 07 07     ?????...........
     4e0:	0f 0f 1f 3f 7f ff ff ff ff ff ff ff ff ff ff ff     ...?............
     4f0:	ff ff ff ff ff ff ff ff ff ff fe fc f8 f8 f0 f0     ................
     500:	f0 f8 f8 f8 fc fc fc fc fe fe fe fe fe fe fe fe     ................
     510:	fe fc fc f8 f8 f0 f0 e1 e1 c1 c1 81 81 81 81 80     ................
     520:	80 80 80 c0 c0 c0 e0 f0 f0 f0 f8 f8 f8 f8 f8 f0     ................
     530:	f0 e0 c0 c0 c0 c0 c0 c0 c0 e0 e0 60 70 f0 f8 f8     ...........`p...
     540:	f8 f8 fc fc fc fc fc fc fc fc fc fc fc f8 f8 f8     ................
     550:	f8 f8 f8 f0 f0 f0 f0 f0 f0 f8 f8 f8 fc fc fc fe     ................
     560:	fe fe fe fc fc fc fd ff ff ff ff ff ff ff ff ff     ................
     570:	ff ff ff ff ff ff ff 7f 3f 1f 0f 07 c3 e3 e1 f1     ........?.......
     580:	f1 f1 f1 c1 80 80 c3 ff ff ff ff ff ff ff ff ff     ................
     590:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5b0:	ff ff ff ff ff ff ff ff ff ff 00 00 00 ff ff ff     ................
     5c0:	ff ff ff e3 e3 e3 f7 ff ff ff ff ff ff ff ff 0f     ................
     5d0:	07 07 1f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     5f0:	ff ff ff ff 1f 07 01 80 f0 fc fe ff ff ff ff ff     ................
     600:	ff ff ff ff ff ff ff ff ff 03 01 01 07 87 c3 e3     ................
     610:	e1 f1 f1 01 01 03 ff ff ff 3f 0f 07 83 e3 e1 f1     .........?......
     620:	f1 71 71 31 21 03 07 cf ff ff ff ff 7f 1f 0f 87     .qq1!...........
     630:	c3 e3 f1 f1 f1 f1 f1 e1 c3 07 00 00 f8 ff ff ff     ................
     640:	ff ff 03 01 01 03 ff ff ff ff f9 f1 f1 f1 f1 00     ................
     650:	00 00 00 f1 f1 f1 f1 f1 ff ff ff 3f 0f 0f 07 c7     ...........?....
     660:	e7 e3 e3 f3 f1 c1 81 81 cf ff ff ff ff ff ff ff     ................
     670:	ff ff ff ff c0 00 00 1f 3f 7f ff ff ff ff 7f 7f     ........?.......
     680:	3f 3f 1f 0f 0f 9f ff ff ff 00 00 00 ff ff ff ff     ??..............
     690:	ff ff ff fe fe fe ff ff f7 80 00 02 23 71 71 f8     ............#qq.
     6a0:	f8 fc fc fe 7e 7f 3f 1f 1f ff ff ff c0 00 00 1f     ....~.?.........
     6b0:	3f 7f ff ff ff ff ff 7f 3f 00 00 00 3f ff ff ff     ?.......?...?...
     6c0:	ff ff 00 00 00 00 ff ff ff ff ff ff ff ff ff f8     ................
     6d0:	00 00 00 ff ff ff ff ff ff ff 3f 3e 7c 78 f8 f8     ..........?>|x..
     6e0:	f8 f8 f0 f1 61 03 03 0f ff ff ff ff ff ff ff ff     ....a...........
     6f0:	ff ff ff ff ff ff fe fc fc f8 f8 f8 78 38 38 1c     ............x88.
     700:	1c 1c 0e 0f 0f 0f 0f 1f 3f 7c f8 f8 ff ff ff ff     ........?|......
     710:	ff ff ff ff ff ff ff ff ff ff fe fe fc fc f8 f8     ................
     720:	f8 f8 f8 f8 f8 fc fc fe ff ff ff ff ff ff fe fc     ................
     730:	fc f8 f8 f8 f8 f8 f8 f8 fc fc f8 f8 fc ff ff ff     ................
     740:	ff ff fc f8 f8 fc ff ff ff ff ff ff ff ff ff fd     ................
     750:	f8 f8 fc ff ff ff ff ff ff ff fe fc fc f8 f8 f8     ................
     760:	f8 f8 f8 f8 fc fc fe ff ff ff ff ff ff ff ff ff     ................
     770:	ff ff ff ff ff ff 3f 0f 07 03 01 00 00 00 00 80     ......?.........
     780:	c0 e0 f0 f0 f8 f8 fc fc fc fc f8 f1 e3 e7 c7 8f     ................
     790:	0f 1f 3f 7f 7f ff ff ff ff ff ff ff ff ff ff 7f     ..?.............
     7a0:	3f 3f 1f 1f 1f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f 0f     ??..............
     7b0:	1f 1f 3f 3f 3f 3f 3f 3f 1f 1f 0f 0f 0f 07 07 03     ..??????........
     7c0:	03 03 03 03 03 03 07 07 0f 1f 1f 1f 3f 3f 3f 3f     ............????
     7d0:	3f 3f 3f 3f 1f 1f 1f 1f 0f 0f 07 07 03 03 03 03     ????............
     7e0:	03 03 03 07 0f 1f 3f 7f ff ff ff ff ff ff ff ff     ......?.........
     7f0:	ff ff ff ff ff ff fe fc f8 f0 f0 e0 f8 fe ff ff     ................
     800:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     810:	ff fe fe fc f8 f0 e0 e1 c1 c1 81 81 81 80 80 80     ................
     820:	80 c0 c0 e0 e0 f0 f0 f8 f8 fc fc fc fc fc fc fc     ................
     830:	fc fc fc f8 f8 f8 f0 f0 f0 f0 f0 f0 f0 f8 fc fc     ................
     840:	fc fe fe ff ff ff ff ff ff fe fe fe fc f8 f8 f8     ................
     850:	f0 f0 f0 f0 f0 f0 f0 f0 f8 f8 f8 f8 fc fc fe fe     ................
     860:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000870 <brage>:
     870:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     880:	ff ff ff ff ff ff ff ff ff ff ff ff 3f 1f 1f 0f     ............?...
     890:	1f 9f 5f 5f 7f 3f 3f bf bf 7f 7f 7f 3f 3f bf bf     ..__.??.....??..
     8a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8b0:	fc fc fc f8 f8 f0 f0 f0 fc fc f8 f9 f9 fb f2 f6     ................
     8c0:	f4 f0 e0 c0 c0 c0 c0 c0 80 00 00 00 00 00 01 03     ................
     8d0:	07 1f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     8f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     900:	ff ff ff ff ff ff ff ff ff ff 81 00 00 00 00 00     ................
     910:	00 00 00 00 00 80 c0 f0 f8 fc fc fe fe ff ff ff     ................
     920:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     930:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     940:	ff ff 7f 7f 3f 7f ff ff ff fc f0 f0 f0 00 18 03     ....?...........
     950:	00 00 06 6f 1f 3f ff ff ff ff ff ff ff ff ff ff     ...o.?..........
     960:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     970:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     980:	ff ff ff ff ff ff ff ff ff ff ff ff fc 00 00 00     ................
     990:	00 00 00 0c ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9a0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9c0:	ff fb e0 00 00 00 65 47 4f 3f ff ef 3e 18 00 00     ......eGO?..>...
     9d0:	00 00 00 00 00 1c 7f ff ff ff ff ff ff ff ff ff     ................
     9e0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     9f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a00:	ff ff ff ff ff ff ff ff ff ff ff ff ff f0 c0 80     ................
     a10:	3e 04 c0 f0 fb df 9f 9f 9f 9f 9f 9f df cb 8b 83     >...............
     a20:	83 83 c7 e7 cf cf df ff ff ff ff ff ff ff ff ef     ................
     a30:	e7 e3 e1 e1 f0 f9 f3 e3 e3 e3 e3 f3 f3 f3 f3 f3     ................
     a40:	f3 f3 f3 fe fe fe f8 c0 e0 20 07 1f 1c 78 70 30     ......... ...xp0
     a50:	00 00 00 00 00 00 f0 ff ff ff ff ff ff ff ff ff     ................
     a60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     a90:	fe fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     aa0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ab0:	ff ff ff ff 7f 3f ff ff ff ff ff ff ff ff ff ff     .....?..........
     ac0:	ff ff ff ff ff ff ff ff 7f 18 00 00 00 00 20 20     ..............  
     ad0:	20 10 00 00 80 f8 f8 ff ff ff ff ff ff ff ff ff      ...............
     ae0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     af0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b10:	ff ff ff ff ff ff cf 9f 9f ff ff ff ff ff ff ff     ................
     b20:	ff 7f ff ff ff ff f3 f3 f3 e7 e7 e7 e7 e7 e3 f3     ................
     b30:	f3 71 79 79 7c 7e 7f 3f 3f 3f 3f 3f bf ff fb ff     .qyy|~.?????....
     b40:	ff ff ff ff ff e7 fd fd fc 00 00 e0 fc fc fc f8     ................
     b50:	f8 fc fe ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b70:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b80:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b90:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     ba0:	ff ff fe fe fc fc fc fc fe fe fe ff ff ff ff ff     ................
     bb0:	ff ff ff ff ff fd ff fe fe fe ff ff ff ff ff ff     ................
     bc0:	ff ff ff ff ff 7f 1f 03 00 80 c3 c1 c0 81 1f 7f     ................
     bd0:	7f 7f 7f ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     be0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     bf0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c00:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c10:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c20:	ff ff ff ff ff ff ff 7f 7f 7f 7f 7f ff ff ff ff     ................
     c30:	ff ff ff ff ff ff 7f 7f 7f 3f 3f 3f 1f 1f 0f 07     .........???....
     c40:	03 83 c1 e0 f0 f8 fc fe ff ff ff ff ff ff fe fc     ................
     c50:	f0 e0 c0 80 f9 ff ff ff ff ff ff ff ff ff ff ff     ................
     c60:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00000c70 <tobias>:
	...
     cec:	00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d6c:	00 00 01 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     da8:	00 00 00 80 80 00 00 00 00 00 80 80 00 00 40 40     ..............@@
     db8:	40 80 80 80 00 00 00 00 00 00 00 00 00 00 00 00     @...............
	...
     dd4:	00 80 80 a0 60 40 00 00 00 00 00 00 00 00 00 00     ....`@..........
	...
     e08:	00 00 00 38 7c fc f8 f8 f8 f8 f0 f0 f0 f0 f0 f0     ...8|...........
     e18:	f0 f0 f0 f0 f8 f8 f8 f8 fc fc fc fe fe fe fe 7e     ...............~
     e28:	7f 3f 3f 3f 9f 9f df ef ff ff ff f7 f7 f7 70 f0     .???..........p.
     e38:	70 70 f1 e1 e1 e1 e7 e3 e3 e6 c6 c0 c0 80 00 00     pp..............
	...
     e50:	00 f0 f0 7c 7c ff ff ff ff ff ff fe fc 78 00 00     ...||........x..
	...
     e8c:	00 01 03 03 03 03 03 03 03 03 07 07 07 07 27 2f     ..............'/
     e9c:	0f 0f 0f 1f 7f ff ff ff fd fc fc fc f8 f8 f8 f8     ................
     eac:	f0 f0 f0 e0 f0 f3 f3 ff ff fe fe fe fe fe ff ff     ................
     ebc:	ff ff ff ff ff ff ff ff ff ff 3d 00 00 00 00 00     ..........=.....
     ecc:	00 00 00 00 00 00 07 0f 0f 0f 0f 0f 0f 07 03 01     ................
	...
     f10:	00 00 00 06 1c 1e 3e 3e 3c 7e 7e 7e fe fe fc e0     ......>><~~~....
     f20:	80 9f 9f bf bf bf bf bf 9f 9f 9f ff ff ff ff f3     ................
     f30:	f3 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     f40:	ff ff ff ff f7 fc fe ff ff ff ff ff ff fe fe fe     ................
     f50:	f8 f0 f0 f8 f8 f8 f8 fc fc f8 f0 c0 00 00 00 00     ................
     f60:	00 00 18 10 00 00 00 00 80 80 00 00 00 00 00 00     ................
	...
     f9c:	00 00 00 01 01 03 07 07 0f 0f 0b 03 01 01 05 05     ................
     fac:	07 0e 0e 0f 07 07 87 87 87 c3 e3 e3 f3 f1 f8 ff     ................
     fbc:	ff ff ff ff ff ff ff ff ff ff ff 7f 3f 7f 7f 3f     ............?..?
     fcc:	1f 1f 8f cf c7 f7 ff ff ff ff ff ff ff ff ff ff     ................
     fdc:	ff fe fc f0 e0 c0 06 0e ff ff ff ff ff ff ff ff     ................
     fec:	ff ff ff ff 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    102c:	00 00 00 01 03 03 07 07 07 07 07 0f 0f 0f 07 07     ................
    103c:	07 07 07 07 07 07 03 03 31 31 78 78 7c 7c 7e fe     ........11xx||~.
    104c:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    105c:	ff ff ff ff ff ff fe ff ff ff ff ff ff ff df ff     ................
    106c:	ff ff ff ff                                         ....

00001070 <pig>:
    1070:	ff ff ff ff ff ff ff 7f 7f ff ff ff ff ff ff ff     ................
    1080:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1090:	ff ff ff ff ff 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f 7f     ................
    10a0:	7f 3f 3f 3f 3f 3f 3f 1f 1f 1f 1f 1f 1f 1f 1f 0f     .??????.........
    10b0:	0f 0f 0f 0f 0f 0f 0f 07 07 07 07 07 03 03 03 03     ................
    10c0:	03 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
    10d0:	00 00 00 00 00 01 01 01 01 01 01 03 03 03 07 0f     ................
    10e0:	0f 1f 3f 3f 0f 07 67 e7 07 07 1f ff ff ff ff ff     ..??..g.........
    10f0:	ff ff ff ff ff ff ff c0 80 01 07 07 0f 1f c7 1f     ................
    1100:	3f 3f 7f 3f 1f 1f 0f 0f 0f 07 07 03 03 01 01 01     ??.?............
    1110:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1168:	1c fc fb fb fb ff ff ff ff ff ff ff ff ff ff ff     ................
    1178:	ff fe fc 3c 00 00 80 02 10 40 00 00 00 00 00 00     ...<.....@......
	...
    11e8:	00 00 ff ff ff ff ff ff ff 1f 1f 1f 1f 1f 0f 0f     ................
    11f8:	07 03 00 00 00 00 03 03 00 00 00 00 00 00 00 00     ................
    1208:	01 00 00 00 00 00 08 00 00 20 40 00 00 00 00 00     ......... @.....
	...
    1264:	00 80 c0 e2 f8 fe ff ff ff ff ff ff ff fc fa f9     ................
    1274:	f0 e0 c0 80 80 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    128c:	00 00 00 40 00 00 00 00 00 01 00 10 20 00 00 00     ...@........ ...
	...
    12d0:	00 00 80 80 00 00 00 00 00 00 00 00 00 00 00 02     ................
    12e0:	00 00 00 fe ff ff ff ff ff ff ff ff ff ff ff ff     ................
    12f0:	ff ff ff ff ff ff ff ff ff ff fe fe fc fc fc fe     ................
    1300:	fc fc fc f8 f8 fc fc fc fc fc fc fc fc f9 f8 fc     ................
    1310:	fc fc fc fe fe fe fe fc fc fc f2 04 20 00 00 00     ............ ...
    1320:	00 00 00 00 00 e0 f8 f8 f8 fc fc fc fc fc fc f8     ................
    1330:	f8 fc fc fc fc fc f8 f8 fc fc fc fc f8 f8 f8 fc     ................
    1340:	fc fc fc fc fc f8 fe fe fe fe fe fe fe ff ff ff     ................
    1350:	ff ff ff ff 80 00 00 00 00 00 00 00 00 00 00 00     ................
    1360:	00 00 00 83 f7 ff ff ff ff ff ff ff ff ff ff ff     ................
    1370:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1380:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1390:	ff ff ff ff ff ff ff ff ff ff ff 00 00 00 98 00     ................
    13a0:	00 00 00 00 fc ff ff ff ff ff ff ff ff ff ff ff     ................
    13b0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13c0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13d0:	ff ff ff ff 3f 00 00 00 00 88 c0 e4 f8 00 00 00     ....?...........
    13e0:	00 e0 fc ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    13f0:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1400:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1410:	ff ff ff ff ff ff ff ff ff f7 f3 f0 d0 c0 c4 e8     ................
    1420:	c0 c8 c0 f8 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1430:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1440:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    1450:	ff ff 9f 91 90 b0 80 80 f8 ff ff f7 e0 e0 f0 f0     ................
    1460:	fe ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................

00001470 <font>:
	...
    1478:	00 06 5f 5f 06 00 00 00 00 07 07 00 07 07 00 00     ..__............
    1488:	14 7f 7f 14 7f 7f 14 00 24 2e 6b 6b 3a 12 00 00     ........$.kk:...
    1498:	46 66 30 18 0c 66 62 00 30 7a 4f 5d 37 7a 48 00     Ff0..fb.0zO]7zH.
    14a8:	04 07 03 00 00 00 00 00 00 1c 3e 63 41 00 00 00     ..........>cA...
    14b8:	00 41 63 3e 1c 00 00 00 08 2a 3e 1c 1c 3e 2a 08     .Ac>.....*>..>*.
    14c8:	08 08 3e 3e 08 08 00 00 00 a0 e0 60 00 00 00 00     ..>>.......`....
    14d8:	08 08 08 08 08 08 00 00 00 00 60 60 00 00 00 00     ..........``....
    14e8:	60 30 18 0c 06 03 01 00 3e 7f 59 4d 7f 3e 00 00     `0......>.YM.>..
    14f8:	42 42 7f 7f 40 40 00 00 62 73 59 49 6f 66 00 00     BB..@@..bsYIof..
    1508:	22 63 49 49 7f 36 00 00 18 1c 16 13 7f 7f 10 00     "cII.6..........
    1518:	27 67 45 45 7d 39 00 00 3c 7e 4b 49 79 30 00 00     'gEE}9..<~KIy0..
    1528:	03 63 71 19 0f 07 00 00 36 7f 49 49 7f 36 00 00     .cq.....6.II.6..
    1538:	06 4f 49 69 3f 1e 00 00 00 00 6c 6c 00 00 00 00     .OIi?.....ll....
    1548:	00 a0 ec 6c 00 00 00 00 08 1c 36 63 41 00 00 00     ...l......6cA...
    1558:	14 14 14 14 14 14 00 00 00 41 63 36 1c 08 00 00     .........Ac6....
    1568:	02 03 51 59 0f 06 00 00 3e 7f 41 5d 5d 1f 1e 00     ..QY....>.A]]...
    1578:	7c 7e 13 13 7e 7c 00 00 41 7f 7f 49 49 7f 36 00     |~..~|..A..II.6.
    1588:	1c 3e 63 41 41 63 22 00 41 7f 7f 41 63 7f 1c 00     .>cAAc".A..Ac...
    1598:	41 7f 7f 49 5d 41 63 00 41 7f 7f 49 1d 01 03 00     A..I]Ac.A..I....
    15a8:	1c 3e 63 41 51 73 72 00 7f 7f 08 08 7f 7f 00 00     .>cAQsr.........
    15b8:	00 41 7f 7f 41 00 00 00 30 70 40 41 7f 3f 01 00     .A..A...0p@A.?..
    15c8:	41 7f 7f 08 1c 77 63 00 41 7f 7f 41 40 60 70 00     A....wc.A..A@`p.
    15d8:	7f 7f 06 0c 06 7f 7f 00 7f 7f 06 0c 18 7f 7f 00     ................
    15e8:	1c 3e 63 41 63 3e 1c 00 41 7f 7f 49 09 0f 06 00     .>cAc>..A..I....
    15f8:	1e 3f 21 71 7f 5e 00 00 41 7f 7f 19 39 6f 46 00     .?!q.^..A...9oF.
    1608:	26 67 4d 59 7b 32 00 00 03 41 7f 7f 41 03 00 00     &gMY{2...A..A...
    1618:	7f 7f 40 40 7f 7f 00 00 1f 3f 60 60 3f 1f 00 00     ..@@.....?``?...
    1628:	7f 7f 30 18 30 7f 7f 00 63 77 1c 08 1c 77 63 00     ..0.0...cw...wc.
    1638:	07 4f 78 78 4f 07 00 00 67 73 59 4d 47 63 71 00     .OxxO...gsYMGcq.
    1648:	00 7f 7f 41 41 00 00 00 01 03 06 0c 18 30 60 00     ...AA........0`.
    1658:	00 41 41 7f 7f 00 00 00 08 0c 06 03 06 0c 08 00     .AA.............
    1668:	80 80 80 80 80 80 80 80 00 00 03 07 04 00 00 00     ................
    1678:	20 74 54 54 3c 78 40 00 41 3f 7f 44 44 7c 38 00      tTT<x@.A?.DD|8.
    1688:	38 7c 44 44 6c 28 00 00 30 78 48 49 3f 7f 40 00     8|DDl(..0xHI?.@.
    1698:	38 7c 54 54 5c 18 00 00 48 7e 7f 49 03 02 00 00     8|TT\...H~.I....
    16a8:	98 bc a4 a4 f8 7c 04 00 41 7f 7f 08 04 7c 78 00     .....|..A....|x.
    16b8:	00 44 7d 7d 40 00 00 00 40 c4 84 fd 7d 00 00 00     .D}}@...@...}...
    16c8:	41 7f 7f 10 38 6c 44 00 00 41 7f 7f 40 00 00 00     A...8lD..A..@...
    16d8:	7c 7c 0c 18 0c 7c 78 00 7c 7c 04 04 7c 78 00 00     ||...|x.||..|x..
    16e8:	38 7c 44 44 7c 38 00 00 84 fc f8 a4 24 3c 18 00     8|DD|8......$<..
    16f8:	18 3c 24 a4 f8 fc 84 00 44 7c 78 44 1c 18 00 00     .<$.....D|xD....
    1708:	48 5c 54 54 74 24 00 00 00 04 3e 7f 44 24 00 00     H\TTt$....>.D$..
    1718:	3c 7c 40 40 3c 7c 40 00 1c 3c 60 60 3c 1c 00 00     <|@@<|@..<``<...
    1728:	3c 7c 60 30 60 7c 3c 00 44 6c 38 10 38 6c 44 00     <|`0`|<.Dl8.8lD.
    1738:	9c bc a0 a0 fc 7c 00 00 4c 64 74 5c 4c 64 00 00     .....|..Ldt\Ld..
    1748:	08 08 3e 77 41 41 00 00 00 00 00 77 77 00 00 00     ..>wAA.....ww...
    1758:	41 41 77 3e 08 08 00 00 02 03 01 03 02 03 01 00     AAw>............

00001768 <__ctors_end>:
    1768:	11 24       	eor	r1, r1
    176a:	1f be       	out	0x3f, r1	; 63
    176c:	cf ef       	ldi	r28, 0xFF	; 255
    176e:	d4 e0       	ldi	r29, 0x04	; 4
    1770:	de bf       	out	0x3e, r29	; 62
    1772:	cd bf       	out	0x3d, r28	; 61

00001774 <__do_copy_data>:
    1774:	11 e0       	ldi	r17, 0x01	; 1
    1776:	a0 e0       	ldi	r26, 0x00	; 0
    1778:	b1 e0       	ldi	r27, 0x01	; 1
    177a:	e4 e9       	ldi	r30, 0x94	; 148
    177c:	f8 e2       	ldi	r31, 0x28	; 40
    177e:	02 c0       	rjmp	.+4      	; 0x1784 <__do_copy_data+0x10>
    1780:	05 90       	lpm	r0, Z+
    1782:	0d 92       	st	X+, r0
    1784:	a0 38       	cpi	r26, 0x80	; 128
    1786:	b1 07       	cpc	r27, r17
    1788:	d9 f7       	brne	.-10     	; 0x1780 <__do_copy_data+0xc>

0000178a <__do_clear_bss>:
    178a:	22 e0       	ldi	r18, 0x02	; 2
    178c:	a0 e8       	ldi	r26, 0x80	; 128
    178e:	b1 e0       	ldi	r27, 0x01	; 1
    1790:	01 c0       	rjmp	.+2      	; 0x1794 <.do_clear_bss_start>

00001792 <.do_clear_bss_loop>:
    1792:	1d 92       	st	X+, r1

00001794 <.do_clear_bss_start>:
    1794:	a0 36       	cpi	r26, 0x60	; 96
    1796:	b2 07       	cpc	r27, r18
    1798:	e1 f7       	brne	.-8      	; 0x1792 <.do_clear_bss_loop>
    179a:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <main>
    179e:	0c 94 48 14 	jmp	0x2890	; 0x2890 <_exit>

000017a2 <__bad_interrupt>:
    17a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000017a6 <ADC_init>:
int dataY;
int leftSlider;
int rightSlider;

void ADC_init(){
	set_bit(MCUCR, ISC11); //rising edge generates interupt request
    17a6:	85 b7       	in	r24, 0x35	; 53
    17a8:	88 60       	ori	r24, 0x08	; 8
    17aa:	85 bf       	out	0x35, r24	; 53
	set_bit(MCUCR, ISC10); //rising edge generates interupt request
    17ac:	85 b7       	in	r24, 0x35	; 53
    17ae:	84 60       	ori	r24, 0x04	; 4
    17b0:	85 bf       	out	0x35, r24	; 53
	set_bit(EMCUCR, INT0); //trenger vi denne?
    17b2:	86 b7       	in	r24, 0x36	; 54
    17b4:	80 64       	ori	r24, 0x40	; 64
    17b6:	86 bf       	out	0x36, r24	; 54
	//set_bit(GIFR, INTF0); //er det dette flagget vi bruker i ISR(INT0_vect)?
	adcflag = 0;
    17b8:	10 92 4a 02 	sts	0x024A, r1
	
	// set up internal pull-up for PB3
	set_bit(PORTB,PB3);
    17bc:	c3 9a       	sbi	0x18, 3	; 24
	clear_bit(DDRB,PB3); 
    17be:	bb 98       	cbi	0x17, 3	; 23
    17c0:	08 95       	ret

000017c2 <ADC_read>:

}


uint8_t ADC_read(uint8_t channel){
	*ADC = 0x3+channel;
    17c2:	e0 91 06 01 	lds	r30, 0x0106
    17c6:	f0 91 07 01 	lds	r31, 0x0107
    17ca:	8d 5f       	subi	r24, 0xFD	; 253
    17cc:	80 83       	st	Z, r24
	while((test_bit(PINB, PB3))){}
    17ce:	b3 99       	sbic	0x16, 3	; 22
    17d0:	fe cf       	rjmp	.-4      	; 0x17ce <ADC_read+0xc>
	//_delay_ms(2);
	return *ADC;
    17d2:	e0 91 06 01 	lds	r30, 0x0106
    17d6:	f0 91 07 01 	lds	r31, 0x0107
    17da:	80 81       	ld	r24, Z
}
    17dc:	08 95       	ret

000017de <__vector_1>:



ISR(INT0_vect){
    17de:	1f 92       	push	r1
    17e0:	0f 92       	push	r0
    17e2:	0f b6       	in	r0, 0x3f	; 63
    17e4:	0f 92       	push	r0
    17e6:	11 24       	eor	r1, r1
    17e8:	8f 93       	push	r24
	//hvordan fungerer denne funksjonen?
	//print data fra slider/joystick?
	
	
	adcflag = 1;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	80 93 4a 02 	sts	0x024A, r24
}
    17f0:	8f 91       	pop	r24
    17f2:	0f 90       	pop	r0
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	0f 90       	pop	r0
    17f8:	1f 90       	pop	r1
    17fa:	18 95       	reti

000017fc <CAN_init>:




CAN_init(){
	MCP2515_init();
    17fc:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <MCP2515_init>
	MCP2515_bitModify(MCP_CANCTRL, 0b11100000, MODE_NORMAL); 
    1800:	40 e0       	ldi	r20, 0x00	; 0
    1802:	60 ee       	ldi	r22, 0xE0	; 224
    1804:	8f e0       	ldi	r24, 0x0F	; 15
    1806:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <MCP2515_bitModify>
    180a:	08 95       	ret

0000180c <Can_CAN_send>:
	while ((intf & 0b00000011) == 0) {
		intf = MCP2515_read(CANINTF);
	}
}

void Can_CAN_send(){
    180c:	cf 93       	push	r28
    180e:	df 93       	push	r29
    1810:	1f 92       	push	r1
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t intf = MCP2515_read(TXB0CTRL);
    1816:	80 e3       	ldi	r24, 0x30	; 48
    1818:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <MCP2515_read>
    181c:	89 83       	std	Y+1, r24	; 0x01
	while ((intf & 0b00001000) != 0) {
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	83 ff       	sbrs	r24, 3
    1822:	07 c0       	rjmp	.+14     	; 0x1832 <Can_CAN_send+0x26>
		intf = MCP2515_read(TXB0CTRL);
    1824:	80 e3       	ldi	r24, 0x30	; 48
    1826:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <MCP2515_read>
    182a:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Can_CAN_send(){
	volatile uint8_t intf = MCP2515_read(TXB0CTRL);
	while ((intf & 0b00001000) != 0) {
    182c:	89 81       	ldd	r24, Y+1	; 0x01
    182e:	83 fd       	sbrc	r24, 3
    1830:	f9 cf       	rjmp	.-14     	; 0x1824 <Can_CAN_send+0x18>
		intf = MCP2515_read(TXB0CTRL);
	}
    1832:	0f 90       	pop	r0
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	08 95       	ret

0000183a <CAN_message_send>:
// CAN_transmit(){
// 	MCP2515_requestToSend(MCP_RTS_TX0);
// 	
// }

void CAN_message_send(CAN_message* message) {
    183a:	1f 93       	push	r17
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
	Can_CAN_send();
    1842:	0e 94 06 0c 	call	0x180c	; 0x180c <Can_CAN_send>
	//MCP2515_bitModify(MCP_TXB0SIDL, 0b00010000, 0b00001000);
	MCP2515_write(MCP_TXB0SIDL, 0b00000000);
    1846:	60 e0       	ldi	r22, 0x00	; 0
    1848:	82 e3       	ldi	r24, 0x32	; 50
    184a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDH, message->id);
    184e:	68 81       	ld	r22, Y
    1850:	81 e3       	ldi	r24, 0x31	; 49
    1852:	0e 94 56 0d 	call	0x1aac	; 0x1aac <MCP2515_write>

	MCP2515_write(MCP_TXB0DLC, message->length);
    1856:	6a 81       	ldd	r22, Y+2	; 0x02
    1858:	85 e3       	ldi	r24, 0x35	; 53
    185a:	0e 94 56 0d 	call	0x1aac	; 0x1aac <MCP2515_write>
	
	for (uint8_t i = 0; i < message->length; i++){
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	88 23       	and	r24, r24
    1862:	69 f0       	breq	.+26     	; 0x187e <CAN_message_send+0x44>
    1864:	10 e0       	ldi	r17, 0x00	; 0
		MCP2515_write(MCP_TXB0D0 + i, message->data[i]);	
    1866:	fe 01       	movw	r30, r28
    1868:	e1 0f       	add	r30, r17
    186a:	f1 1d       	adc	r31, r1
    186c:	63 81       	ldd	r22, Z+3	; 0x03
    186e:	86 e3       	ldi	r24, 0x36	; 54
    1870:	81 0f       	add	r24, r17
    1872:	0e 94 56 0d 	call	0x1aac	; 0x1aac <MCP2515_write>
	MCP2515_write(MCP_TXB0SIDL, 0b00000000);
	MCP2515_write(MCP_TXB0SIDH, message->id);

	MCP2515_write(MCP_TXB0DLC, message->length);
	
	for (uint8_t i = 0; i < message->length; i++){
    1876:	1f 5f       	subi	r17, 0xFF	; 255
    1878:	8a 81       	ldd	r24, Y+2	; 0x02
    187a:	18 17       	cp	r17, r24
    187c:	a0 f3       	brcs	.-24     	; 0x1866 <CAN_message_send+0x2c>
		MCP2515_write(MCP_TXB0D0 + i, message->data[i]);	
	}
	MCP2515_requestToSend(MCP_RTS_TX0);
    187e:	81 e8       	ldi	r24, 0x81	; 129
    1880:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <MCP2515_requestToSend>
	
}
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	1f 91       	pop	r17
    188a:	08 95       	ret

0000188c <calibrate>:
#define clear_bit(reg, bit ) (reg &= ~(1 << bit))




Joy_pos calibrate(){
    188c:	cf 93       	push	r28
	Joy_pos newPos;
	newPos.x = ADC_read(1);
    188e:	81 e0       	ldi	r24, 0x01	; 1
    1890:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ADC_read>
    1894:	c8 2f       	mov	r28, r24
	newPos.y = ADC_read(2);
    1896:	82 e0       	ldi	r24, 0x02	; 2
    1898:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ADC_read>
    189c:	28 2f       	mov	r18, r24
	return newPos;
    189e:	6c 2f       	mov	r22, r28
    18a0:	70 e0       	ldi	r23, 0x00	; 0
    18a2:	82 2f       	mov	r24, r18
    18a4:	90 e0       	ldi	r25, 0x00	; 0
}
    18a6:	cf 91       	pop	r28
    18a8:	08 95       	ret

000018aa <getJoyPos>:


Joy_pos getJoyPos(void){
    18aa:	0f 93       	push	r16
    18ac:	1f 93       	push	r17
    18ae:	cf 93       	push	r28
	Joy_pos position;
	int x = ADC_read(2);
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ADC_read>
    18b6:	c8 2f       	mov	r28, r24
	int y = ADC_read(1);
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ADC_read>
    18be:	48 2f       	mov	r20, r24
	
	//
	position.x = x - initialPosition.x;
    18c0:	60 91 4f 02 	lds	r22, 0x024F
    18c4:	70 91 50 02 	lds	r23, 0x0250
	position.x *= 100;
	position.x /= initialPosition.x;
	
	position.y = y - initialPosition.y;
    18c8:	e0 91 51 02 	lds	r30, 0x0251
    18cc:	f0 91 52 02 	lds	r31, 0x0252
}


Joy_pos getJoyPos(void){
	Joy_pos position;
	int x = ADC_read(2);
    18d0:	ac 2f       	mov	r26, r28
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
	int y = ADC_read(1);
	
	//
	position.x = x - initialPosition.x;
    18d4:	a6 1b       	sub	r26, r22
    18d6:	b7 0b       	sbc	r27, r23
	position.x *= 100;
    18d8:	c4 e6       	ldi	r28, 0x64	; 100
    18da:	ca 9f       	mul	r28, r26
    18dc:	c0 01       	movw	r24, r0
    18de:	cb 9f       	mul	r28, r27
    18e0:	90 0d       	add	r25, r0
    18e2:	11 24       	eor	r1, r1
	position.x /= initialPosition.x;
    18e4:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divmodhi4>
	
	position.y = y - initialPosition.y;
	position.y *= 100;
	position.y /= initialPosition.y;

	return position;
    18e8:	8b 01       	movw	r16, r22


Joy_pos getJoyPos(void){
	Joy_pos position;
	int x = ADC_read(2);
	int y = ADC_read(1);
    18ea:	50 e0       	ldi	r21, 0x00	; 0
	//
	position.x = x - initialPosition.x;
	position.x *= 100;
	position.x /= initialPosition.x;
	
	position.y = y - initialPosition.y;
    18ec:	4e 1b       	sub	r20, r30
    18ee:	5f 0b       	sbc	r21, r31
	position.y *= 100;
    18f0:	c4 9f       	mul	r28, r20
    18f2:	c0 01       	movw	r24, r0
    18f4:	c5 9f       	mul	r28, r21
    18f6:	90 0d       	add	r25, r0
    18f8:	11 24       	eor	r1, r1
	position.y /= initialPosition.y;

	return position;
    18fa:	bf 01       	movw	r22, r30
    18fc:	0e 94 8b 12 	call	0x2516	; 0x2516 <__divmodhi4>
    1900:	9b 01       	movw	r18, r22
}
    1902:	c9 01       	movw	r24, r18
    1904:	b8 01       	movw	r22, r16
    1906:	cf 91       	pop	r28
    1908:	1f 91       	pop	r17
    190a:	0f 91       	pop	r16
    190c:	08 95       	ret

0000190e <joystick_init>:
	position.L = ADC_read(3);
	position.R = ADC_read(4);
	return position;
}

int joystick_init(void){
    190e:	cf 93       	push	r28
    1910:	df 93       	push	r29
    1912:	cd b7       	in	r28, 0x3d	; 61
    1914:	de b7       	in	r29, 0x3e	; 62
    1916:	2b 97       	sbiw	r28, 0x0b	; 11
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
	// set up internal pull-up for PB2
	set_bit(PORTB,PB2);
    1922:	c2 9a       	sbi	0x18, 2	; 24
	clear_bit(DDRB,PB2);
    1924:	ba 98       	cbi	0x17, 2	; 23
	
	initialPosition = calibrate();
    1926:	0e 94 46 0c 	call	0x188c	; 0x188c <calibrate>
    192a:	60 93 4f 02 	sts	0x024F, r22
    192e:	70 93 50 02 	sts	0x0250, r23
    1932:	80 93 51 02 	sts	0x0251, r24
    1936:	90 93 52 02 	sts	0x0252, r25
	CAN_message msg;
	msg.id=JOYSTICK_INIT;
    193a:	85 e0       	ldi	r24, 0x05	; 5
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
	msg.length=2;
    1942:	82 e0       	ldi	r24, 0x02	; 2
    1944:	8b 83       	std	Y+3, r24	; 0x03
	msg.data[0]=initialPosition.x;
    1946:	6c 83       	std	Y+4, r22	; 0x04
	msg.data[1]=initialPosition.y;
    1948:	80 91 51 02 	lds	r24, 0x0251
    194c:	8d 83       	std	Y+5, r24	; 0x05
	CAN_message_send(&msg);
    194e:	ce 01       	movw	r24, r28
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	0e 94 1d 0c 	call	0x183a	; 0x183a <CAN_message_send>
	return 0;
}
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	2b 96       	adiw	r28, 0x0b	; 11
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <getJoyDir>:

DIR getJoyDir(){
	Joy_pos position = getJoyPos();
    196c:	0e 94 55 0c 	call	0x18aa	; 0x18aa <getJoyPos>
	if (position.x > 50){
    1970:	63 33       	cpi	r22, 0x33	; 51
    1972:	71 05       	cpc	r23, r1
    1974:	b4 f4       	brge	.+44     	; 0x19a2 <getJoyDir+0x36>
		return RIGHT;
	}
	else if (position.x < -50){
    1976:	6e 3c       	cpi	r22, 0xCE	; 206
    1978:	ef ef       	ldi	r30, 0xFF	; 255
    197a:	7e 07       	cpc	r23, r30
    197c:	a4 f0       	brlt	.+40     	; 0x19a6 <getJoyDir+0x3a>
		return LEFT;
	}
	else if (position.y < -50){
    197e:	8e 3c       	cpi	r24, 0xCE	; 206
    1980:	2f ef       	ldi	r18, 0xFF	; 255
    1982:	92 07       	cpc	r25, r18
    1984:	94 f0       	brlt	.+36     	; 0x19aa <getJoyDir+0x3e>
		return DOWN;
	}
	else if (position.y > 50){
    1986:	83 33       	cpi	r24, 0x33	; 51
    1988:	91 05       	cpc	r25, r1
    198a:	8c f4       	brge	.+34     	; 0x19ae <getJoyDir+0x42>
		return UP;
	}
	else if ((abs(position.x) < 5) && (abs(position.y) < 5)){
    198c:	9b 01       	movw	r18, r22
    198e:	2c 5f       	subi	r18, 0xFC	; 252
    1990:	3f 4f       	sbci	r19, 0xFF	; 255
    1992:	29 30       	cpi	r18, 0x09	; 9
    1994:	31 05       	cpc	r19, r1
    1996:	68 f4       	brcc	.+26     	; 0x19b2 <getJoyDir+0x46>
    1998:	04 96       	adiw	r24, 0x04	; 4
    199a:	09 97       	sbiw	r24, 0x09	; 9
    199c:	60 f0       	brcs	.+24     	; 0x19b6 <getJoyDir+0x4a>
		return NEUTRAL;
	}
	else{
		return NONE;
    199e:	85 e0       	ldi	r24, 0x05	; 5
    19a0:	08 95       	ret
}

DIR getJoyDir(){
	Joy_pos position = getJoyPos();
	if (position.x > 50){
		return RIGHT;
    19a2:	82 e0       	ldi	r24, 0x02	; 2
    19a4:	08 95       	ret
	}
	else if (position.x < -50){
		return LEFT;
    19a6:	83 e0       	ldi	r24, 0x03	; 3
    19a8:	08 95       	ret
	}
	else if (position.y < -50){
		return DOWN;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	08 95       	ret
	}
	else if (position.y > 50){
		return UP;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	08 95       	ret
	}
	else if ((abs(position.x) < 5) && (abs(position.y) < 5)){
		return NEUTRAL;
	}
	else{
		return NONE;
    19b2:	85 e0       	ldi	r24, 0x05	; 5
    19b4:	08 95       	ret
	}
	else if (position.y > 50){
		return UP;
	}
	else if ((abs(position.x) < 5) && (abs(position.y) < 5)){
		return NEUTRAL;
    19b6:	84 e0       	ldi	r24, 0x04	; 4
	}
	else{
		return NONE;
	}

}
    19b8:	08 95       	ret

000019ba <joystick_send_CAN>:
	bool pressed = !(test_bit(PINB, PB2));
	return pressed;
}


void joystick_send_CAN(DIR joystick_direction){
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
    19c2:	2b 97       	sbiw	r28, 0x0b	; 11
    19c4:	0f b6       	in	r0, 0x3f	; 63
    19c6:	f8 94       	cli
    19c8:	de bf       	out	0x3e, r29	; 62
    19ca:	0f be       	out	0x3f, r0	; 63
    19cc:	cd bf       	out	0x3d, r28	; 61
	CAN_message msg;
	ID id = JOYSTICK;
	uint8_t length = 3;
	msg.id = id;
    19ce:	1a 82       	std	Y+2, r1	; 0x02
    19d0:	19 82       	std	Y+1, r1	; 0x01
	msg.length = length;
    19d2:	93 e0       	ldi	r25, 0x03	; 3
    19d4:	9b 83       	std	Y+3, r25	; 0x03
	msg.data[0] = joystick_direction;
    19d6:	8c 83       	std	Y+4, r24	; 0x04
	msg.data[1] = ADC_read(2);
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ADC_read>
    19de:	8d 83       	std	Y+5, r24	; 0x05
	msg.data[2] = ADC_read(1);
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ADC_read>
    19e6:	8e 83       	std	Y+6, r24	; 0x06
	CAN_message_send(&msg);
    19e8:	ce 01       	movw	r24, r28
    19ea:	01 96       	adiw	r24, 0x01	; 1
    19ec:	0e 94 1d 0c 	call	0x183a	; 0x183a <CAN_message_send>
}
    19f0:	2b 96       	adiw	r28, 0x0b	; 11
    19f2:	0f b6       	in	r0, 0x3f	; 63
    19f4:	f8 94       	cli
    19f6:	de bf       	out	0x3e, r29	; 62
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	cd bf       	out	0x3d, r28	; 61
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	08 95       	ret

00001a02 <main>:
#include "CAN.h"

int main(void)
{
	
	USART_init();
    1a02:	0e 94 7d 12 	call	0x24fa	; 0x24fa <USART_init>
	set_bit(MCUCR, SRE);
    1a06:	85 b7       	in	r24, 0x35	; 53
    1a08:	80 68       	ori	r24, 0x80	; 128
    1a0a:	85 bf       	out	0x35, r24	; 53
	set_bit(SFIOR,XMM2);
    1a0c:	80 b7       	in	r24, 0x30	; 48
    1a0e:	80 62       	ori	r24, 0x20	; 32
    1a10:	80 bf       	out	0x30, r24	; 48
	set_bit(MCUCR,SRW10);
    1a12:	85 b7       	in	r24, 0x35	; 53
    1a14:	80 64       	ori	r24, 0x40	; 64
    1a16:	85 bf       	out	0x35, r24	; 53
	set_bit(EMCUCR,SRW11);
    1a18:	86 b7       	in	r24, 0x36	; 54
    1a1a:	82 60       	ori	r24, 0x02	; 2
    1a1c:	86 bf       	out	0x36, r24	; 54
	
	//SRAM_test();
	set_bit(DDRD, 6); // Write pin Atmega, output
    1a1e:	8e 9a       	sbi	0x11, 6	; 17
	set_bit(DDRD, 7); // Read Pin Atmega, output
    1a20:	8f 9a       	sbi	0x11, 7	; 17
	set_bit(DDRE, 1); //Adresse Latch Enable
    1a22:	31 9a       	sbi	0x06, 1	; 6
	clear_bit(DDRB, 6);
    1a24:	be 98       	cbi	0x17, 6	; 23
	clear_bit(DDRB, 7);
    1a26:	bf 98       	cbi	0x17, 7	; 23
	clear_bit(DDRB, 8);
    1a28:	87 b3       	in	r24, 0x17	; 23
    1a2a:	87 bb       	out	0x17, r24	; 23
	ADC_init();
    1a2c:	0e 94 d3 0b 	call	0x17a6	; 0x17a6 <ADC_init>
	OLED_init();
    1a30:	0e 94 60 10 	call	0x20c0	; 0x20c0 <OLED_init>
	CAN_init();
    1a34:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <CAN_init>
	joystick_init();
    1a38:	0e 94 87 0c 	call	0x190e	; 0x190e <joystick_init>
	MENU_init_menu();
    1a3c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <MENU_init_menu>
	
	
	DIR joystick_direction = NEUTRAL;
	MENU_print_menu();
    1a40:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <MENU_print_menu>
 		MCP2515_write(0x0F, 0x54);
		char result = MCP2515_read(0x0F);
 		printf("%d\n",result);
 		_delay_ms(400);
 		*/
		joystick_direction = getJoyDir();
    1a44:	0e 94 b6 0c 	call	0x196c	; 0x196c <getJoyDir>
    1a48:	c8 2f       	mov	r28, r24
		joystick_send_CAN(joystick_direction);
    1a4a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <joystick_send_CAN>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1a4e:	2f ef       	ldi	r18, 0xFF	; 255
    1a50:	8f e7       	ldi	r24, 0x7F	; 127
    1a52:	91 e0       	ldi	r25, 0x01	; 1
    1a54:	21 50       	subi	r18, 0x01	; 1
    1a56:	80 40       	sbci	r24, 0x00	; 0
    1a58:	90 40       	sbci	r25, 0x00	; 0
    1a5a:	e1 f7       	brne	.-8      	; 0x1a54 <main+0x52>
    1a5c:	00 c0       	rjmp	.+0      	; 0x1a5e <main+0x5c>
    1a5e:	00 c0       	rjmp	.+0      	; 0x1a60 <main+0x5e>
		_delay_ms(100);
		
 		if (getJoyDir() != joystick_direction){
    1a60:	0e 94 b6 0c 	call	0x196c	; 0x196c <getJoyDir>
    1a64:	8c 17       	cp	r24, r28
    1a66:	71 f3       	breq	.-36     	; 0x1a44 <main+0x42>
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 ef       	ldi	r25, 0xF0	; 240
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <main+0x6a>
			_delay_ms(50); 
 			joystick_direction = getJoyDir();
    1a70:	0e 94 b6 0c 	call	0x196c	; 0x196c <getJoyDir>
    1a74:	c8 2f       	mov	r28, r24
			MENU_navigate(joystick_direction);
    1a76:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <MENU_navigate>
			
			if (joystick_direction == RIGHT){
    1a7a:	c2 30       	cpi	r28, 0x02	; 2
    1a7c:	19 f7       	brne	.-58     	; 0x1a44 <main+0x42>
				MENU_selectAction();
    1a7e:	0e 94 67 0f 	call	0x1ece	; 0x1ece <MENU_selectAction>
    1a82:	e0 cf       	rjmp	.-64     	; 0x1a44 <main+0x42>

00001a84 <MCP2515_read>:
}



uint8_t MCP2515_read(uint8_t address)
{
    1a84:	cf 93       	push	r28
    1a86:	c8 2f       	mov	r28, r24
	
	SPI_chipSelect(chipLOW);
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
	SPI_write(MCP_READ);
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_write(address);
    1a94:	8c 2f       	mov	r24, r28
    1a96:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	uint8_t result = SPI_read();
    1a9a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <SPI_read>
    1a9e:	c8 2f       	mov	r28, r24
	SPI_chipSelect(chipHIGH);
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
	return result;
	
}
    1aa6:	8c 2f       	mov	r24, r28
    1aa8:	cf 91       	pop	r28
    1aaa:	08 95       	ret

00001aac <MCP2515_write>:

void MCP2515_write(uint8_t address, uint8_t data){
    1aac:	cf 93       	push	r28
    1aae:	df 93       	push	r29
    1ab0:	d8 2f       	mov	r29, r24
    1ab2:	c6 2f       	mov	r28, r22
	SPI_chipSelect(chipLOW);
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
	SPI_write(MCP_WRITE);
    1aba:	82 e0       	ldi	r24, 0x02	; 2
    1abc:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_write(address);
    1ac0:	8d 2f       	mov	r24, r29
    1ac2:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_write(data);
    1ac6:	8c 2f       	mov	r24, r28
    1ac8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_chipSelect(chipHIGH);
    1acc:	81 e0       	ldi	r24, 0x01	; 1
    1ace:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
}
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	08 95       	ret

00001ad8 <MCP2515_requestToSend>:


void MCP2515_requestToSend(uint8_t address){
    1ad8:	cf 93       	push	r28
    1ada:	c8 2f       	mov	r28, r24
	
	SPI_chipSelect(chipLOW);
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
	if(address == MCP_RTS_TX0 || address == MCP_RTS_TX1 || address == MCP_RTS_TX2 || address == MCP_RTS_ALL){
    1ae2:	8f e7       	ldi	r24, 0x7F	; 127
    1ae4:	8c 0f       	add	r24, r28
    1ae6:	82 30       	cpi	r24, 0x02	; 2
    1ae8:	20 f0       	brcs	.+8      	; 0x1af2 <MCP2515_requestToSend+0x1a>
    1aea:	c4 38       	cpi	r28, 0x84	; 132
    1aec:	11 f0       	breq	.+4      	; 0x1af2 <MCP2515_requestToSend+0x1a>
    1aee:	c7 38       	cpi	r28, 0x87	; 135
    1af0:	21 f4       	brne	.+8      	; 0x1afa <MCP2515_requestToSend+0x22>
		SPI_write(address);	
    1af2:	8c 2f       	mov	r24, r28
    1af4:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
    1af8:	0c c0       	rjmp	.+24     	; 0x1b12 <MCP2515_requestToSend+0x3a>
	}
	
	else{
		OLED_print_pig();
    1afa:	0e 94 1b 12 	call	0x2436	; 0x2436 <OLED_print_pig>
    1afe:	2a e2       	ldi	r18, 0x2A	; 42
    1b00:	30 e5       	ldi	r19, 0x50	; 80
    1b02:	8e ef       	ldi	r24, 0xFE	; 254
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	21 50       	subi	r18, 0x01	; 1
    1b08:	30 40       	sbci	r19, 0x00	; 0
    1b0a:	80 40       	sbci	r24, 0x00	; 0
    1b0c:	90 40       	sbci	r25, 0x00	; 0
    1b0e:	d9 f7       	brne	.-10     	; 0x1b06 <MCP2515_requestToSend+0x2e>
    1b10:	00 00       	nop
		_delay_ms(100000);
	}
	SPI_chipSelect(chipHIGH);
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
}
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <MCP2515_bitModify>:
	uint8_t readStatus = MCP2515_read(SPDR);
	SPI_chipSelect(chipHIGH);
	return readStatus;
}

void MCP2515_bitModify(uint8_t address ,uint8_t maskByte, uint8_t data){
    1b1c:	1f 93       	push	r17
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	18 2f       	mov	r17, r24
    1b24:	d6 2f       	mov	r29, r22
    1b26:	c4 2f       	mov	r28, r20
	SPI_chipSelect(chipLOW);
    1b28:	80 e0       	ldi	r24, 0x00	; 0
    1b2a:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
	SPI_write(MCP_BITMOD);
    1b2e:	85 e0       	ldi	r24, 0x05	; 5
    1b30:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_write(address);
    1b34:	81 2f       	mov	r24, r17
    1b36:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_write(maskByte);
    1b3a:	8d 2f       	mov	r24, r29
    1b3c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_write(data);
    1b40:	8c 2f       	mov	r24, r28
    1b42:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_chipSelect(chipHIGH);
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
}
    1b4c:	df 91       	pop	r29
    1b4e:	cf 91       	pop	r28
    1b50:	1f 91       	pop	r17
    1b52:	08 95       	ret

00001b54 <MCP2515_reset>:

void MCP2515_reset(){
	SPI_chipSelect(chipLOW);
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
	SPI_write(MCP_RESET);
    1b5a:	80 ec       	ldi	r24, 0xC0	; 192
    1b5c:	0e 94 5e 12 	call	0x24bc	; 0x24bc <SPI_write>
	SPI_chipSelect(chipHIGH);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	0e 94 6f 12 	call	0x24de	; 0x24de <SPI_chipSelect>
    1b66:	08 95       	ret

00001b68 <MCP2515_init>:
#define chipLOW 0
#define chipHIGH 1


uint8_t MCP2515_init(){
	SPI_init();
    1b68:	0e 94 67 12 	call	0x24ce	; 0x24ce <SPI_init>
	MCP2515_reset();
    1b6c:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <MCP2515_reset>
	//	return 1;
	//}
	//else{
	//	return 0;
	//}
}
    1b70:	08 95       	ret

00001b72 <MENU_init_menu>:
#include "OLEDdriver.h"
static  struct menuScreen main, newGame, HighScores, Options, currentMenu, easyGame, normalGame, hardGame, Credits, Brightness, Sound;

uint8_t markerPage;

void MENU_init_menu(){
    1b72:	8f 92       	push	r8
    1b74:	9f 92       	push	r9
    1b76:	bf 92       	push	r11
    1b78:	cf 92       	push	r12
    1b7a:	df 92       	push	r13
    1b7c:	ef 92       	push	r14
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
	
	main.name = "MainMenu";
    1b88:	e4 e3       	ldi	r30, 0x34	; 52
    1b8a:	f2 e0       	ldi	r31, 0x02	; 2
    1b8c:	8c e0       	ldi	r24, 0x0C	; 12
    1b8e:	91 e0       	ldi	r25, 0x01	; 1
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
	main.parent = NULL;
    1b94:	10 92 37 02 	sts	0x0237, r1
    1b98:	10 92 36 02 	sts	0x0236, r1
	main.child[1] = &newGame;
    1b9c:	a2 e2       	ldi	r26, 0x22	; 34
    1b9e:	b2 e0       	ldi	r27, 0x02	; 2
    1ba0:	b0 93 3b 02 	sts	0x023B, r27
    1ba4:	a0 93 3a 02 	sts	0x023A, r26
	main.child[2] = &HighScores;
    1ba8:	20 e1       	ldi	r18, 0x10	; 16
    1baa:	32 e0       	ldi	r19, 0x02	; 2
    1bac:	30 93 3d 02 	sts	0x023D, r19
    1bb0:	20 93 3c 02 	sts	0x023C, r18
	main.child[3] = &Options;
    1bb4:	0f 2e       	mov	r0, r31
    1bb6:	fe ef       	ldi	r31, 0xFE	; 254
    1bb8:	8f 2e       	mov	r8, r31
    1bba:	f1 e0       	ldi	r31, 0x01	; 1
    1bbc:	9f 2e       	mov	r9, r31
    1bbe:	f0 2d       	mov	r31, r0
    1bc0:	90 92 3f 02 	sts	0x023F, r9
    1bc4:	80 92 3e 02 	sts	0x023E, r8
	main.child[4] = &Credits;
    1bc8:	84 ea       	ldi	r24, 0xA4	; 164
    1bca:	91 e0       	ldi	r25, 0x01	; 1
    1bcc:	90 93 41 02 	sts	0x0241, r25
    1bd0:	80 93 40 02 	sts	0x0240, r24
	main.menuIndex = 0;
    1bd4:	10 92 45 02 	sts	0x0245, r1
	main.nmbrChilds = 4;
    1bd8:	04 e0       	ldi	r16, 0x04	; 4
    1bda:	00 93 44 02 	sts	0x0244, r16
	
	newGame.name = "New Game";
    1bde:	45 e1       	ldi	r20, 0x15	; 21
    1be0:	51 e0       	ldi	r21, 0x01	; 1
    1be2:	11 96       	adiw	r26, 0x01	; 1
    1be4:	5c 93       	st	X, r21
    1be6:	4e 93       	st	-X, r20
	newGame.parent = &main;
    1be8:	f0 93 25 02 	sts	0x0225, r31
    1bec:	e0 93 24 02 	sts	0x0224, r30
	newGame.child[1] = &easyGame;
    1bf0:	0f 2e       	mov	r0, r31
    1bf2:	fa ed       	ldi	r31, 0xDA	; 218
    1bf4:	ef 2e       	mov	r14, r31
    1bf6:	f1 e0       	ldi	r31, 0x01	; 1
    1bf8:	ff 2e       	mov	r15, r31
    1bfa:	f0 2d       	mov	r31, r0
    1bfc:	f0 92 29 02 	sts	0x0229, r15
    1c00:	e0 92 28 02 	sts	0x0228, r14
	newGame.child[2] = &normalGame;
    1c04:	68 ec       	ldi	r22, 0xC8	; 200
    1c06:	71 e0       	ldi	r23, 0x01	; 1
    1c08:	70 93 2b 02 	sts	0x022B, r23
    1c0c:	60 93 2a 02 	sts	0x022A, r22
	newGame.child[3] = &hardGame;
    1c10:	46 eb       	ldi	r20, 0xB6	; 182
    1c12:	51 e0       	ldi	r21, 0x01	; 1
    1c14:	50 93 2d 02 	sts	0x022D, r21
    1c18:	40 93 2c 02 	sts	0x022C, r20
	newGame.nmbrChilds = 3;
    1c1c:	0f 2e       	mov	r0, r31
    1c1e:	f3 e0       	ldi	r31, 0x03	; 3
    1c20:	bf 2e       	mov	r11, r31
    1c22:	f0 2d       	mov	r31, r0
    1c24:	b0 92 32 02 	sts	0x0232, r11
	newGame.menuIndex = 1;
    1c28:	11 e0       	ldi	r17, 0x01	; 1
    1c2a:	10 93 33 02 	sts	0x0233, r17
	
	
 	easyGame.name = "Easy";
    1c2e:	0f 2e       	mov	r0, r31
    1c30:	fe e1       	ldi	r31, 0x1E	; 30
    1c32:	cf 2e       	mov	r12, r31
    1c34:	f1 e0       	ldi	r31, 0x01	; 1
    1c36:	df 2e       	mov	r13, r31
    1c38:	f0 2d       	mov	r31, r0
    1c3a:	e7 01       	movw	r28, r14
    1c3c:	d9 82       	std	Y+1, r13	; 0x01
    1c3e:	c8 82       	st	Y, r12
 	easyGame.parent = &newGame;
    1c40:	b0 93 dd 01 	sts	0x01DD, r27
    1c44:	a0 93 dc 01 	sts	0x01DC, r26
 	easyGame.nmbrChilds = 0;
    1c48:	10 92 ea 01 	sts	0x01EA, r1
 	easyGame.menuIndex = 11;
    1c4c:	0f 2e       	mov	r0, r31
    1c4e:	fb e0       	ldi	r31, 0x0B	; 11
    1c50:	ff 2e       	mov	r15, r31
    1c52:	f0 2d       	mov	r31, r0
    1c54:	f0 92 eb 01 	sts	0x01EB, r15
 	
 	normalGame.name = "Normal";
    1c58:	0f 2e       	mov	r0, r31
    1c5a:	f3 e2       	ldi	r31, 0x23	; 35
    1c5c:	ef 2e       	mov	r14, r31
    1c5e:	f1 e0       	ldi	r31, 0x01	; 1
    1c60:	ff 2e       	mov	r15, r31
    1c62:	f0 2d       	mov	r31, r0
    1c64:	eb 01       	movw	r28, r22
    1c66:	f9 82       	std	Y+1, r15	; 0x01
    1c68:	e8 82       	st	Y, r14
 	normalGame.parent = &newGame;
    1c6a:	b0 93 cb 01 	sts	0x01CB, r27
    1c6e:	a0 93 ca 01 	sts	0x01CA, r26
 	normalGame.nmbrChilds = 0;
    1c72:	10 92 d8 01 	sts	0x01D8, r1
 	normalGame.menuIndex = 12;
    1c76:	6c e0       	ldi	r22, 0x0C	; 12
    1c78:	60 93 d9 01 	sts	0x01D9, r22
 	
 	hardGame.name = "Hard";
    1c7c:	6a e2       	ldi	r22, 0x2A	; 42
    1c7e:	71 e0       	ldi	r23, 0x01	; 1
    1c80:	ea 01       	movw	r28, r20
    1c82:	79 83       	std	Y+1, r23	; 0x01
    1c84:	68 83       	st	Y, r22
 	hardGame.parent = &newGame;
    1c86:	b0 93 b9 01 	sts	0x01B9, r27
    1c8a:	a0 93 b8 01 	sts	0x01B8, r26
 	hardGame.nmbrChilds = 0;
    1c8e:	10 92 c6 01 	sts	0x01C6, r1
 	hardGame.menuIndex = 13;
    1c92:	4d e0       	ldi	r20, 0x0D	; 13
    1c94:	40 93 c7 01 	sts	0x01C7, r20
	
	
	HighScores.name = "High Scores";
    1c98:	4f e2       	ldi	r20, 0x2F	; 47
    1c9a:	51 e0       	ldi	r21, 0x01	; 1
    1c9c:	d9 01       	movw	r26, r18
    1c9e:	4d 93       	st	X+, r20
    1ca0:	5c 93       	st	X, r21
	HighScores.parent = &main;
    1ca2:	f0 93 13 02 	sts	0x0213, r31
    1ca6:	e0 93 12 02 	sts	0x0212, r30
	HighScores.nmbrChilds = 0;
    1caa:	10 92 20 02 	sts	0x0220, r1
	HighScores.menuIndex = 2;
    1cae:	42 e0       	ldi	r20, 0x02	; 2
    1cb0:	40 93 21 02 	sts	0x0221, r20
	
	Options.name = "Options";
    1cb4:	2b e3       	ldi	r18, 0x3B	; 59
    1cb6:	31 e0       	ldi	r19, 0x01	; 1
    1cb8:	e4 01       	movw	r28, r8
    1cba:	39 83       	std	Y+1, r19	; 0x01
    1cbc:	28 83       	st	Y, r18
	Options.parent = &main;
    1cbe:	f0 93 01 02 	sts	0x0201, r31
    1cc2:	e0 93 00 02 	sts	0x0200, r30
	Options.child[1] = &Brightness;
    1cc6:	22 e9       	ldi	r18, 0x92	; 146
    1cc8:	31 e0       	ldi	r19, 0x01	; 1
    1cca:	30 93 05 02 	sts	0x0205, r19
    1cce:	20 93 04 02 	sts	0x0204, r18
	Options.child[2] = &Sound;
    1cd2:	a0 e8       	ldi	r26, 0x80	; 128
    1cd4:	b1 e0       	ldi	r27, 0x01	; 1
    1cd6:	b0 93 07 02 	sts	0x0207, r27
    1cda:	a0 93 06 02 	sts	0x0206, r26
	Options.nmbrChilds = 2;
    1cde:	40 93 0e 02 	sts	0x020E, r20
	Options.menuIndex = 3;
    1ce2:	b0 92 0f 02 	sts	0x020F, r11
	
	Brightness.name = "Brightness";
    1ce6:	43 e4       	ldi	r20, 0x43	; 67
    1ce8:	51 e0       	ldi	r21, 0x01	; 1
    1cea:	e9 01       	movw	r28, r18
    1cec:	59 83       	std	Y+1, r21	; 0x01
    1cee:	48 83       	st	Y, r20
	Brightness.parent = &Options;
    1cf0:	90 92 95 01 	sts	0x0195, r9
    1cf4:	80 92 94 01 	sts	0x0194, r8
	Brightness.nmbrChilds = 0;
    1cf8:	10 92 a2 01 	sts	0x01A2, r1
	Brightness.menuIndex = 31;
    1cfc:	2f e1       	ldi	r18, 0x1F	; 31
    1cfe:	20 93 a3 01 	sts	0x01A3, r18
	
	Sound.name = "Sound";
    1d02:	2e e4       	ldi	r18, 0x4E	; 78
    1d04:	31 e0       	ldi	r19, 0x01	; 1
    1d06:	2d 93       	st	X+, r18
    1d08:	3c 93       	st	X, r19
	Sound.parent = &Options;
    1d0a:	90 92 83 01 	sts	0x0183, r9
    1d0e:	80 92 82 01 	sts	0x0182, r8
	Sound.nmbrChilds = 0;
    1d12:	10 92 90 01 	sts	0x0190, r1
	Sound.menuIndex = 32;
    1d16:	20 e2       	ldi	r18, 0x20	; 32
    1d18:	20 93 91 01 	sts	0x0191, r18
	
	Credits.name = "Credits";
    1d1c:	24 e5       	ldi	r18, 0x54	; 84
    1d1e:	31 e0       	ldi	r19, 0x01	; 1
    1d20:	dc 01       	movw	r26, r24
    1d22:	2d 93       	st	X+, r18
    1d24:	3c 93       	st	X, r19
	Credits.parent = &main;
    1d26:	f0 93 a7 01 	sts	0x01A7, r31
    1d2a:	e0 93 a6 01 	sts	0x01A6, r30
	Credits.nmbrChilds = 0;
    1d2e:	10 92 b4 01 	sts	0x01B4, r1
	Credits.menuIndex = 4;
    1d32:	00 93 b5 01 	sts	0x01B5, r16
		
	
	currentMenu = main;
    1d36:	82 e1       	ldi	r24, 0x12	; 18
    1d38:	ac ee       	ldi	r26, 0xEC	; 236
    1d3a:	b1 e0       	ldi	r27, 0x01	; 1
    1d3c:	01 90       	ld	r0, Z+
    1d3e:	0d 92       	st	X+, r0
    1d40:	8a 95       	dec	r24
    1d42:	e1 f7       	brne	.-8      	; 0x1d3c <MENU_init_menu+0x1ca>
	OLED_go_to_pos(1, 0);
    1d44:	60 e0       	ldi	r22, 0x00	; 0
    1d46:	81 e0       	ldi	r24, 0x01	; 1
    1d48:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
	markerPage = 1;	
    1d4c:	10 93 53 02 	sts	0x0253, r17
	OLED_print_char((uint8_t)(36));
    1d50:	84 e2       	ldi	r24, 0x24	; 36
    1d52:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <OLED_print_char>

	
	
}
    1d56:	df 91       	pop	r29
    1d58:	cf 91       	pop	r28
    1d5a:	1f 91       	pop	r17
    1d5c:	0f 91       	pop	r16
    1d5e:	ff 90       	pop	r15
    1d60:	ef 90       	pop	r14
    1d62:	df 90       	pop	r13
    1d64:	cf 90       	pop	r12
    1d66:	bf 90       	pop	r11
    1d68:	9f 90       	pop	r9
    1d6a:	8f 90       	pop	r8
    1d6c:	08 95       	ret

00001d6e <MENU_print_menu>:



void MENU_print_menu(){
    1d6e:	ef 92       	push	r14
    1d70:	ff 92       	push	r15
    1d72:	0f 93       	push	r16
    1d74:	1f 93       	push	r17
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
	OLED_go_to_pos(0, 10);
    1d7a:	6a e0       	ldi	r22, 0x0A	; 10
    1d7c:	80 e0       	ldi	r24, 0x00	; 0
    1d7e:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
	OLED_print_sentence("*");
    1d82:	8c e5       	ldi	r24, 0x5C	; 92
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
	OLED_print_sentence(currentMenu.name);
    1d8a:	80 91 ec 01 	lds	r24, 0x01EC
    1d8e:	90 91 ed 01 	lds	r25, 0x01ED
    1d92:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
	OLED_print_sentence("*");
    1d96:	8c e5       	ldi	r24, 0x5C	; 92
    1d98:	91 e0       	ldi	r25, 0x01	; 1
    1d9a:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
	for (int i = 1; i < currentMenu.nmbrChilds+1; i++){
    1d9e:	80 91 fc 01 	lds	r24, 0x01FC
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	01 96       	adiw	r24, 0x01	; 1
    1da6:	02 97       	sbiw	r24, 0x02	; 2
    1da8:	f4 f0       	brlt	.+60     	; 0x1de6 <MENU_print_menu+0x78>
    1daa:	02 ef       	ldi	r16, 0xF2	; 242
    1dac:	11 e0       	ldi	r17, 0x01	; 1
    1dae:	c1 e0       	ldi	r28, 0x01	; 1
    1db0:	d0 e0       	ldi	r29, 0x00	; 0
    1db2:	0f 2e       	mov	r0, r31
    1db4:	fc ef       	ldi	r31, 0xFC	; 252
    1db6:	ef 2e       	mov	r14, r31
    1db8:	f1 e0       	ldi	r31, 0x01	; 1
    1dba:	ff 2e       	mov	r15, r31
    1dbc:	f0 2d       	mov	r31, r0
		
		OLED_go_to_pos(i, 10);
    1dbe:	6a e0       	ldi	r22, 0x0A	; 10
    1dc0:	8c 2f       	mov	r24, r28
    1dc2:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
		OLED_print_sentence(currentMenu.child[i]->name);
    1dc6:	d8 01       	movw	r26, r16
    1dc8:	ed 91       	ld	r30, X+
    1dca:	fd 91       	ld	r31, X+
    1dcc:	8d 01       	movw	r16, r26
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
void MENU_print_menu(){
	OLED_go_to_pos(0, 10);
	OLED_print_sentence("*");
	OLED_print_sentence(currentMenu.name);
	OLED_print_sentence("*");
	for (int i = 1; i < currentMenu.nmbrChilds+1; i++){
    1dd6:	21 96       	adiw	r28, 0x01	; 1
    1dd8:	f7 01       	movw	r30, r14
    1dda:	80 81       	ld	r24, Z
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	01 96       	adiw	r24, 0x01	; 1
    1de0:	c8 17       	cp	r28, r24
    1de2:	d9 07       	cpc	r29, r25
    1de4:	64 f3       	brlt	.-40     	; 0x1dbe <MENU_print_menu+0x50>
		OLED_go_to_pos(i, 10);
		OLED_print_sentence(currentMenu.child[i]->name);

	}

}
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	1f 91       	pop	r17
    1dec:	0f 91       	pop	r16
    1dee:	ff 90       	pop	r15
    1df0:	ef 90       	pop	r14
    1df2:	08 95       	ret

00001df4 <MENU_selectLine>:

void MENU_selectLine(uint8_t line){
	OLED_go_to_pos(line, 0);
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
	OLED_print_char((uint8_t)(36));
    1dfa:	84 e2       	ldi	r24, 0x24	; 36
    1dfc:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <OLED_print_char>
    1e00:	08 95       	ret

00001e02 <MENU_clearLine>:
}

void MENU_clearLine(uint8_t line){
	OLED_go_to_pos(line, 0);
    1e02:	60 e0       	ldi	r22, 0x00	; 0
    1e04:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
	OLED_clear_char();
    1e08:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <OLED_clear_char>
    1e0c:	08 95       	ret

00001e0e <MENU_navigate>:
}

void MENU_navigate(DIR direction){
	
	if (direction == UP){
    1e0e:	81 11       	cpse	r24, r1
    1e10:	0f c0       	rjmp	.+30     	; 0x1e30 <MENU_navigate+0x22>
		if (markerPage > 1){
    1e12:	80 91 53 02 	lds	r24, 0x0253
    1e16:	82 30       	cpi	r24, 0x02	; 2
    1e18:	08 f4       	brcc	.+2      	; 0x1e1c <MENU_navigate+0xe>
    1e1a:	58 c0       	rjmp	.+176    	; 0x1ecc <MENU_navigate+0xbe>
			MENU_clearLine(markerPage);
    1e1c:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <MENU_clearLine>
			markerPage--;
    1e20:	80 91 53 02 	lds	r24, 0x0253
    1e24:	81 50       	subi	r24, 0x01	; 1
    1e26:	80 93 53 02 	sts	0x0253, r24
			MENU_selectLine(markerPage);	
    1e2a:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <MENU_selectLine>
    1e2e:	08 95       	ret
		}
	}
	
	else if (direction == DOWN){
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	89 f4       	brne	.+34     	; 0x1e56 <MENU_navigate+0x48>
		if (markerPage < currentMenu.nmbrChilds){
    1e34:	80 91 53 02 	lds	r24, 0x0253
    1e38:	90 91 fc 01 	lds	r25, 0x01FC
    1e3c:	89 17       	cp	r24, r25
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <MENU_navigate+0x34>
    1e40:	45 c0       	rjmp	.+138    	; 0x1ecc <MENU_navigate+0xbe>
			MENU_clearLine(markerPage);
    1e42:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <MENU_clearLine>
			markerPage++;
    1e46:	80 91 53 02 	lds	r24, 0x0253
    1e4a:	8f 5f       	subi	r24, 0xFF	; 255
    1e4c:	80 93 53 02 	sts	0x0253, r24
			MENU_selectLine(markerPage);
    1e50:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <MENU_selectLine>
    1e54:	08 95       	ret
	}	
}
		else if(direction == RIGHT){
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	09 f5       	brne	.+66     	; 0x1e9c <MENU_navigate+0x8e>
			if ((markerPage <= currentMenu.nmbrChilds) && (markerPage != 0)){
    1e5a:	e0 91 53 02 	lds	r30, 0x0253
    1e5e:	80 91 fc 01 	lds	r24, 0x01FC
    1e62:	8e 17       	cp	r24, r30
    1e64:	98 f1       	brcs	.+102    	; 0x1ecc <MENU_navigate+0xbe>
    1e66:	ee 23       	and	r30, r30
    1e68:	89 f1       	breq	.+98     	; 0x1ecc <MENU_navigate+0xbe>
				currentMenu = *currentMenu.child[markerPage];
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	ee 0f       	add	r30, r30
    1e6e:	ff 1f       	adc	r31, r31
    1e70:	e0 51       	subi	r30, 0x10	; 16
    1e72:	fe 4f       	sbci	r31, 0xFE	; 254
    1e74:	01 90       	ld	r0, Z+
    1e76:	f0 81       	ld	r31, Z
    1e78:	e0 2d       	mov	r30, r0
    1e7a:	82 e1       	ldi	r24, 0x12	; 18
    1e7c:	ac ee       	ldi	r26, 0xEC	; 236
    1e7e:	b1 e0       	ldi	r27, 0x01	; 1
    1e80:	01 90       	ld	r0, Z+
    1e82:	0d 92       	st	X+, r0
    1e84:	8a 95       	dec	r24
    1e86:	e1 f7       	brne	.-8      	; 0x1e80 <MENU_navigate+0x72>
				OLED_reset();
    1e88:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
				MENU_print_menu();
    1e8c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <MENU_print_menu>
				markerPage = 1;
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	80 93 53 02 	sts	0x0253, r24
				MENU_selectLine(markerPage);
    1e96:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <MENU_selectLine>
    1e9a:	08 95       	ret
				
			}
		}
		else if(direction == LEFT){
    1e9c:	83 30       	cpi	r24, 0x03	; 3
    1e9e:	b1 f4       	brne	.+44     	; 0x1ecc <MENU_navigate+0xbe>
			if (currentMenu.parent != NULL){
    1ea0:	e0 91 ee 01 	lds	r30, 0x01EE
    1ea4:	f0 91 ef 01 	lds	r31, 0x01EF
    1ea8:	30 97       	sbiw	r30, 0x00	; 0
    1eaa:	81 f0       	breq	.+32     	; 0x1ecc <MENU_navigate+0xbe>
				currentMenu = *currentMenu.parent;
    1eac:	82 e1       	ldi	r24, 0x12	; 18
    1eae:	ac ee       	ldi	r26, 0xEC	; 236
    1eb0:	b1 e0       	ldi	r27, 0x01	; 1
    1eb2:	01 90       	ld	r0, Z+
    1eb4:	0d 92       	st	X+, r0
    1eb6:	8a 95       	dec	r24
    1eb8:	e1 f7       	brne	.-8      	; 0x1eb2 <MENU_navigate+0xa4>
				OLED_reset();
    1eba:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
				MENU_print_menu();
    1ebe:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <MENU_print_menu>
				markerPage = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
    1ec4:	80 93 53 02 	sts	0x0253, r24
				MENU_selectLine(markerPage);
    1ec8:	0e 94 fa 0e 	call	0x1df4	; 0x1df4 <MENU_selectLine>
    1ecc:	08 95       	ret

00001ece <MENU_selectAction>:
		}
	}
}
	
void MENU_selectAction(){
	if (currentMenu.nmbrChilds == 0){
    1ece:	80 91 fc 01 	lds	r24, 0x01FC
    1ed2:	81 11       	cpse	r24, r1
    1ed4:	37 c0       	rjmp	.+110    	; 0x1f44 <MENU_selectAction+0x76>
		if (currentMenu.name == "High Scores"){
    1ed6:	80 91 ec 01 	lds	r24, 0x01EC
    1eda:	90 91 ed 01 	lds	r25, 0x01ED
    1ede:	8f 52       	subi	r24, 0x2F	; 47
    1ee0:	91 40       	sbci	r25, 0x01	; 1
    1ee2:	21 f4       	brne	.+8      	; 0x1eec <MENU_selectAction+0x1e>
			OLED_print_sentence("high scores");
    1ee4:	8e e5       	ldi	r24, 0x5E	; 94
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
			//print highscores
		}
		if (currentMenu.name == "Easy"){
    1eec:	80 91 ec 01 	lds	r24, 0x01EC
    1ef0:	90 91 ed 01 	lds	r25, 0x01ED
    1ef4:	8e 51       	subi	r24, 0x1E	; 30
    1ef6:	91 40       	sbci	r25, 0x01	; 1
    1ef8:	21 f4       	brne	.+8      	; 0x1f02 <MENU_selectAction+0x34>
			OLED_print_sentence("high scores");
    1efa:	8e e5       	ldi	r24, 0x5E	; 94
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
			//start game
		}
		if (currentMenu.name == "Normal"){
    1f02:	80 91 ec 01 	lds	r24, 0x01EC
    1f06:	90 91 ed 01 	lds	r25, 0x01ED
    1f0a:	83 52       	subi	r24, 0x23	; 35
    1f0c:	91 40       	sbci	r25, 0x01	; 1
    1f0e:	21 f4       	brne	.+8      	; 0x1f18 <MENU_selectAction+0x4a>
			OLED_print_sentence("Normal");
    1f10:	83 e2       	ldi	r24, 0x23	; 35
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
			//start game
		}
		if (currentMenu.name == "Hard"){
    1f18:	80 91 ec 01 	lds	r24, 0x01EC
    1f1c:	90 91 ed 01 	lds	r25, 0x01ED
    1f20:	8a 52       	subi	r24, 0x2A	; 42
    1f22:	91 40       	sbci	r25, 0x01	; 1
    1f24:	21 f4       	brne	.+8      	; 0x1f2e <MENU_selectAction+0x60>
			OLED_print_sentence("Hard");
    1f26:	8a e2       	ldi	r24, 0x2A	; 42
    1f28:	91 e0       	ldi	r25, 0x01	; 1
    1f2a:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
			//start game
		}
		if (currentMenu.name == "Credits"){
    1f2e:	80 91 ec 01 	lds	r24, 0x01EC
    1f32:	90 91 ed 01 	lds	r25, 0x01ED
    1f36:	84 55       	subi	r24, 0x54	; 84
    1f38:	91 40       	sbci	r25, 0x01	; 1
    1f3a:	21 f4       	brne	.+8      	; 0x1f44 <MENU_selectAction+0x76>
			OLED_reset();
    1f3c:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
			OLED_credits();
    1f40:	0e 94 ee 11 	call	0x23dc	; 0x23dc <OLED_credits>
    1f44:	08 95       	ret

00001f46 <OLED_clear_char>:
	
}



void OLED_clear_char(){
    1f46:	88 e0       	ldi	r24, 0x08	; 8
    1f48:	90 e0       	ldi	r25, 0x00	; 0
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    1f4a:	e0 91 08 01 	lds	r30, 0x0108
    1f4e:	f0 91 09 01 	lds	r31, 0x0109
    1f52:	10 82       	st	Z, r1
    1f54:	01 97       	sbiw	r24, 0x01	; 1
}



void OLED_clear_char(){
	for (int i = 0; i < FONTSIZE; i++){
    1f56:	00 97       	sbiw	r24, 0x00	; 0
    1f58:	c1 f7       	brne	.-16     	; 0x1f4a <OLED_clear_char+0x4>
		OLED_write_data(0x00);
	}
}
    1f5a:	08 95       	ret

00001f5c <OLED_print_char>:

int OLED_print_char(char input){
    1f5c:	28 e0       	ldi	r18, 0x08	; 8
    1f5e:	82 9f       	mul	r24, r18
    1f60:	c0 01       	movw	r24, r0
    1f62:	11 24       	eor	r1, r1
    1f64:	fc 01       	movw	r30, r24
    1f66:	e0 59       	subi	r30, 0x90	; 144
    1f68:	fc 4e       	sbci	r31, 0xEC	; 236
	for (int i = 0; i < FONTSIZE; i++){
    1f6a:	20 e0       	ldi	r18, 0x00	; 0
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
		OLED_write_data(pgm_read_byte(&font[(int)input-32][i]));
    1f6e:	84 91       	lpm	r24, Z
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    1f70:	a0 91 08 01 	lds	r26, 0x0108
    1f74:	b0 91 09 01 	lds	r27, 0x0109
    1f78:	8c 93       	st	X, r24
}

int OLED_print_char(char input){
	for (int i = 0; i < FONTSIZE; i++){
		OLED_write_data(pgm_read_byte(&font[(int)input-32][i]));
		col ++;
    1f7a:	80 91 54 02 	lds	r24, 0x0254
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	80 93 54 02 	sts	0x0254, r24
		OLED_write_data(0x00);
	}
}

int OLED_print_char(char input){
	for (int i = 0; i < FONTSIZE; i++){
    1f84:	2f 5f       	subi	r18, 0xFF	; 255
    1f86:	3f 4f       	sbci	r19, 0xFF	; 255
    1f88:	31 96       	adiw	r30, 0x01	; 1
    1f8a:	28 30       	cpi	r18, 0x08	; 8
    1f8c:	31 05       	cpc	r19, r1
    1f8e:	79 f7       	brne	.-34     	; 0x1f6e <OLED_print_char+0x12>
		OLED_write_data(pgm_read_byte(&font[(int)input-32][i]));
		col ++;
	}
	return 0;
}
    1f90:	80 e0       	ldi	r24, 0x00	; 0
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	08 95       	ret

00001f96 <OLED_goto_page>:
		
	} 
}

void OLED_goto_page(uint8_t newpage){
	page = newpage;
    1f96:	80 93 55 02 	sts	0x0255, r24
	OLED_write_command(0xB0+page);
    1f9a:	80 55       	subi	r24, 0x50	; 80
#define set_bit(reg, bit ) (reg |= (1 << bit))

uint8_t col, page;

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    1f9c:	e0 91 0a 01 	lds	r30, 0x010A
    1fa0:	f0 91 0b 01 	lds	r31, 0x010B
    1fa4:	80 83       	st	Z, r24
    1fa6:	08 95       	ret

00001fa8 <OLED_goto_column>:
	page = newpage;
	OLED_write_command(0xB0+page);
}

void OLED_goto_column(uint8_t column){
 	col = column;
    1fa8:	80 93 54 02 	sts	0x0254, r24
 	if (column < 16){
    1fac:	80 31       	cpi	r24, 0x10	; 16
    1fae:	60 f4       	brcc	.+24     	; 0x1fc8 <OLED_goto_column+0x20>
#define set_bit(reg, bit ) (reg |= (1 << bit))

uint8_t col, page;

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    1fb0:	e0 91 0a 01 	lds	r30, 0x010A
    1fb4:	f0 91 0b 01 	lds	r31, 0x010B
    1fb8:	80 83       	st	Z, r24
    1fba:	e0 91 0a 01 	lds	r30, 0x010A
    1fbe:	f0 91 0b 01 	lds	r31, 0x010B
    1fc2:	80 e1       	ldi	r24, 0x10	; 16
    1fc4:	80 83       	st	Z, r24
    1fc6:	08 95       	ret
 		OLED_write_command(0x00+column);
		OLED_write_command(0x10);
 		
 	}
	else{
		OLED_write_command((column & 0b00001111));
    1fc8:	98 2f       	mov	r25, r24
    1fca:	9f 70       	andi	r25, 0x0F	; 15
#define set_bit(reg, bit ) (reg |= (1 << bit))

uint8_t col, page;

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    1fcc:	e0 91 0a 01 	lds	r30, 0x010A
    1fd0:	f0 91 0b 01 	lds	r31, 0x010B
    1fd4:	90 83       	st	Z, r25
		OLED_write_command(0x10);
 		
 	}
	else{
		OLED_write_command((column & 0b00001111));
		OLED_write_command(0x10+((column)>>4));
    1fd6:	82 95       	swap	r24
    1fd8:	8f 70       	andi	r24, 0x0F	; 15
    1fda:	80 5f       	subi	r24, 0xF0	; 240
#define set_bit(reg, bit ) (reg |= (1 << bit))

uint8_t col, page;

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    1fdc:	e0 91 0a 01 	lds	r30, 0x010A
    1fe0:	f0 91 0b 01 	lds	r31, 0x010B
    1fe4:	80 83       	st	Z, r24
    1fe6:	08 95       	ret

00001fe8 <OLED_go_to_pos>:
		OLED_write_command(0x10+((column)>>4));
	}
 
 }
 
void OLED_go_to_pos(uint8_t page, uint8_t column){
    1fe8:	cf 93       	push	r28
    1fea:	c8 2f       	mov	r28, r24
    1fec:	86 2f       	mov	r24, r22
	 OLED_goto_column(column);
    1fee:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
	 OLED_goto_page(page);
    1ff2:	8c 2f       	mov	r24, r28
    1ff4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
 }
    1ff8:	cf 91       	pop	r28
    1ffa:	08 95       	ret

00001ffc <OLED_home>:
}



void OLED_home(){
	col = 0;
    1ffc:	10 92 54 02 	sts	0x0254, r1
	page = 0;
    2000:	10 92 55 02 	sts	0x0255, r1
	
	//set start page = 0
	OLED_write_command(0xB0);

	*/
	OLED_go_to_pos(0,0);
    2004:	60 e0       	ldi	r22, 0x00	; 0
    2006:	80 e0       	ldi	r24, 0x00	; 0
    2008:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
    200c:	08 95       	ret

0000200e <OLED_print_sentence>:
			col ++;
		}
		return 0;
}

void OLED_print_sentence(char sentence[]){
    200e:	ef 92       	push	r14
    2010:	ff 92       	push	r15
    2012:	0f 93       	push	r16
    2014:	1f 93       	push	r17
    2016:	cf 93       	push	r28
    2018:	df 93       	push	r29
    201a:	8c 01       	movw	r16, r24
    201c:	7c 01       	movw	r14, r24
	for (int i = 0; i < strlen(sentence); i++){
    201e:	c0 e0       	ldi	r28, 0x00	; 0
    2020:	d0 e0       	ldi	r29, 0x00	; 0
    2022:	19 c0       	rjmp	.+50     	; 0x2056 <OLED_print_sentence+0x48>
		if (col > 128 - FONTSIZE+1){
    2024:	80 91 54 02 	lds	r24, 0x0254
    2028:	8a 37       	cpi	r24, 0x7A	; 122
    202a:	78 f0       	brcs	.+30     	; 0x204a <OLED_print_sentence+0x3c>
			OLED_goto_page(page+1);
    202c:	80 91 55 02 	lds	r24, 0x0255
    2030:	8f 5f       	subi	r24, 0xFF	; 255
    2032:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
			
			OLED_goto_column(0);
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
			
			if (page == 8){
    203c:	80 91 55 02 	lds	r24, 0x0255
    2040:	88 30       	cpi	r24, 0x08	; 8
    2042:	19 f4       	brne	.+6      	; 0x204a <OLED_print_sentence+0x3c>
				OLED_home();
    2044:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OLED_home>
				break;
    2048:	10 c0       	rjmp	.+32     	; 0x206a <OLED_print_sentence+0x5c>
			}
		}
		
		OLED_print_char(sentence[i]);
    204a:	f7 01       	movw	r30, r14
    204c:	81 91       	ld	r24, Z+
    204e:	7f 01       	movw	r14, r30
    2050:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <OLED_print_char>
		}
		return 0;
}

void OLED_print_sentence(char sentence[]){
	for (int i = 0; i < strlen(sentence); i++){
    2054:	21 96       	adiw	r28, 0x01	; 1
    2056:	f8 01       	movw	r30, r16
    2058:	01 90       	ld	r0, Z+
    205a:	00 20       	and	r0, r0
    205c:	e9 f7       	brne	.-6      	; 0x2058 <OLED_print_sentence+0x4a>
    205e:	31 97       	sbiw	r30, 0x01	; 1
    2060:	e0 1b       	sub	r30, r16
    2062:	f1 0b       	sbc	r31, r17
    2064:	ce 17       	cp	r28, r30
    2066:	df 07       	cpc	r29, r31
    2068:	e8 f2       	brcs	.-70     	; 0x2024 <OLED_print_sentence+0x16>
		}
		
		OLED_print_char(sentence[i]);
		
	} 
}
    206a:	df 91       	pop	r29
    206c:	cf 91       	pop	r28
    206e:	1f 91       	pop	r17
    2070:	0f 91       	pop	r16
    2072:	ff 90       	pop	r15
    2074:	ef 90       	pop	r14
    2076:	08 95       	ret

00002078 <OLED_reset>:
	*/
	OLED_go_to_pos(0,0);
	
}

void OLED_reset(){
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
	OLED_go_to_pos(0,0);
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	80 e0       	ldi	r24, 0x00	; 0
    2082:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
    2086:	c0 e0       	ldi	r28, 0x00	; 0
	
	for (int i = 0; i < 8; i++){
		OLED_goto_page(i);
    2088:	10 e8       	ldi	r17, 0x80	; 128
    208a:	d0 e0       	ldi	r29, 0x00	; 0
    208c:	8c 2f       	mov	r24, r28
    208e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
    2092:	21 2f       	mov	r18, r17
    2094:	3d 2f       	mov	r19, r29
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2096:	e0 91 08 01 	lds	r30, 0x0108
    209a:	f0 91 09 01 	lds	r31, 0x0109
    209e:	10 82       	st	Z, r1
    20a0:	21 50       	subi	r18, 0x01	; 1
    20a2:	31 09       	sbc	r19, r1
	OLED_go_to_pos(0,0);
	
	for (int i = 0; i < 8; i++){
		OLED_goto_page(i);
		
		for (int j = 0; j < 128; j++){
    20a4:	21 15       	cp	r18, r1
    20a6:	31 05       	cpc	r19, r1
    20a8:	b1 f7       	brne	.-20     	; 0x2096 <OLED_reset+0x1e>
    20aa:	cf 5f       	subi	r28, 0xFF	; 255
}

void OLED_reset(){
	OLED_go_to_pos(0,0);
	
	for (int i = 0; i < 8; i++){
    20ac:	c8 30       	cpi	r28, 0x08	; 8
    20ae:	71 f7       	brne	.-36     	; 0x208c <OLED_reset+0x14>
		for (int j = 0; j < 128; j++){
			OLED_write_data(0x00);
			
		}
	}
	OLED_go_to_pos(0,0);
    20b0:	60 e0       	ldi	r22, 0x00	; 0
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <OLED_go_to_pos>
	
	
	
}
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	1f 91       	pop	r17
    20be:	08 95       	ret

000020c0 <OLED_init>:
#define set_bit(reg, bit ) (reg |= (1 << bit))

uint8_t col, page;

void OLED_write_command(uint8_t address){
	*oled_cmd = address;
    20c0:	e0 91 0a 01 	lds	r30, 0x010A
    20c4:	f0 91 0b 01 	lds	r31, 0x010B
    20c8:	8e ea       	ldi	r24, 0xAE	; 174
    20ca:	80 83       	st	Z, r24
    20cc:	e0 91 0a 01 	lds	r30, 0x010A
    20d0:	f0 91 0b 01 	lds	r31, 0x010B
    20d4:	81 ea       	ldi	r24, 0xA1	; 161
    20d6:	80 83       	st	Z, r24
    20d8:	e0 91 0a 01 	lds	r30, 0x010A
    20dc:	f0 91 0b 01 	lds	r31, 0x010B
    20e0:	8a ed       	ldi	r24, 0xDA	; 218
    20e2:	80 83       	st	Z, r24
    20e4:	e0 91 0a 01 	lds	r30, 0x010A
    20e8:	f0 91 0b 01 	lds	r31, 0x010B
    20ec:	82 e1       	ldi	r24, 0x12	; 18
    20ee:	80 83       	st	Z, r24
    20f0:	e0 91 0a 01 	lds	r30, 0x010A
    20f4:	f0 91 0b 01 	lds	r31, 0x010B
    20f8:	88 ec       	ldi	r24, 0xC8	; 200
    20fa:	80 83       	st	Z, r24
    20fc:	e0 91 0a 01 	lds	r30, 0x010A
    2100:	f0 91 0b 01 	lds	r31, 0x010B
    2104:	88 ea       	ldi	r24, 0xA8	; 168
    2106:	80 83       	st	Z, r24
    2108:	e0 91 0a 01 	lds	r30, 0x010A
    210c:	f0 91 0b 01 	lds	r31, 0x010B
    2110:	8f e3       	ldi	r24, 0x3F	; 63
    2112:	80 83       	st	Z, r24
    2114:	e0 91 0a 01 	lds	r30, 0x010A
    2118:	f0 91 0b 01 	lds	r31, 0x010B
    211c:	85 ed       	ldi	r24, 0xD5	; 213
    211e:	80 83       	st	Z, r24
    2120:	e0 91 0a 01 	lds	r30, 0x010A
    2124:	f0 91 0b 01 	lds	r31, 0x010B
    2128:	80 e8       	ldi	r24, 0x80	; 128
    212a:	80 83       	st	Z, r24
    212c:	e0 91 0a 01 	lds	r30, 0x010A
    2130:	f0 91 0b 01 	lds	r31, 0x010B
    2134:	81 e8       	ldi	r24, 0x81	; 129
    2136:	80 83       	st	Z, r24
    2138:	e0 91 0a 01 	lds	r30, 0x010A
    213c:	f0 91 0b 01 	lds	r31, 0x010B
    2140:	80 e5       	ldi	r24, 0x50	; 80
    2142:	80 83       	st	Z, r24
    2144:	e0 91 0a 01 	lds	r30, 0x010A
    2148:	f0 91 0b 01 	lds	r31, 0x010B
    214c:	89 ed       	ldi	r24, 0xD9	; 217
    214e:	80 83       	st	Z, r24
    2150:	e0 91 0a 01 	lds	r30, 0x010A
    2154:	f0 91 0b 01 	lds	r31, 0x010B
    2158:	81 e2       	ldi	r24, 0x21	; 33
    215a:	80 83       	st	Z, r24
    215c:	e0 91 0a 01 	lds	r30, 0x010A
    2160:	f0 91 0b 01 	lds	r31, 0x010B
    2164:	80 e2       	ldi	r24, 0x20	; 32
    2166:	80 83       	st	Z, r24
    2168:	e0 91 0a 01 	lds	r30, 0x010A
    216c:	f0 91 0b 01 	lds	r31, 0x010B
    2170:	82 e0       	ldi	r24, 0x02	; 2
    2172:	80 83       	st	Z, r24
    2174:	e0 91 0a 01 	lds	r30, 0x010A
    2178:	f0 91 0b 01 	lds	r31, 0x010B
    217c:	8b ed       	ldi	r24, 0xDB	; 219
    217e:	80 83       	st	Z, r24
    2180:	e0 91 0a 01 	lds	r30, 0x010A
    2184:	f0 91 0b 01 	lds	r31, 0x010B
    2188:	80 e3       	ldi	r24, 0x30	; 48
    218a:	80 83       	st	Z, r24
    218c:	e0 91 0a 01 	lds	r30, 0x010A
    2190:	f0 91 0b 01 	lds	r31, 0x010B
    2194:	8d ea       	ldi	r24, 0xAD	; 173
    2196:	80 83       	st	Z, r24
    2198:	e0 91 0a 01 	lds	r30, 0x010A
    219c:	f0 91 0b 01 	lds	r31, 0x010B
    21a0:	10 82       	st	Z, r1
    21a2:	e0 91 0a 01 	lds	r30, 0x010A
    21a6:	f0 91 0b 01 	lds	r31, 0x010B
    21aa:	84 ea       	ldi	r24, 0xA4	; 164
    21ac:	80 83       	st	Z, r24
    21ae:	e0 91 0a 01 	lds	r30, 0x010A
    21b2:	f0 91 0b 01 	lds	r31, 0x010B
    21b6:	86 ea       	ldi	r24, 0xA6	; 166
    21b8:	80 83       	st	Z, r24
    21ba:	e0 91 0a 01 	lds	r30, 0x010A
    21be:	f0 91 0b 01 	lds	r31, 0x010B
    21c2:	8f ea       	ldi	r24, 0xAF	; 175
    21c4:	80 83       	st	Z, r24
	OLED_write_command(0x00);
	OLED_write_command(0xa4); //out follows RAM content
	OLED_write_command(0xa6); //set normal display
	OLED_write_command(0xaf); // display on
	
	OLED_reset();
    21c6:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
    21ca:	08 95       	ret

000021cc <OLED_print_brage>:
	
}



void OLED_print_brage(){
    21cc:	0f 93       	push	r16
    21ce:	1f 93       	push	r17
    21d0:	cf 93       	push	r28
    21d2:	df 93       	push	r29
	OLED_reset();
    21d4:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
	
	OLED_goto_column(0);
    21d8:	80 e0       	ldi	r24, 0x00	; 0
    21da:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    21de:	c0 e8       	ldi	r28, 0x80	; 128
    21e0:	d0 e0       	ldi	r29, 0x00	; 0
	
}



void OLED_print_brage(){
    21e2:	00 e0       	ldi	r16, 0x00	; 0
    21e4:	10 e0       	ldi	r17, 0x00	; 0
    21e6:	26 c0       	rjmp	.+76     	; 0x2234 <OLED_print_brage+0x68>
    21e8:	f9 01       	movw	r30, r18
    21ea:	e8 0f       	add	r30, r24
    21ec:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&brage[j+k][i]));
    21ee:	e4 91       	lpm	r30, Z
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    21f0:	a0 91 08 01 	lds	r26, 0x0108
    21f4:	b0 91 09 01 	lds	r27, 0x0109
    21f8:	ec 93       	st	X, r30
    21fa:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    21fc:	88 30       	cpi	r24, 0x08	; 8
    21fe:	91 05       	cpc	r25, r1
    2200:	99 f7       	brne	.-26     	; 0x21e8 <OLED_print_brage+0x1c>
    2202:	48 5f       	subi	r20, 0xF8	; 248
    2204:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2206:	4c 17       	cp	r20, r28
    2208:	5d 07       	cpc	r21, r29
    220a:	31 f0       	breq	.+12     	; 0x2218 <OLED_print_brage+0x4c>
	
}



void OLED_print_brage(){
    220c:	80 2f       	mov	r24, r16
    220e:	91 2f       	mov	r25, r17
    2210:	9a 01       	movw	r18, r20
    2212:	20 59       	subi	r18, 0x90	; 144
    2214:	37 4f       	sbci	r19, 0xF7	; 247
    2216:	e8 cf       	rjmp	.-48     	; 0x21e8 <OLED_print_brage+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&brage[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2218:	80 91 55 02 	lds	r24, 0x0255
    221c:	8f 5f       	subi	r24, 0xFF	; 255
    221e:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
		OLED_goto_column(0);
    2222:	80 e0       	ldi	r24, 0x00	; 0
    2224:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    2228:	c0 58       	subi	r28, 0x80	; 128
    222a:	df 4f       	sbci	r29, 0xFF	; 255

void OLED_print_brage(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    222c:	c0 38       	cpi	r28, 0x80	; 128
    222e:	84 e0       	ldi	r24, 0x04	; 4
    2230:	d8 07       	cpc	r29, r24
    2232:	21 f0       	breq	.+8      	; 0x223c <OLED_print_brage+0x70>
    2234:	ae 01       	movw	r20, r28
    2236:	40 58       	subi	r20, 0x80	; 128
    2238:	51 09       	sbc	r21, r1
    223a:	e8 cf       	rjmp	.-48     	; 0x220c <OLED_print_brage+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();	
    223c:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OLED_home>
	OLED_print_sentence("Brage");
    2240:	8a e6       	ldi	r24, 0x6A	; 106
    2242:	91 e0       	ldi	r25, 0x01	; 1
    2244:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
}
    2248:	df 91       	pop	r29
    224a:	cf 91       	pop	r28
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	08 95       	ret

00002252 <OLED_print_tobias>:

void OLED_print_tobias(){
    2252:	0f 93       	push	r16
    2254:	1f 93       	push	r17
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
	OLED_reset();
    225a:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
	
	OLED_goto_column(0);
    225e:	80 e0       	ldi	r24, 0x00	; 0
    2260:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    2264:	c0 e8       	ldi	r28, 0x80	; 128
    2266:	d0 e0       	ldi	r29, 0x00	; 0
	}
	OLED_home();	
	OLED_print_sentence("Brage");
}

void OLED_print_tobias(){
    2268:	00 e0       	ldi	r16, 0x00	; 0
    226a:	10 e0       	ldi	r17, 0x00	; 0
    226c:	26 c0       	rjmp	.+76     	; 0x22ba <OLED_print_tobias+0x68>
    226e:	f9 01       	movw	r30, r18
    2270:	e8 0f       	add	r30, r24
    2272:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&tobias[j+k][i]));
    2274:	e4 91       	lpm	r30, Z
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2276:	a0 91 08 01 	lds	r26, 0x0108
    227a:	b0 91 09 01 	lds	r27, 0x0109
    227e:	ec 93       	st	X, r30
    2280:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2282:	88 30       	cpi	r24, 0x08	; 8
    2284:	91 05       	cpc	r25, r1
    2286:	99 f7       	brne	.-26     	; 0x226e <OLED_print_tobias+0x1c>
    2288:	48 5f       	subi	r20, 0xF8	; 248
    228a:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    228c:	4c 17       	cp	r20, r28
    228e:	5d 07       	cpc	r21, r29
    2290:	31 f0       	breq	.+12     	; 0x229e <OLED_print_tobias+0x4c>
	}
	OLED_home();	
	OLED_print_sentence("Brage");
}

void OLED_print_tobias(){
    2292:	80 2f       	mov	r24, r16
    2294:	91 2f       	mov	r25, r17
    2296:	9a 01       	movw	r18, r20
    2298:	20 59       	subi	r18, 0x90	; 144
    229a:	33 4f       	sbci	r19, 0xF3	; 243
    229c:	e8 cf       	rjmp	.-48     	; 0x226e <OLED_print_tobias+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&tobias[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    229e:	80 91 55 02 	lds	r24, 0x0255
    22a2:	8f 5f       	subi	r24, 0xFF	; 255
    22a4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
		OLED_goto_column(0);
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    22ae:	c0 58       	subi	r28, 0x80	; 128
    22b0:	df 4f       	sbci	r29, 0xFF	; 255

void OLED_print_tobias(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    22b2:	c0 38       	cpi	r28, 0x80	; 128
    22b4:	84 e0       	ldi	r24, 0x04	; 4
    22b6:	d8 07       	cpc	r29, r24
    22b8:	21 f0       	breq	.+8      	; 0x22c2 <OLED_print_tobias+0x70>
    22ba:	ae 01       	movw	r20, r28
    22bc:	40 58       	subi	r20, 0x80	; 128
    22be:	51 09       	sbc	r21, r1
    22c0:	e8 cf       	rjmp	.-48     	; 0x2292 <OLED_print_tobias+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    22c2:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OLED_home>
	OLED_print_sentence("Tobias");
    22c6:	80 e7       	ldi	r24, 0x70	; 112
    22c8:	91 e0       	ldi	r25, 0x01	; 1
    22ca:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
}
    22ce:	df 91       	pop	r29
    22d0:	cf 91       	pop	r28
    22d2:	1f 91       	pop	r17
    22d4:	0f 91       	pop	r16
    22d6:	08 95       	ret

000022d8 <OLED_print_henning>:

void OLED_print_henning(){
    22d8:	0f 93       	push	r16
    22da:	1f 93       	push	r17
    22dc:	cf 93       	push	r28
    22de:	df 93       	push	r29
	OLED_reset();
    22e0:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
	
	OLED_goto_column(0);
    22e4:	80 e0       	ldi	r24, 0x00	; 0
    22e6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    22ea:	c0 e8       	ldi	r28, 0x80	; 128
    22ec:	d0 e0       	ldi	r29, 0x00	; 0
	}
	OLED_home();
	OLED_print_sentence("Tobias");
}

void OLED_print_henning(){
    22ee:	00 e0       	ldi	r16, 0x00	; 0
    22f0:	10 e0       	ldi	r17, 0x00	; 0
    22f2:	26 c0       	rjmp	.+76     	; 0x2340 <OLED_print_henning+0x68>
    22f4:	f9 01       	movw	r30, r18
    22f6:	e8 0f       	add	r30, r24
    22f8:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&henning[j+k][i]));
    22fa:	e4 91       	lpm	r30, Z
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    22fc:	a0 91 08 01 	lds	r26, 0x0108
    2300:	b0 91 09 01 	lds	r27, 0x0109
    2304:	ec 93       	st	X, r30
    2306:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2308:	88 30       	cpi	r24, 0x08	; 8
    230a:	91 05       	cpc	r25, r1
    230c:	99 f7       	brne	.-26     	; 0x22f4 <OLED_print_henning+0x1c>
    230e:	48 5f       	subi	r20, 0xF8	; 248
    2310:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2312:	4c 17       	cp	r20, r28
    2314:	5d 07       	cpc	r21, r29
    2316:	31 f0       	breq	.+12     	; 0x2324 <OLED_print_henning+0x4c>
	}
	OLED_home();
	OLED_print_sentence("Tobias");
}

void OLED_print_henning(){
    2318:	80 2f       	mov	r24, r16
    231a:	91 2f       	mov	r25, r17
    231c:	9a 01       	movw	r18, r20
    231e:	20 59       	subi	r18, 0x90	; 144
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	e8 cf       	rjmp	.-48     	; 0x22f4 <OLED_print_henning+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&henning[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2324:	80 91 55 02 	lds	r24, 0x0255
    2328:	8f 5f       	subi	r24, 0xFF	; 255
    232a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
		OLED_goto_column(0);
    232e:	80 e0       	ldi	r24, 0x00	; 0
    2330:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    2334:	c0 58       	subi	r28, 0x80	; 128
    2336:	df 4f       	sbci	r29, 0xFF	; 255

void OLED_print_henning(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    2338:	c0 38       	cpi	r28, 0x80	; 128
    233a:	84 e0       	ldi	r24, 0x04	; 4
    233c:	d8 07       	cpc	r29, r24
    233e:	21 f0       	breq	.+8      	; 0x2348 <OLED_print_henning+0x70>
    2340:	ae 01       	movw	r20, r28
    2342:	40 58       	subi	r20, 0x80	; 128
    2344:	51 09       	sbc	r21, r1
    2346:	e8 cf       	rjmp	.-48     	; 0x2318 <OLED_print_henning+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    2348:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OLED_home>
	OLED_print_sentence("Henning");
    234c:	87 e7       	ldi	r24, 0x77	; 119
    234e:	91 e0       	ldi	r25, 0x01	; 1
    2350:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
}
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	08 95       	ret

0000235e <OLED_print_credits>:

void OLED_print_credits(){
    235e:	0f 93       	push	r16
    2360:	1f 93       	push	r17
    2362:	cf 93       	push	r28
    2364:	df 93       	push	r29
	OLED_reset();
    2366:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
	OLED_goto_column(0);
    236a:	80 e0       	ldi	r24, 0x00	; 0
    236c:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    2370:	c0 e8       	ldi	r28, 0x80	; 128
    2372:	d0 e0       	ldi	r29, 0x00	; 0
	}
	OLED_home();
	OLED_print_sentence("Henning");
}

void OLED_print_credits(){
    2374:	00 e0       	ldi	r16, 0x00	; 0
    2376:	10 e0       	ldi	r17, 0x00	; 0
    2378:	26 c0       	rjmp	.+76     	; 0x23c6 <OLED_print_credits+0x68>
    237a:	f9 01       	movw	r30, r18
    237c:	e8 0f       	add	r30, r24
    237e:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&credits[j+k][i]));
    2380:	e4 91       	lpm	r30, Z
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    2382:	a0 91 08 01 	lds	r26, 0x0108
    2386:	b0 91 09 01 	lds	r27, 0x0109
    238a:	ec 93       	st	X, r30
    238c:	01 96       	adiw	r24, 0x01	; 1
	OLED_reset();
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    238e:	88 30       	cpi	r24, 0x08	; 8
    2390:	91 05       	cpc	r25, r1
    2392:	99 f7       	brne	.-26     	; 0x237a <OLED_print_credits+0x1c>
    2394:	48 5f       	subi	r20, 0xF8	; 248
    2396:	5f 4f       	sbci	r21, 0xFF	; 255
void OLED_print_credits(){
	OLED_reset();
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2398:	4c 17       	cp	r20, r28
    239a:	5d 07       	cpc	r21, r29
    239c:	31 f0       	breq	.+12     	; 0x23aa <OLED_print_credits+0x4c>
	}
	OLED_home();
	OLED_print_sentence("Henning");
}

void OLED_print_credits(){
    239e:	80 2f       	mov	r24, r16
    23a0:	91 2f       	mov	r25, r17
    23a2:	9a 01       	movw	r18, r20
    23a4:	20 59       	subi	r18, 0x90	; 144
    23a6:	3b 4f       	sbci	r19, 0xFB	; 251
    23a8:	e8 cf       	rjmp	.-48     	; 0x237a <OLED_print_credits+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&credits[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    23aa:	80 91 55 02 	lds	r24, 0x0255
    23ae:	8f 5f       	subi	r24, 0xFF	; 255
    23b0:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
		OLED_goto_column(0);
    23b4:	80 e0       	ldi	r24, 0x00	; 0
    23b6:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    23ba:	c0 58       	subi	r28, 0x80	; 128
    23bc:	df 4f       	sbci	r29, 0xFF	; 255
}

void OLED_print_credits(){
	OLED_reset();
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    23be:	c0 38       	cpi	r28, 0x80	; 128
    23c0:	84 e0       	ldi	r24, 0x04	; 4
    23c2:	d8 07       	cpc	r29, r24
    23c4:	21 f0       	breq	.+8      	; 0x23ce <OLED_print_credits+0x70>
    23c6:	ae 01       	movw	r20, r28
    23c8:	40 58       	subi	r20, 0x80	; 128
    23ca:	51 09       	sbc	r21, r1
    23cc:	e8 cf       	rjmp	.-48     	; 0x239e <OLED_print_credits+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    23ce:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OLED_home>
}
    23d2:	df 91       	pop	r29
    23d4:	cf 91       	pop	r28
    23d6:	1f 91       	pop	r17
    23d8:	0f 91       	pop	r16
    23da:	08 95       	ret

000023dc <OLED_credits>:

	
}
*/
void OLED_credits(){
	OLED_print_credits();
    23dc:	0e 94 af 11 	call	0x235e	; 0x235e <OLED_print_credits>
    23e0:	2f e7       	ldi	r18, 0x7F	; 127
    23e2:	84 e8       	ldi	r24, 0x84	; 132
    23e4:	9e e1       	ldi	r25, 0x1E	; 30
    23e6:	21 50       	subi	r18, 0x01	; 1
    23e8:	80 40       	sbci	r24, 0x00	; 0
    23ea:	90 40       	sbci	r25, 0x00	; 0
    23ec:	e1 f7       	brne	.-8      	; 0x23e6 <OLED_credits+0xa>
    23ee:	00 c0       	rjmp	.+0      	; 0x23f0 <OLED_credits+0x14>
    23f0:	00 00       	nop
	_delay_ms(10000);
	OLED_print_henning();
    23f2:	0e 94 6c 11 	call	0x22d8	; 0x22d8 <OLED_print_henning>
    23f6:	2f e7       	ldi	r18, 0x7F	; 127
    23f8:	84 e8       	ldi	r24, 0x84	; 132
    23fa:	9e e1       	ldi	r25, 0x1E	; 30
    23fc:	21 50       	subi	r18, 0x01	; 1
    23fe:	80 40       	sbci	r24, 0x00	; 0
    2400:	90 40       	sbci	r25, 0x00	; 0
    2402:	e1 f7       	brne	.-8      	; 0x23fc <OLED_credits+0x20>
    2404:	00 c0       	rjmp	.+0      	; 0x2406 <OLED_credits+0x2a>
    2406:	00 00       	nop
	_delay_ms(10000);
	OLED_print_brage();
    2408:	0e 94 e6 10 	call	0x21cc	; 0x21cc <OLED_print_brage>
    240c:	2f e7       	ldi	r18, 0x7F	; 127
    240e:	84 e8       	ldi	r24, 0x84	; 132
    2410:	9e e1       	ldi	r25, 0x1E	; 30
    2412:	21 50       	subi	r18, 0x01	; 1
    2414:	80 40       	sbci	r24, 0x00	; 0
    2416:	90 40       	sbci	r25, 0x00	; 0
    2418:	e1 f7       	brne	.-8      	; 0x2412 <OLED_credits+0x36>
    241a:	00 c0       	rjmp	.+0      	; 0x241c <OLED_credits+0x40>
    241c:	00 00       	nop
	_delay_ms(10000);
	OLED_print_tobias();
    241e:	0e 94 29 11 	call	0x2252	; 0x2252 <OLED_print_tobias>
    2422:	2f e7       	ldi	r18, 0x7F	; 127
    2424:	84 e8       	ldi	r24, 0x84	; 132
    2426:	9e e1       	ldi	r25, 0x1E	; 30
    2428:	21 50       	subi	r18, 0x01	; 1
    242a:	80 40       	sbci	r24, 0x00	; 0
    242c:	90 40       	sbci	r25, 0x00	; 0
    242e:	e1 f7       	brne	.-8      	; 0x2428 <OLED_credits+0x4c>
    2430:	00 c0       	rjmp	.+0      	; 0x2432 <OLED_credits+0x56>
    2432:	00 00       	nop
    2434:	08 95       	ret

00002436 <OLED_print_pig>:
		OLED_goto_column(0);
	}
	OLED_home();
}

void OLED_print_pig(){
    2436:	0f 93       	push	r16
    2438:	1f 93       	push	r17
    243a:	cf 93       	push	r28
    243c:	df 93       	push	r29
	OLED_reset();
    243e:	0e 94 3c 10 	call	0x2078	; 0x2078 <OLED_reset>
	
	OLED_goto_column(0);
    2442:	80 e0       	ldi	r24, 0x00	; 0
    2444:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    2448:	c0 e8       	ldi	r28, 0x80	; 128
    244a:	d0 e0       	ldi	r29, 0x00	; 0
		OLED_goto_column(0);
	}
	OLED_home();
}

void OLED_print_pig(){
    244c:	00 e0       	ldi	r16, 0x00	; 0
    244e:	10 e0       	ldi	r17, 0x00	; 0
    2450:	26 c0       	rjmp	.+76     	; 0x249e <OLED_print_pig+0x68>
    2452:	f9 01       	movw	r30, r18
    2454:	e8 0f       	add	r30, r24
    2456:	f9 1f       	adc	r31, r25
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&pig[j+k][i]));
    2458:	e4 91       	lpm	r30, Z
	*oled_cmd = address;
}

void OLED_write_data(uint8_t data)
{
	*oled_data = data;
    245a:	a0 91 08 01 	lds	r26, 0x0108
    245e:	b0 91 09 01 	lds	r27, 0x0109
    2462:	ec 93       	st	X, r30
    2464:	01 96       	adiw	r24, 0x01	; 1
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
    2466:	88 30       	cpi	r24, 0x08	; 8
    2468:	91 05       	cpc	r25, r1
    246a:	99 f7       	brne	.-26     	; 0x2452 <OLED_print_pig+0x1c>
    246c:	48 5f       	subi	r20, 0xF8	; 248
    246e:	5f 4f       	sbci	r21, 0xFF	; 255
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){

		for (uint8_t j = 0; j < 16; j++){
    2470:	4c 17       	cp	r20, r28
    2472:	5d 07       	cpc	r21, r29
    2474:	31 f0       	breq	.+12     	; 0x2482 <OLED_print_pig+0x4c>
		OLED_goto_column(0);
	}
	OLED_home();
}

void OLED_print_pig(){
    2476:	80 2f       	mov	r24, r16
    2478:	91 2f       	mov	r25, r17
    247a:	9a 01       	movw	r18, r20
    247c:	20 59       	subi	r18, 0x90	; 144
    247e:	3f 4e       	sbci	r19, 0xEF	; 239
    2480:	e8 cf       	rjmp	.-48     	; 0x2452 <OLED_print_pig+0x1c>
		for (uint8_t j = 0; j < 16; j++){
			for (uint8_t i = 0; i < FONTSIZE; i++){
				OLED_write_data(pgm_read_byte(&pig[j+k][i]));
			}
		}
		OLED_goto_page(page+1);
    2482:	80 91 55 02 	lds	r24, 0x0255
    2486:	8f 5f       	subi	r24, 0xFF	; 255
    2488:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <OLED_goto_page>
		OLED_goto_column(0);
    248c:	80 e0       	ldi	r24, 0x00	; 0
    248e:	0e 94 d4 0f 	call	0x1fa8	; 0x1fa8 <OLED_goto_column>
    2492:	c0 58       	subi	r28, 0x80	; 128
    2494:	df 4f       	sbci	r29, 0xFF	; 255

void OLED_print_pig(){
	OLED_reset();
	
	OLED_goto_column(0);
	for (uint8_t k = 0; k < 128; k+=16){
    2496:	c0 38       	cpi	r28, 0x80	; 128
    2498:	84 e0       	ldi	r24, 0x04	; 4
    249a:	d8 07       	cpc	r29, r24
    249c:	21 f0       	breq	.+8      	; 0x24a6 <OLED_print_pig+0x70>
    249e:	ae 01       	movw	r20, r28
    24a0:	40 58       	subi	r20, 0x80	; 128
    24a2:	51 09       	sbc	r21, r1
    24a4:	e8 cf       	rjmp	.-48     	; 0x2476 <OLED_print_pig+0x40>
			}
		}
		OLED_goto_page(page+1);
		OLED_goto_column(0);
	}
	OLED_home();
    24a6:	0e 94 fe 0f 	call	0x1ffc	; 0x1ffc <OLED_home>
	OLED_print_sentence("Brage");
    24aa:	8a e6       	ldi	r24, 0x6A	; 106
    24ac:	91 e0       	ldi	r25, 0x01	; 1
    24ae:	0e 94 07 10 	call	0x200e	; 0x200e <OLED_print_sentence>
    24b2:	df 91       	pop	r29
    24b4:	cf 91       	pop	r28
    24b6:	1f 91       	pop	r17
    24b8:	0f 91       	pop	r16
    24ba:	08 95       	ret

000024bc <SPI_write>:


void SPI_write(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
    24bc:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    24be:	77 9b       	sbis	0x0e, 7	; 14
    24c0:	fe cf       	rjmp	.-4      	; 0x24be <SPI_write+0x2>

}
    24c2:	08 95       	ret

000024c4 <SPI_read>:


uint8_t SPI_read()
{
	/* Start transmission */
	SPDR = 0x00;
    24c4:	1f b8       	out	0x0f, r1	; 15
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
    24c6:	77 9b       	sbis	0x0e, 7	; 14
    24c8:	fe cf       	rjmp	.-4      	; 0x24c6 <SPI_read+0x2>
	return SPDR;
    24ca:	8f b1       	in	r24, 0x0f	; 15
}
    24cc:	08 95       	ret

000024ce <SPI_init>:

void SPI_init(){
	
	/* Set MOSI and SCK output, all others input */
	
	set_bit(DDRB, DDB5);
    24ce:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDRB, DDB7);
    24d0:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDRB, DDB4); //set chip-select
    24d2:	bc 9a       	sbi	0x17, 4	; 23
	//set_bit(PORTB, PB6); //internal pull-up
	clear_bit(DDRB,PB6);
    24d4:	be 98       	cbi	0x17, 6	; 23
	*/
	
	
	/* Enable SPI, Master, set clock rate fck/16 */
	
	SPCR |= (1<<SPE)|(1<<MSTR)|(1<<SPR0);
    24d6:	8d b1       	in	r24, 0x0d	; 13
    24d8:	81 65       	ori	r24, 0x51	; 81
    24da:	8d b9       	out	0x0d, r24	; 13
    24dc:	08 95       	ret

000024de <SPI_chipSelect>:
}

void SPI_chipSelect(uint8_t select){
	
	if(select == 0){
    24de:	81 11       	cpse	r24, r1
    24e0:	02 c0       	rjmp	.+4      	; 0x24e6 <SPI_chipSelect+0x8>
		clear_bit(PORTB, PB4);
    24e2:	c4 98       	cbi	0x18, 4	; 24
    24e4:	08 95       	ret
	}
	
	else{
		set_bit(PORTB, PB4);
    24e6:	c4 9a       	sbi	0x18, 4	; 24
    24e8:	08 95       	ret

000024ea <USART_receive>:


unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
    24ea:	5f 9b       	sbis	0x0b, 7	; 11
    24ec:	fe cf       	rjmp	.-4      	; 0x24ea <USART_receive>
	;
	/* Get and return received data from buffer */
	return UDR0;
    24ee:	8c b1       	in	r24, 0x0c	; 12
}
    24f0:	08 95       	ret

000024f2 <USART_transmit>:


void USART_transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
    24f2:	5d 9b       	sbis	0x0b, 5	; 11
    24f4:	fe cf       	rjmp	.-4      	; 0x24f2 <USART_transmit>
	;

	/* Put data into buffer, sends the data */
	UDR0 = data;
    24f6:	8c b9       	out	0x0c, r24	; 12
    24f8:	08 95       	ret

000024fa <USART_init>:
// 		// Kopiert:
	//UBRR0H = (unsigned char) (ubrr>>8);
	//UBRR0L = (unsigned char) ubrr;
// 	

	UBRR0L = 0x1F;	
    24fa:	8f e1       	ldi	r24, 0x1F	; 31
    24fc:	89 b9       	out	0x09, r24	; 9
	UBRR0H = 0;
    24fe:	10 bc       	out	0x20, r1	; 32
	// Enabler reciever og transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2500:	88 e1       	ldi	r24, 0x18	; 24
    2502:	8a b9       	out	0x0a, r24	; 10
	
	//Initialiserer aksessering til UCSRC-registeret | Setter til 1stop-bit | Setter til 8-bit data | Setter USART MODE til asynkron. 0 = asynkron, 1 = synkron
	UCSR0C = (1<<URSEL0)|(0<<USBS0)|(3<<UCSZ00)|(0<<UMSEL0);
    2504:	86 e8       	ldi	r24, 0x86	; 134
    2506:	80 bd       	out	0x20, r24	; 32
	
	fdevopen(USART_transmit, USART_receive);
    2508:	65 e7       	ldi	r22, 0x75	; 117
    250a:	72 e1       	ldi	r23, 0x12	; 18
    250c:	89 e7       	ldi	r24, 0x79	; 121
    250e:	92 e1       	ldi	r25, 0x12	; 18
    2510:	0e 94 b3 12 	call	0x2566	; 0x2566 <fdevopen>
    2514:	08 95       	ret

00002516 <__divmodhi4>:
    2516:	97 fb       	bst	r25, 7
    2518:	07 2e       	mov	r0, r23
    251a:	16 f4       	brtc	.+4      	; 0x2520 <__divmodhi4+0xa>
    251c:	00 94       	com	r0
    251e:	07 d0       	rcall	.+14     	; 0x252e <__divmodhi4_neg1>
    2520:	77 fd       	sbrc	r23, 7
    2522:	09 d0       	rcall	.+18     	; 0x2536 <__divmodhi4_neg2>
    2524:	0e 94 9f 12 	call	0x253e	; 0x253e <__udivmodhi4>
    2528:	07 fc       	sbrc	r0, 7
    252a:	05 d0       	rcall	.+10     	; 0x2536 <__divmodhi4_neg2>
    252c:	3e f4       	brtc	.+14     	; 0x253c <__divmodhi4_exit>

0000252e <__divmodhi4_neg1>:
    252e:	90 95       	com	r25
    2530:	81 95       	neg	r24
    2532:	9f 4f       	sbci	r25, 0xFF	; 255
    2534:	08 95       	ret

00002536 <__divmodhi4_neg2>:
    2536:	70 95       	com	r23
    2538:	61 95       	neg	r22
    253a:	7f 4f       	sbci	r23, 0xFF	; 255

0000253c <__divmodhi4_exit>:
    253c:	08 95       	ret

0000253e <__udivmodhi4>:
    253e:	aa 1b       	sub	r26, r26
    2540:	bb 1b       	sub	r27, r27
    2542:	51 e1       	ldi	r21, 0x11	; 17
    2544:	07 c0       	rjmp	.+14     	; 0x2554 <__udivmodhi4_ep>

00002546 <__udivmodhi4_loop>:
    2546:	aa 1f       	adc	r26, r26
    2548:	bb 1f       	adc	r27, r27
    254a:	a6 17       	cp	r26, r22
    254c:	b7 07       	cpc	r27, r23
    254e:	10 f0       	brcs	.+4      	; 0x2554 <__udivmodhi4_ep>
    2550:	a6 1b       	sub	r26, r22
    2552:	b7 0b       	sbc	r27, r23

00002554 <__udivmodhi4_ep>:
    2554:	88 1f       	adc	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	5a 95       	dec	r21
    255a:	a9 f7       	brne	.-22     	; 0x2546 <__udivmodhi4_loop>
    255c:	80 95       	com	r24
    255e:	90 95       	com	r25
    2560:	bc 01       	movw	r22, r24
    2562:	cd 01       	movw	r24, r26
    2564:	08 95       	ret

00002566 <fdevopen>:
    2566:	0f 93       	push	r16
    2568:	1f 93       	push	r17
    256a:	cf 93       	push	r28
    256c:	df 93       	push	r29
    256e:	ec 01       	movw	r28, r24
    2570:	8b 01       	movw	r16, r22
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	31 f4       	brne	.+12     	; 0x2582 <fdevopen+0x1c>
    2576:	61 15       	cp	r22, r1
    2578:	71 05       	cpc	r23, r1
    257a:	19 f4       	brne	.+6      	; 0x2582 <fdevopen+0x1c>
    257c:	80 e0       	ldi	r24, 0x00	; 0
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	38 c0       	rjmp	.+112    	; 0x25f2 <fdevopen+0x8c>
    2582:	6e e0       	ldi	r22, 0x0E	; 14
    2584:	70 e0       	ldi	r23, 0x00	; 0
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	0e 94 fe 12 	call	0x25fc	; 0x25fc <calloc>
    258e:	fc 01       	movw	r30, r24
    2590:	00 97       	sbiw	r24, 0x00	; 0
    2592:	a1 f3       	breq	.-24     	; 0x257c <fdevopen+0x16>
    2594:	80 e8       	ldi	r24, 0x80	; 128
    2596:	83 83       	std	Z+3, r24	; 0x03
    2598:	01 15       	cp	r16, r1
    259a:	11 05       	cpc	r17, r1
    259c:	71 f0       	breq	.+28     	; 0x25ba <fdevopen+0x54>
    259e:	13 87       	std	Z+11, r17	; 0x0b
    25a0:	02 87       	std	Z+10, r16	; 0x0a
    25a2:	81 e8       	ldi	r24, 0x81	; 129
    25a4:	83 83       	std	Z+3, r24	; 0x03
    25a6:	80 91 56 02 	lds	r24, 0x0256
    25aa:	90 91 57 02 	lds	r25, 0x0257
    25ae:	89 2b       	or	r24, r25
    25b0:	21 f4       	brne	.+8      	; 0x25ba <fdevopen+0x54>
    25b2:	f0 93 57 02 	sts	0x0257, r31
    25b6:	e0 93 56 02 	sts	0x0256, r30
    25ba:	20 97       	sbiw	r28, 0x00	; 0
    25bc:	c9 f0       	breq	.+50     	; 0x25f0 <fdevopen+0x8a>
    25be:	d1 87       	std	Z+9, r29	; 0x09
    25c0:	c0 87       	std	Z+8, r28	; 0x08
    25c2:	83 81       	ldd	r24, Z+3	; 0x03
    25c4:	82 60       	ori	r24, 0x02	; 2
    25c6:	83 83       	std	Z+3, r24	; 0x03
    25c8:	80 91 58 02 	lds	r24, 0x0258
    25cc:	90 91 59 02 	lds	r25, 0x0259
    25d0:	89 2b       	or	r24, r25
    25d2:	71 f4       	brne	.+28     	; 0x25f0 <fdevopen+0x8a>
    25d4:	f0 93 59 02 	sts	0x0259, r31
    25d8:	e0 93 58 02 	sts	0x0258, r30
    25dc:	80 91 5a 02 	lds	r24, 0x025A
    25e0:	90 91 5b 02 	lds	r25, 0x025B
    25e4:	89 2b       	or	r24, r25
    25e6:	21 f4       	brne	.+8      	; 0x25f0 <fdevopen+0x8a>
    25e8:	f0 93 5b 02 	sts	0x025B, r31
    25ec:	e0 93 5a 02 	sts	0x025A, r30
    25f0:	cf 01       	movw	r24, r30
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	0f 91       	pop	r16
    25fa:	08 95       	ret

000025fc <calloc>:
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	86 9f       	mul	r24, r22
    2606:	80 01       	movw	r16, r0
    2608:	87 9f       	mul	r24, r23
    260a:	10 0d       	add	r17, r0
    260c:	96 9f       	mul	r25, r22
    260e:	10 0d       	add	r17, r0
    2610:	11 24       	eor	r1, r1
    2612:	c8 01       	movw	r24, r16
    2614:	0e 94 1a 13 	call	0x2634	; 0x2634 <malloc>
    2618:	ec 01       	movw	r28, r24
    261a:	00 97       	sbiw	r24, 0x00	; 0
    261c:	29 f0       	breq	.+10     	; 0x2628 <calloc+0x2c>
    261e:	a8 01       	movw	r20, r16
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	0e 94 41 14 	call	0x2882	; 0x2882 <memset>
    2628:	ce 01       	movw	r24, r28
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	08 95       	ret

00002634 <malloc>:
    2634:	cf 93       	push	r28
    2636:	df 93       	push	r29
    2638:	82 30       	cpi	r24, 0x02	; 2
    263a:	91 05       	cpc	r25, r1
    263c:	10 f4       	brcc	.+4      	; 0x2642 <malloc+0xe>
    263e:	82 e0       	ldi	r24, 0x02	; 2
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	e0 91 5e 02 	lds	r30, 0x025E
    2646:	f0 91 5f 02 	lds	r31, 0x025F
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	a0 e0       	ldi	r26, 0x00	; 0
    2650:	b0 e0       	ldi	r27, 0x00	; 0
    2652:	30 97       	sbiw	r30, 0x00	; 0
    2654:	39 f1       	breq	.+78     	; 0x26a4 <malloc+0x70>
    2656:	40 81       	ld	r20, Z
    2658:	51 81       	ldd	r21, Z+1	; 0x01
    265a:	48 17       	cp	r20, r24
    265c:	59 07       	cpc	r21, r25
    265e:	b8 f0       	brcs	.+46     	; 0x268e <malloc+0x5a>
    2660:	48 17       	cp	r20, r24
    2662:	59 07       	cpc	r21, r25
    2664:	71 f4       	brne	.+28     	; 0x2682 <malloc+0x4e>
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	10 97       	sbiw	r26, 0x00	; 0
    266c:	29 f0       	breq	.+10     	; 0x2678 <malloc+0x44>
    266e:	13 96       	adiw	r26, 0x03	; 3
    2670:	9c 93       	st	X, r25
    2672:	8e 93       	st	-X, r24
    2674:	12 97       	sbiw	r26, 0x02	; 2
    2676:	2c c0       	rjmp	.+88     	; 0x26d0 <malloc+0x9c>
    2678:	90 93 5f 02 	sts	0x025F, r25
    267c:	80 93 5e 02 	sts	0x025E, r24
    2680:	27 c0       	rjmp	.+78     	; 0x26d0 <malloc+0x9c>
    2682:	21 15       	cp	r18, r1
    2684:	31 05       	cpc	r19, r1
    2686:	31 f0       	breq	.+12     	; 0x2694 <malloc+0x60>
    2688:	42 17       	cp	r20, r18
    268a:	53 07       	cpc	r21, r19
    268c:	18 f0       	brcs	.+6      	; 0x2694 <malloc+0x60>
    268e:	a9 01       	movw	r20, r18
    2690:	db 01       	movw	r26, r22
    2692:	01 c0       	rjmp	.+2      	; 0x2696 <malloc+0x62>
    2694:	ef 01       	movw	r28, r30
    2696:	9a 01       	movw	r18, r20
    2698:	bd 01       	movw	r22, r26
    269a:	df 01       	movw	r26, r30
    269c:	02 80       	ldd	r0, Z+2	; 0x02
    269e:	f3 81       	ldd	r31, Z+3	; 0x03
    26a0:	e0 2d       	mov	r30, r0
    26a2:	d7 cf       	rjmp	.-82     	; 0x2652 <malloc+0x1e>
    26a4:	21 15       	cp	r18, r1
    26a6:	31 05       	cpc	r19, r1
    26a8:	f9 f0       	breq	.+62     	; 0x26e8 <malloc+0xb4>
    26aa:	28 1b       	sub	r18, r24
    26ac:	39 0b       	sbc	r19, r25
    26ae:	24 30       	cpi	r18, 0x04	; 4
    26b0:	31 05       	cpc	r19, r1
    26b2:	80 f4       	brcc	.+32     	; 0x26d4 <malloc+0xa0>
    26b4:	8a 81       	ldd	r24, Y+2	; 0x02
    26b6:	9b 81       	ldd	r25, Y+3	; 0x03
    26b8:	61 15       	cp	r22, r1
    26ba:	71 05       	cpc	r23, r1
    26bc:	21 f0       	breq	.+8      	; 0x26c6 <malloc+0x92>
    26be:	fb 01       	movw	r30, r22
    26c0:	93 83       	std	Z+3, r25	; 0x03
    26c2:	82 83       	std	Z+2, r24	; 0x02
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <malloc+0x9a>
    26c6:	90 93 5f 02 	sts	0x025F, r25
    26ca:	80 93 5e 02 	sts	0x025E, r24
    26ce:	fe 01       	movw	r30, r28
    26d0:	32 96       	adiw	r30, 0x02	; 2
    26d2:	44 c0       	rjmp	.+136    	; 0x275c <malloc+0x128>
    26d4:	fe 01       	movw	r30, r28
    26d6:	e2 0f       	add	r30, r18
    26d8:	f3 1f       	adc	r31, r19
    26da:	81 93       	st	Z+, r24
    26dc:	91 93       	st	Z+, r25
    26de:	22 50       	subi	r18, 0x02	; 2
    26e0:	31 09       	sbc	r19, r1
    26e2:	39 83       	std	Y+1, r19	; 0x01
    26e4:	28 83       	st	Y, r18
    26e6:	3a c0       	rjmp	.+116    	; 0x275c <malloc+0x128>
    26e8:	20 91 5c 02 	lds	r18, 0x025C
    26ec:	30 91 5d 02 	lds	r19, 0x025D
    26f0:	23 2b       	or	r18, r19
    26f2:	41 f4       	brne	.+16     	; 0x2704 <malloc+0xd0>
    26f4:	20 91 02 01 	lds	r18, 0x0102
    26f8:	30 91 03 01 	lds	r19, 0x0103
    26fc:	30 93 5d 02 	sts	0x025D, r19
    2700:	20 93 5c 02 	sts	0x025C, r18
    2704:	20 91 00 01 	lds	r18, 0x0100
    2708:	30 91 01 01 	lds	r19, 0x0101
    270c:	21 15       	cp	r18, r1
    270e:	31 05       	cpc	r19, r1
    2710:	41 f4       	brne	.+16     	; 0x2722 <malloc+0xee>
    2712:	2d b7       	in	r18, 0x3d	; 61
    2714:	3e b7       	in	r19, 0x3e	; 62
    2716:	40 91 04 01 	lds	r20, 0x0104
    271a:	50 91 05 01 	lds	r21, 0x0105
    271e:	24 1b       	sub	r18, r20
    2720:	35 0b       	sbc	r19, r21
    2722:	e0 91 5c 02 	lds	r30, 0x025C
    2726:	f0 91 5d 02 	lds	r31, 0x025D
    272a:	e2 17       	cp	r30, r18
    272c:	f3 07       	cpc	r31, r19
    272e:	a0 f4       	brcc	.+40     	; 0x2758 <malloc+0x124>
    2730:	2e 1b       	sub	r18, r30
    2732:	3f 0b       	sbc	r19, r31
    2734:	28 17       	cp	r18, r24
    2736:	39 07       	cpc	r19, r25
    2738:	78 f0       	brcs	.+30     	; 0x2758 <malloc+0x124>
    273a:	ac 01       	movw	r20, r24
    273c:	4e 5f       	subi	r20, 0xFE	; 254
    273e:	5f 4f       	sbci	r21, 0xFF	; 255
    2740:	24 17       	cp	r18, r20
    2742:	35 07       	cpc	r19, r21
    2744:	48 f0       	brcs	.+18     	; 0x2758 <malloc+0x124>
    2746:	4e 0f       	add	r20, r30
    2748:	5f 1f       	adc	r21, r31
    274a:	50 93 5d 02 	sts	0x025D, r21
    274e:	40 93 5c 02 	sts	0x025C, r20
    2752:	81 93       	st	Z+, r24
    2754:	91 93       	st	Z+, r25
    2756:	02 c0       	rjmp	.+4      	; 0x275c <malloc+0x128>
    2758:	e0 e0       	ldi	r30, 0x00	; 0
    275a:	f0 e0       	ldi	r31, 0x00	; 0
    275c:	cf 01       	movw	r24, r30
    275e:	df 91       	pop	r29
    2760:	cf 91       	pop	r28
    2762:	08 95       	ret

00002764 <free>:
    2764:	cf 93       	push	r28
    2766:	df 93       	push	r29
    2768:	00 97       	sbiw	r24, 0x00	; 0
    276a:	09 f4       	brne	.+2      	; 0x276e <free+0xa>
    276c:	87 c0       	rjmp	.+270    	; 0x287c <free+0x118>
    276e:	fc 01       	movw	r30, r24
    2770:	32 97       	sbiw	r30, 0x02	; 2
    2772:	13 82       	std	Z+3, r1	; 0x03
    2774:	12 82       	std	Z+2, r1	; 0x02
    2776:	c0 91 5e 02 	lds	r28, 0x025E
    277a:	d0 91 5f 02 	lds	r29, 0x025F
    277e:	20 97       	sbiw	r28, 0x00	; 0
    2780:	81 f4       	brne	.+32     	; 0x27a2 <free+0x3e>
    2782:	20 81       	ld	r18, Z
    2784:	31 81       	ldd	r19, Z+1	; 0x01
    2786:	28 0f       	add	r18, r24
    2788:	39 1f       	adc	r19, r25
    278a:	80 91 5c 02 	lds	r24, 0x025C
    278e:	90 91 5d 02 	lds	r25, 0x025D
    2792:	82 17       	cp	r24, r18
    2794:	93 07       	cpc	r25, r19
    2796:	79 f5       	brne	.+94     	; 0x27f6 <free+0x92>
    2798:	f0 93 5d 02 	sts	0x025D, r31
    279c:	e0 93 5c 02 	sts	0x025C, r30
    27a0:	6d c0       	rjmp	.+218    	; 0x287c <free+0x118>
    27a2:	de 01       	movw	r26, r28
    27a4:	20 e0       	ldi	r18, 0x00	; 0
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	ae 17       	cp	r26, r30
    27aa:	bf 07       	cpc	r27, r31
    27ac:	50 f4       	brcc	.+20     	; 0x27c2 <free+0x5e>
    27ae:	12 96       	adiw	r26, 0x02	; 2
    27b0:	4d 91       	ld	r20, X+
    27b2:	5c 91       	ld	r21, X
    27b4:	13 97       	sbiw	r26, 0x03	; 3
    27b6:	9d 01       	movw	r18, r26
    27b8:	41 15       	cp	r20, r1
    27ba:	51 05       	cpc	r21, r1
    27bc:	09 f1       	breq	.+66     	; 0x2800 <free+0x9c>
    27be:	da 01       	movw	r26, r20
    27c0:	f3 cf       	rjmp	.-26     	; 0x27a8 <free+0x44>
    27c2:	b3 83       	std	Z+3, r27	; 0x03
    27c4:	a2 83       	std	Z+2, r26	; 0x02
    27c6:	40 81       	ld	r20, Z
    27c8:	51 81       	ldd	r21, Z+1	; 0x01
    27ca:	84 0f       	add	r24, r20
    27cc:	95 1f       	adc	r25, r21
    27ce:	8a 17       	cp	r24, r26
    27d0:	9b 07       	cpc	r25, r27
    27d2:	71 f4       	brne	.+28     	; 0x27f0 <free+0x8c>
    27d4:	8d 91       	ld	r24, X+
    27d6:	9c 91       	ld	r25, X
    27d8:	11 97       	sbiw	r26, 0x01	; 1
    27da:	84 0f       	add	r24, r20
    27dc:	95 1f       	adc	r25, r21
    27de:	02 96       	adiw	r24, 0x02	; 2
    27e0:	91 83       	std	Z+1, r25	; 0x01
    27e2:	80 83       	st	Z, r24
    27e4:	12 96       	adiw	r26, 0x02	; 2
    27e6:	8d 91       	ld	r24, X+
    27e8:	9c 91       	ld	r25, X
    27ea:	13 97       	sbiw	r26, 0x03	; 3
    27ec:	93 83       	std	Z+3, r25	; 0x03
    27ee:	82 83       	std	Z+2, r24	; 0x02
    27f0:	21 15       	cp	r18, r1
    27f2:	31 05       	cpc	r19, r1
    27f4:	29 f4       	brne	.+10     	; 0x2800 <free+0x9c>
    27f6:	f0 93 5f 02 	sts	0x025F, r31
    27fa:	e0 93 5e 02 	sts	0x025E, r30
    27fe:	3e c0       	rjmp	.+124    	; 0x287c <free+0x118>
    2800:	d9 01       	movw	r26, r18
    2802:	13 96       	adiw	r26, 0x03	; 3
    2804:	fc 93       	st	X, r31
    2806:	ee 93       	st	-X, r30
    2808:	12 97       	sbiw	r26, 0x02	; 2
    280a:	4d 91       	ld	r20, X+
    280c:	5d 91       	ld	r21, X+
    280e:	a4 0f       	add	r26, r20
    2810:	b5 1f       	adc	r27, r21
    2812:	ea 17       	cp	r30, r26
    2814:	fb 07       	cpc	r31, r27
    2816:	79 f4       	brne	.+30     	; 0x2836 <free+0xd2>
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	84 0f       	add	r24, r20
    281e:	95 1f       	adc	r25, r21
    2820:	02 96       	adiw	r24, 0x02	; 2
    2822:	d9 01       	movw	r26, r18
    2824:	11 96       	adiw	r26, 0x01	; 1
    2826:	9c 93       	st	X, r25
    2828:	8e 93       	st	-X, r24
    282a:	82 81       	ldd	r24, Z+2	; 0x02
    282c:	93 81       	ldd	r25, Z+3	; 0x03
    282e:	13 96       	adiw	r26, 0x03	; 3
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24
    2834:	12 97       	sbiw	r26, 0x02	; 2
    2836:	e0 e0       	ldi	r30, 0x00	; 0
    2838:	f0 e0       	ldi	r31, 0x00	; 0
    283a:	8a 81       	ldd	r24, Y+2	; 0x02
    283c:	9b 81       	ldd	r25, Y+3	; 0x03
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	19 f0       	breq	.+6      	; 0x2848 <free+0xe4>
    2842:	fe 01       	movw	r30, r28
    2844:	ec 01       	movw	r28, r24
    2846:	f9 cf       	rjmp	.-14     	; 0x283a <free+0xd6>
    2848:	ce 01       	movw	r24, r28
    284a:	02 96       	adiw	r24, 0x02	; 2
    284c:	28 81       	ld	r18, Y
    284e:	39 81       	ldd	r19, Y+1	; 0x01
    2850:	82 0f       	add	r24, r18
    2852:	93 1f       	adc	r25, r19
    2854:	20 91 5c 02 	lds	r18, 0x025C
    2858:	30 91 5d 02 	lds	r19, 0x025D
    285c:	28 17       	cp	r18, r24
    285e:	39 07       	cpc	r19, r25
    2860:	69 f4       	brne	.+26     	; 0x287c <free+0x118>
    2862:	30 97       	sbiw	r30, 0x00	; 0
    2864:	29 f4       	brne	.+10     	; 0x2870 <free+0x10c>
    2866:	10 92 5f 02 	sts	0x025F, r1
    286a:	10 92 5e 02 	sts	0x025E, r1
    286e:	02 c0       	rjmp	.+4      	; 0x2874 <free+0x110>
    2870:	13 82       	std	Z+3, r1	; 0x03
    2872:	12 82       	std	Z+2, r1	; 0x02
    2874:	d0 93 5d 02 	sts	0x025D, r29
    2878:	c0 93 5c 02 	sts	0x025C, r28
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	08 95       	ret

00002882 <memset>:
    2882:	dc 01       	movw	r26, r24
    2884:	01 c0       	rjmp	.+2      	; 0x2888 <memset+0x6>
    2886:	6d 93       	st	X+, r22
    2888:	41 50       	subi	r20, 0x01	; 1
    288a:	50 40       	sbci	r21, 0x00	; 0
    288c:	e0 f7       	brcc	.-8      	; 0x2886 <memset+0x4>
    288e:	08 95       	ret

00002890 <_exit>:
    2890:	f8 94       	cli

00002892 <__stop_program>:
    2892:	ff cf       	rjmp	.-2      	; 0x2892 <__stop_program>
