
Node_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800200  00000e72  00000f06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000e72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000011  00800234  00800234  00000f3a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000f3a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001c0  00000000  00000000  00000f96  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000146a  00000000  00000000  00001156  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aba  00000000  00000000  000025c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d05  00000000  00000000  0000307a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ac  00000000  00000000  00003d80  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cb  00000000  00000000  0000412c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000875  00000000  00000000  000045f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00004e6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	8e c0       	rjmp	.+284    	; 0x122 <__bad_interrupt>
   6:	00 00       	nop
   8:	8c c0       	rjmp	.+280    	; 0x122 <__bad_interrupt>
   a:	00 00       	nop
   c:	8a c0       	rjmp	.+276    	; 0x122 <__bad_interrupt>
   e:	00 00       	nop
  10:	88 c0       	rjmp	.+272    	; 0x122 <__bad_interrupt>
  12:	00 00       	nop
  14:	86 c0       	rjmp	.+268    	; 0x122 <__bad_interrupt>
  16:	00 00       	nop
  18:	84 c0       	rjmp	.+264    	; 0x122 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	82 c0       	rjmp	.+260    	; 0x122 <__bad_interrupt>
  1e:	00 00       	nop
  20:	80 c0       	rjmp	.+256    	; 0x122 <__bad_interrupt>
  22:	00 00       	nop
  24:	7e c0       	rjmp	.+252    	; 0x122 <__bad_interrupt>
  26:	00 00       	nop
  28:	7c c0       	rjmp	.+248    	; 0x122 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	7a c0       	rjmp	.+244    	; 0x122 <__bad_interrupt>
  2e:	00 00       	nop
  30:	78 c0       	rjmp	.+240    	; 0x122 <__bad_interrupt>
  32:	00 00       	nop
  34:	76 c0       	rjmp	.+236    	; 0x122 <__bad_interrupt>
  36:	00 00       	nop
  38:	74 c0       	rjmp	.+232    	; 0x122 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	72 c0       	rjmp	.+228    	; 0x122 <__bad_interrupt>
  3e:	00 00       	nop
  40:	70 c0       	rjmp	.+224    	; 0x122 <__bad_interrupt>
  42:	00 00       	nop
  44:	6e c0       	rjmp	.+220    	; 0x122 <__bad_interrupt>
  46:	00 00       	nop
  48:	6c c0       	rjmp	.+216    	; 0x122 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	6a c0       	rjmp	.+212    	; 0x122 <__bad_interrupt>
  4e:	00 00       	nop
  50:	68 c0       	rjmp	.+208    	; 0x122 <__bad_interrupt>
  52:	00 00       	nop
  54:	66 c0       	rjmp	.+204    	; 0x122 <__bad_interrupt>
  56:	00 00       	nop
  58:	64 c0       	rjmp	.+200    	; 0x122 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	62 c0       	rjmp	.+196    	; 0x122 <__bad_interrupt>
  5e:	00 00       	nop
  60:	60 c0       	rjmp	.+192    	; 0x122 <__bad_interrupt>
  62:	00 00       	nop
  64:	5e c0       	rjmp	.+188    	; 0x122 <__bad_interrupt>
  66:	00 00       	nop
  68:	5c c0       	rjmp	.+184    	; 0x122 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	5a c0       	rjmp	.+180    	; 0x122 <__bad_interrupt>
  6e:	00 00       	nop
  70:	58 c0       	rjmp	.+176    	; 0x122 <__bad_interrupt>
  72:	00 00       	nop
  74:	56 c0       	rjmp	.+172    	; 0x122 <__bad_interrupt>
  76:	00 00       	nop
  78:	54 c0       	rjmp	.+168    	; 0x122 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	52 c0       	rjmp	.+164    	; 0x122 <__bad_interrupt>
  7e:	00 00       	nop
  80:	5a c2       	rjmp	.+1204   	; 0x536 <__vector_32>
  82:	00 00       	nop
  84:	4e c0       	rjmp	.+156    	; 0x122 <__bad_interrupt>
  86:	00 00       	nop
  88:	4c c0       	rjmp	.+152    	; 0x122 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	4a c0       	rjmp	.+148    	; 0x122 <__bad_interrupt>
  8e:	00 00       	nop
  90:	48 c0       	rjmp	.+144    	; 0x122 <__bad_interrupt>
  92:	00 00       	nop
  94:	46 c0       	rjmp	.+140    	; 0x122 <__bad_interrupt>
  96:	00 00       	nop
  98:	44 c0       	rjmp	.+136    	; 0x122 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	42 c0       	rjmp	.+132    	; 0x122 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	40 c0       	rjmp	.+128    	; 0x122 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	3e c0       	rjmp	.+124    	; 0x122 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	3c c0       	rjmp	.+120    	; 0x122 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	3a c0       	rjmp	.+116    	; 0x122 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	38 c0       	rjmp	.+112    	; 0x122 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	36 c0       	rjmp	.+108    	; 0x122 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	34 c0       	rjmp	.+104    	; 0x122 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	32 c0       	rjmp	.+100    	; 0x122 <__bad_interrupt>
  be:	00 00       	nop
  c0:	30 c0       	rjmp	.+96     	; 0x122 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	2e c0       	rjmp	.+92     	; 0x122 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	2c c0       	rjmp	.+88     	; 0x122 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	2a c0       	rjmp	.+84     	; 0x122 <__bad_interrupt>
  ce:	00 00       	nop
  d0:	28 c0       	rjmp	.+80     	; 0x122 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	26 c0       	rjmp	.+76     	; 0x122 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	24 c0       	rjmp	.+72     	; 0x122 <__bad_interrupt>
  da:	00 00       	nop
  dc:	22 c0       	rjmp	.+68     	; 0x122 <__bad_interrupt>
  de:	00 00       	nop
  e0:	20 c0       	rjmp	.+64     	; 0x122 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e2 e7       	ldi	r30, 0x72	; 114
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 33       	cpi	r26, 0x34	; 52
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	22 e0       	ldi	r18, 0x02	; 2
 110:	a4 e3       	ldi	r26, 0x34	; 52
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	a5 34       	cpi	r26, 0x45	; 69
 11a:	b2 07       	cpc	r27, r18
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	75 d1       	rcall	.+746    	; 0x40a <main>
 120:	a6 c6       	rjmp	.+3404   	; 0xe6e <_exit>

00000122 <__bad_interrupt>:
 122:	6e cf       	rjmp	.-292    	; 0x0 <__vectors>

00000124 <CAN_init>:




CAN_init(){
	MCP2515_init();
 124:	69 d1       	rcall	.+722    	; 0x3f8 <MCP2515_init>
	MCP2515_bitModify(MCP_CANCTRL, 0b11100000, MODE_NORMAL); 
 126:	40 e0       	ldi	r20, 0x00	; 0
 128:	60 ee       	ldi	r22, 0xE0	; 224
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	3f c1       	rjmp	.+638    	; 0x3ac <MCP2515_bitModify>
 12e:	08 95       	ret

00000130 <Can_CAN_receive>:
	}
	MCP2515_bitModify(CANINTF, 0b00000001, 0);
}

void Can_CAN_receive(){
	uint8_t intf = MCP2515_read(CANINTF);
 130:	8c e2       	ldi	r24, 0x2C	; 44
 132:	29 d1       	rcall	.+594    	; 0x386 <MCP2515_read>
	while ((intf & 0b00000011) == 0) {
 134:	83 70       	andi	r24, 0x03	; 3
 136:	21 f4       	brne	.+8      	; 0x140 <Can_CAN_receive+0x10>
		intf = MCP2515_read(CANINTF);
 138:	8c e2       	ldi	r24, 0x2C	; 44
 13a:	25 d1       	rcall	.+586    	; 0x386 <MCP2515_read>
	MCP2515_bitModify(CANINTF, 0b00000001, 0);
}

void Can_CAN_receive(){
	uint8_t intf = MCP2515_read(CANINTF);
	while ((intf & 0b00000011) == 0) {
 13c:	83 70       	andi	r24, 0x03	; 3
 13e:	e1 f3       	breq	.-8      	; 0x138 <Can_CAN_receive+0x8>
 140:	08 95       	ret

00000142 <CAN_message_recieve>:
	}
	MCP2515_requestToSend(MCP_RTS_TX0);
	
}

void CAN_message_recieve(CAN_message *msg){
 142:	ff 92       	push	r15
 144:	0f 93       	push	r16
 146:	1f 93       	push	r17
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	1f 92       	push	r1
 14e:	cd b7       	in	r28, 0x3d	; 61
 150:	de b7       	in	r29, 0x3e	; 62
 152:	8c 01       	movw	r16, r24
	Can_CAN_receive();
 154:	ed df       	rcall	.-38     	; 0x130 <Can_CAN_receive>
	volatile uint8_t intf = MCP2515_read(CANINTF);
 156:	8c e2       	ldi	r24, 0x2C	; 44
 158:	16 d1       	rcall	.+556    	; 0x386 <MCP2515_read>
 15a:	89 83       	std	Y+1, r24	; 0x01
	msg->id= MCP2515_read(MCP_RXB0SIDH);
 15c:	81 e6       	ldi	r24, 0x61	; 97
 15e:	13 d1       	rcall	.+550    	; 0x386 <MCP2515_read>
 160:	90 e0       	ldi	r25, 0x00	; 0
 162:	f8 01       	movw	r30, r16
 164:	91 83       	std	Z+1, r25	; 0x01
 166:	80 83       	st	Z, r24
	msg->length=MCP2515_read(MCP_RXB0DLC);
 168:	85 e6       	ldi	r24, 0x65	; 101
 16a:	0d d1       	rcall	.+538    	; 0x386 <MCP2515_read>
 16c:	f8 01       	movw	r30, r16
 16e:	82 83       	std	Z+2, r24	; 0x02
	for(uint8_t i =0; i < msg->length;i++){
 170:	88 23       	and	r24, r24
 172:	69 f0       	breq	.+26     	; 0x18e <CAN_message_recieve+0x4c>
 174:	f1 2c       	mov	r15, r1
		msg->data[i]=MCP2515_read(MCP_RXB0D0 + i);
 176:	86 e6       	ldi	r24, 0x66	; 102
 178:	8f 0d       	add	r24, r15
 17a:	05 d1       	rcall	.+522    	; 0x386 <MCP2515_read>
 17c:	f8 01       	movw	r30, r16
 17e:	ef 0d       	add	r30, r15
 180:	f1 1d       	adc	r31, r1
 182:	83 83       	std	Z+3, r24	; 0x03
void CAN_message_recieve(CAN_message *msg){
	Can_CAN_receive();
	volatile uint8_t intf = MCP2515_read(CANINTF);
	msg->id= MCP2515_read(MCP_RXB0SIDH);
	msg->length=MCP2515_read(MCP_RXB0DLC);
	for(uint8_t i =0; i < msg->length;i++){
 184:	f3 94       	inc	r15
 186:	f8 01       	movw	r30, r16
 188:	82 81       	ldd	r24, Z+2	; 0x02
 18a:	f8 16       	cp	r15, r24
 18c:	a0 f3       	brcs	.-24     	; 0x176 <CAN_message_recieve+0x34>
		msg->data[i]=MCP2515_read(MCP_RXB0D0 + i);
	}
	MCP2515_bitModify(CANINTF, 0b00000001, 0);
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	8c e2       	ldi	r24, 0x2C	; 44
 194:	0b d1       	rcall	.+534    	; 0x3ac <MCP2515_bitModify>
}
 196:	0f 90       	pop	r0
 198:	df 91       	pop	r29
 19a:	cf 91       	pop	r28
 19c:	1f 91       	pop	r17
 19e:	0f 91       	pop	r16
 1a0:	ff 90       	pop	r15
 1a2:	08 95       	ret

000001a4 <message_decoder>:
 */ 
#include "CAN_message_decoder.h"
#include "joystick.h"


void message_decoder(CAN_message message){
 1a4:	ef 92       	push	r14
 1a6:	ff 92       	push	r15
 1a8:	0f 93       	push	r16
 1aa:	1f 93       	push	r17
 1ac:	cf 93       	push	r28
 1ae:	df 93       	push	r29
 1b0:	cd b7       	in	r28, 0x3d	; 61
 1b2:	de b7       	in	r29, 0x3e	; 62
 1b4:	2b 97       	sbiw	r28, 0x0b	; 11
 1b6:	0f b6       	in	r0, 0x3f	; 63
 1b8:	f8 94       	cli
 1ba:	de bf       	out	0x3e, r29	; 62
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	cd bf       	out	0x3d, r28	; 61
 1c0:	e9 82       	std	Y+1, r14	; 0x01
 1c2:	fa 82       	std	Y+2, r15	; 0x02
 1c4:	0b 83       	std	Y+3, r16	; 0x03
 1c6:	1c 83       	std	Y+4, r17	; 0x04
 1c8:	2d 83       	std	Y+5, r18	; 0x05
 1ca:	3e 83       	std	Y+6, r19	; 0x06
 1cc:	4f 83       	std	Y+7, r20	; 0x07
 1ce:	58 87       	std	Y+8, r21	; 0x08
 1d0:	69 87       	std	Y+9, r22	; 0x09
 1d2:	7a 87       	std	Y+10, r23	; 0x0a
 1d4:	8b 87       	std	Y+11, r24	; 0x0b
	switch (message.id) {
 1d6:	89 81       	ldd	r24, Y+1	; 0x01
 1d8:	9a 81       	ldd	r25, Y+2	; 0x02
 1da:	85 30       	cpi	r24, 0x05	; 5
 1dc:	91 05       	cpc	r25, r1
 1de:	18 f4       	brcc	.+6      	; 0x1e6 <message_decoder+0x42>
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	20 f0       	brcs	.+8      	; 0x1ec <message_decoder+0x48>
 1e4:	2f c0       	rjmp	.+94     	; 0x244 <message_decoder+0xa0>
 1e6:	05 97       	sbiw	r24, 0x05	; 5
 1e8:	d1 f0       	breq	.+52     	; 0x21e <message_decoder+0x7a>
 1ea:	25 c0       	rjmp	.+74     	; 0x236 <message_decoder+0x92>
		case JOYSTICK: 
		set_servo_x_value(message);
 1ec:	e9 80       	ldd	r14, Y+1	; 0x01
 1ee:	fa 80       	ldd	r15, Y+2	; 0x02
 1f0:	0b 81       	ldd	r16, Y+3	; 0x03
 1f2:	1c 81       	ldd	r17, Y+4	; 0x04
 1f4:	2d 81       	ldd	r18, Y+5	; 0x05
 1f6:	3e 81       	ldd	r19, Y+6	; 0x06
 1f8:	4f 81       	ldd	r20, Y+7	; 0x07
 1fa:	58 85       	ldd	r21, Y+8	; 0x08
 1fc:	69 85       	ldd	r22, Y+9	; 0x09
 1fe:	7a 85       	ldd	r23, Y+10	; 0x0a
 200:	8b 85       	ldd	r24, Y+11	; 0x0b
 202:	94 d0       	rcall	.+296    	; 0x32c <set_servo_x_value>
		print_joy_pos(message);
 204:	e9 80       	ldd	r14, Y+1	; 0x01
 206:	fa 80       	ldd	r15, Y+2	; 0x02
 208:	0b 81       	ldd	r16, Y+3	; 0x03
 20a:	1c 81       	ldd	r17, Y+4	; 0x04
 20c:	2d 81       	ldd	r18, Y+5	; 0x05
 20e:	3e 81       	ldd	r19, Y+6	; 0x06
 210:	4f 81       	ldd	r20, Y+7	; 0x07
 212:	58 85       	ldd	r21, Y+8	; 0x08
 214:	69 85       	ldd	r22, Y+9	; 0x09
 216:	7a 85       	ldd	r23, Y+10	; 0x0a
 218:	8b 85       	ldd	r24, Y+11	; 0x0b
 21a:	58 d0       	rcall	.+176    	; 0x2cc <print_joy_pos>
		break;
 21c:	13 c0       	rjmp	.+38     	; 0x244 <message_decoder+0xa0>
		
		case RIGHTBUTTON:
		break;
		
		case JOYSTICK_INIT:
		initialPosition = calibrate(&message);
 21e:	ce 01       	movw	r24, r28
 220:	01 96       	adiw	r24, 0x01	; 1
 222:	1d d0       	rcall	.+58     	; 0x25e <calibrate>
 224:	60 93 37 02 	sts	0x0237, r22
 228:	70 93 38 02 	sts	0x0238, r23
 22c:	80 93 39 02 	sts	0x0239, r24
 230:	90 93 3a 02 	sts	0x023A, r25
		break;
 234:	07 c0       	rjmp	.+14     	; 0x244 <message_decoder+0xa0>
		
		default:
		printf("ID invalid");
 236:	86 e0       	ldi	r24, 0x06	; 6
 238:	92 e0       	ldi	r25, 0x02	; 2
 23a:	9f 93       	push	r25
 23c:	8f 93       	push	r24
 23e:	2a d2       	rcall	.+1108   	; 0x694 <printf>
		break;
 240:	0f 90       	pop	r0
 242:	0f 90       	pop	r0
	}
	
}
 244:	2b 96       	adiw	r28, 0x0b	; 11
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	f8 94       	cli
 24a:	de bf       	out	0x3e, r29	; 62
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	cd bf       	out	0x3d, r28	; 61
 250:	df 91       	pop	r29
 252:	cf 91       	pop	r28
 254:	1f 91       	pop	r17
 256:	0f 91       	pop	r16
 258:	ff 90       	pop	r15
 25a:	ef 90       	pop	r14
 25c:	08 95       	ret

0000025e <calibrate>:
#include "joystick.h"
#include "PWM_TIMER.h"
Joy_pos calibrate(CAN_message *msg){
	Joy_pos newPos;
	newPos.x = msg->data[0];
	newPos.y = msg->data[1];
 25e:	fc 01       	movw	r30, r24
 260:	24 81       	ldd	r18, Z+4	; 0x04
 */ 
#include "joystick.h"
#include "PWM_TIMER.h"
Joy_pos calibrate(CAN_message *msg){
	Joy_pos newPos;
	newPos.x = msg->data[0];
 262:	33 81       	ldd	r19, Z+3	; 0x03
	newPos.y = msg->data[1];
	return newPos;
 264:	63 2f       	mov	r22, r19
 266:	70 e0       	ldi	r23, 0x00	; 0
 268:	82 2f       	mov	r24, r18
 26a:	90 e0       	ldi	r25, 0x00	; 0
}
 26c:	08 95       	ret

0000026e <convertjoyPos>:
	position.y = msg.data[2];
	position = convertjoyPos(position);
	printf("direction: %c xpos: %d ypos: %d \n", direction, position.x, position.y);	
}

Joy_pos convertjoyPos(Joy_pos pos){
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	8b 01       	movw	r16, r22
 27a:	9c 01       	movw	r18, r24
	Joy_pos position;
	position.x = pos.x - initialPosition.x;
 27c:	e0 91 37 02 	lds	r30, 0x0237
 280:	f0 91 38 02 	lds	r31, 0x0238
	position.x *= 100;
	position.x /= initialPosition.x;
	   
	position.y = pos.y - initialPosition.y;
 284:	60 91 39 02 	lds	r22, 0x0239
 288:	70 91 3a 02 	lds	r23, 0x023A
 28c:	a9 01       	movw	r20, r18
 28e:	46 1b       	sub	r20, r22
 290:	57 0b       	sbc	r21, r23
	position.y *= 100;
 292:	0f 2e       	mov	r0, r31
 294:	f4 e6       	ldi	r31, 0x64	; 100
 296:	ff 2e       	mov	r15, r31
 298:	f0 2d       	mov	r31, r0
 29a:	f4 9e       	mul	r15, r20
 29c:	c0 01       	movw	r24, r0
 29e:	f5 9e       	mul	r15, r21
 2a0:	90 0d       	add	r25, r0
 2a2:	11 24       	eor	r1, r1
	position.y /= initialPosition.y;
 2a4:	86 d1       	rcall	.+780    	; 0x5b2 <__divmodhi4>
 2a6:	eb 01       	movw	r28, r22
	printf("direction: %c xpos: %d ypos: %d \n", direction, position.x, position.y);	
}

Joy_pos convertjoyPos(Joy_pos pos){
	Joy_pos position;
	position.x = pos.x - initialPosition.x;
 2a8:	0e 1b       	sub	r16, r30
 2aa:	1f 0b       	sbc	r17, r31
	position.x *= 100;
 2ac:	f0 9e       	mul	r15, r16
 2ae:	c0 01       	movw	r24, r0
 2b0:	f1 9e       	mul	r15, r17
 2b2:	90 0d       	add	r25, r0
 2b4:	11 24       	eor	r1, r1
	position.x /= initialPosition.x;
 2b6:	bf 01       	movw	r22, r30
 2b8:	7c d1       	rcall	.+760    	; 0x5b2 <__divmodhi4>
 2ba:	9b 01       	movw	r18, r22
	   
	position.y = pos.y - initialPosition.y;
	position.y *= 100;
	position.y /= initialPosition.y;
	return position;
 2bc:	b9 01       	movw	r22, r18
 2be:	ce 01       	movw	r24, r28
}
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	ff 90       	pop	r15
 2ca:	08 95       	ret

000002cc <print_joy_pos>:
	newPos.y = msg->data[1];
	return newPos;
}


void print_joy_pos(CAN_message msg){
 2cc:	ef 92       	push	r14
 2ce:	ff 92       	push	r15
 2d0:	0f 93       	push	r16
 2d2:	1f 93       	push	r17
 2d4:	cf 93       	push	r28
 2d6:	df 93       	push	r29
 2d8:	cd b7       	in	r28, 0x3d	; 61
 2da:	de b7       	in	r29, 0x3e	; 62
 2dc:	2b 97       	sbiw	r28, 0x0b	; 11
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	f8 94       	cli
 2e2:	de bf       	out	0x3e, r29	; 62
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	cd bf       	out	0x3d, r28	; 61
 2e8:	83 2f       	mov	r24, r19
	Joy_pos position;
	DIR direction = msg.data[0];
	position.x = msg.data[1];
 2ea:	62 2f       	mov	r22, r18
	position.y = msg.data[2];
	position = convertjoyPos(position);
 2ec:	70 e0       	ldi	r23, 0x00	; 0
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	be df       	rcall	.-132    	; 0x26e <convertjoyPos>
	printf("direction: %c xpos: %d ypos: %d \n", direction, position.x, position.y);	
 2f2:	9f 93       	push	r25
 2f4:	8f 93       	push	r24
 2f6:	7f 93       	push	r23
 2f8:	6f 93       	push	r22
 2fa:	1f 92       	push	r1
 2fc:	1f 93       	push	r17
 2fe:	81 e1       	ldi	r24, 0x11	; 17
 300:	92 e0       	ldi	r25, 0x02	; 2
 302:	9f 93       	push	r25
 304:	8f 93       	push	r24
 306:	c6 d1       	rcall	.+908    	; 0x694 <printf>
 308:	0f b6       	in	r0, 0x3f	; 63
 30a:	f8 94       	cli
 30c:	de bf       	out	0x3e, r29	; 62
 30e:	0f be       	out	0x3f, r0	; 63
 310:	cd bf       	out	0x3d, r28	; 61
}
 312:	2b 96       	adiw	r28, 0x0b	; 11
 314:	0f b6       	in	r0, 0x3f	; 63
 316:	f8 94       	cli
 318:	de bf       	out	0x3e, r29	; 62
 31a:	0f be       	out	0x3f, r0	; 63
 31c:	cd bf       	out	0x3d, r28	; 61
 31e:	df 91       	pop	r29
 320:	cf 91       	pop	r28
 322:	1f 91       	pop	r17
 324:	0f 91       	pop	r16
 326:	ff 90       	pop	r15
 328:	ef 90       	pop	r14
 32a:	08 95       	ret

0000032c <set_servo_x_value>:
	position.y *= 100;
	position.y /= initialPosition.y;
	return position;
}

void set_servo_x_value(CAN_message msg){
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	cd b7       	in	r28, 0x3d	; 61
 33a:	de b7       	in	r29, 0x3e	; 62
 33c:	2b 97       	sbiw	r28, 0x0b	; 11
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	f8 94       	cli
 342:	de bf       	out	0x3e, r29	; 62
 344:	0f be       	out	0x3f, r0	; 63
 346:	cd bf       	out	0x3d, r28	; 61
	Joy_pos position;
	position.x = msg.data[1];
	position.y = msg.data[2];
 348:	83 2f       	mov	r24, r19
 34a:	90 e0       	ldi	r25, 0x00	; 0
	position = convertjoyPos(position);
 34c:	62 2f       	mov	r22, r18
 34e:	70 e0       	ldi	r23, 0x00	; 0
 350:	8e df       	rcall	.-228    	; 0x26e <convertjoyPos>
	int width = 3000 + 12*position.x;
 352:	9b 01       	movw	r18, r22
 354:	22 0f       	add	r18, r18
 356:	33 1f       	adc	r19, r19
 358:	62 0f       	add	r22, r18
 35a:	73 1f       	adc	r23, r19
 35c:	cb 01       	movw	r24, r22
 35e:	88 0f       	add	r24, r24
 360:	99 1f       	adc	r25, r25
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
	pwm_set_width(width);
 366:	88 54       	subi	r24, 0x48	; 72
 368:	94 4f       	sbci	r25, 0xF4	; 244
 36a:	a6 d0       	rcall	.+332    	; 0x4b8 <pwm_set_width>
 36c:	2b 96       	adiw	r28, 0x0b	; 11
 36e:	0f b6       	in	r0, 0x3f	; 63
 370:	f8 94       	cli
 372:	de bf       	out	0x3e, r29	; 62
 374:	0f be       	out	0x3f, r0	; 63
 376:	cd bf       	out	0x3d, r28	; 61
 378:	df 91       	pop	r29
 37a:	cf 91       	pop	r28
 37c:	1f 91       	pop	r17
 37e:	0f 91       	pop	r16
 380:	ff 90       	pop	r15
 382:	ef 90       	pop	r14
 384:	08 95       	ret

00000386 <MCP2515_read>:
	SPI_chipSelect(chipLOW);
	SPI_write(MCP_READ_STATUS);
	uint8_t readStatus = MCP2515_read(SPDR);
	SPI_chipSelect(chipHIGH);
	return readStatus;
}
 386:	cf 93       	push	r28
 388:	c8 2f       	mov	r28, r24
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	b4 d0       	rcall	.+360    	; 0x4f8 <SPI_chipSelect>
 390:	83 e0       	ldi	r24, 0x03	; 3
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	9c d0       	rcall	.+312    	; 0x4ce <SPI_write>
 396:	8c 2f       	mov	r24, r28
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	99 d0       	rcall	.+306    	; 0x4ce <SPI_write>
 39c:	9d d0       	rcall	.+314    	; 0x4d8 <SPI_read>
 39e:	c8 2f       	mov	r28, r24
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	a9 d0       	rcall	.+338    	; 0x4f8 <SPI_chipSelect>
 3a6:	8c 2f       	mov	r24, r28
 3a8:	cf 91       	pop	r28
 3aa:	08 95       	ret

000003ac <MCP2515_bitModify>:

void MCP2515_bitModify(uint8_t address ,uint8_t maskByte, uint8_t data){
 3ac:	1f 93       	push	r17
 3ae:	cf 93       	push	r28
 3b0:	df 93       	push	r29
 3b2:	18 2f       	mov	r17, r24
 3b4:	d6 2f       	mov	r29, r22
 3b6:	c4 2f       	mov	r28, r20
	SPI_chipSelect(chipLOW);
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	9d d0       	rcall	.+314    	; 0x4f8 <SPI_chipSelect>
	SPI_write(MCP_BITMOD);
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	85 d0       	rcall	.+266    	; 0x4ce <SPI_write>
	SPI_write(address);
 3c4:	81 2f       	mov	r24, r17
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	82 d0       	rcall	.+260    	; 0x4ce <SPI_write>
	SPI_write(maskByte);
 3ca:	8d 2f       	mov	r24, r29
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	7f d0       	rcall	.+254    	; 0x4ce <SPI_write>
	SPI_write(data);
 3d0:	8c 2f       	mov	r24, r28
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	7c d0       	rcall	.+248    	; 0x4ce <SPI_write>
	SPI_chipSelect(chipHIGH);
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	8e d0       	rcall	.+284    	; 0x4f8 <SPI_chipSelect>
}
 3dc:	df 91       	pop	r29
 3de:	cf 91       	pop	r28
 3e0:	1f 91       	pop	r17
 3e2:	08 95       	ret

000003e4 <MCP2515_reset>:

void MCP2515_reset(){
	SPI_chipSelect(chipLOW);
 3e4:	80 e0       	ldi	r24, 0x00	; 0
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	87 d0       	rcall	.+270    	; 0x4f8 <SPI_chipSelect>
	SPI_write(MCP_RESET);
 3ea:	80 ec       	ldi	r24, 0xC0	; 192
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	6f d0       	rcall	.+222    	; 0x4ce <SPI_write>
	SPI_chipSelect(chipHIGH);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	81 c0       	rjmp	.+258    	; 0x4f8 <SPI_chipSelect>
 3f6:	08 95       	ret

000003f8 <MCP2515_init>:
#define chipLOW 0
#define chipHIGH 1


uint8_t MCP2515_init(){
	SPI_init();
 3f8:	75 d0       	rcall	.+234    	; 0x4e4 <SPI_init>
	MCP2515_reset();
 3fa:	f4 df       	rcall	.-24     	; 0x3e4 <MCP2515_reset>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3fc:	87 ea       	ldi	r24, 0xA7	; 167
 3fe:	91 e6       	ldi	r25, 0x61	; 97
 400:	01 97       	sbiw	r24, 0x01	; 1
 402:	f1 f7       	brne	.-4      	; 0x400 <MCP2515_init+0x8>
 404:	00 c0       	rjmp	.+0      	; 0x406 <MCP2515_init+0xe>
 406:	00 00       	nop
	_delay_ms(100);
	
}
 408:	08 95       	ret

0000040a <main>:

volatile uint8_t timerFlag = 0;

	
int main(void)
{	
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
 412:	2b 97       	sbiw	r28, 0x0b	; 11
 414:	0f b6       	in	r0, 0x3f	; 63
 416:	f8 94       	cli
 418:	de bf       	out	0x3e, r29	; 62
 41a:	0f be       	out	0x3f, r0	; 63
 41c:	cd bf       	out	0x3d, r28	; 61
	set_bit(DDRD, PD3);
 41e:	53 9a       	sbi	0x0a, 3	; 10
	clear_bit(PORTD, PD3);
 420:	5b 98       	cbi	0x0b, 3	; 11
	//set_bit(DDRD, 7); // Read Pin Atmega, output
	//set_bit(DDRE, 1); //Adresse Latch Enable
	//clear_bit(DDRB, 6);
	//clear_bit(DDRB, 7);
	//clear_bit(DDRB, 8);
	USART_init();
 422:	b6 d0       	rcall	.+364    	; 0x590 <USART_init>
	CAN_init();
 424:	7f de       	rcall	.-770    	; 0x124 <CAN_init>
	//
	//printf("fisk\n");
	//_delay_ms(300);
	CAN_message msg;
	pwm_timer_init();
 426:	21 d0       	rcall	.+66     	; 0x46a <pwm_timer_init>
	timer_init(&timerFlag);
 428:	84 e3       	ldi	r24, 0x34	; 52
 42a:	92 e0       	ldi	r25, 0x02	; 2
 42c:	6b d0       	rcall	.+214    	; 0x504 <timer_init>

    while(1)
    {	
		clear_bit(PORTD, PD3);
 42e:	5b 98       	cbi	0x0b, 3	; 11
		if (timerFlag){
 430:	80 91 34 02 	lds	r24, 0x0234
 434:	88 23       	and	r24, r24
 436:	d9 f3       	breq	.-10     	; 0x42e <main+0x24>
			CAN_message_recieve(&msg);
 438:	ce 01       	movw	r24, r28
 43a:	01 96       	adiw	r24, 0x01	; 1
 43c:	82 de       	rcall	.-764    	; 0x142 <CAN_message_recieve>
			message_decoder(msg);
 43e:	e9 80       	ldd	r14, Y+1	; 0x01
 440:	fa 80       	ldd	r15, Y+2	; 0x02
 442:	0b 81       	ldd	r16, Y+3	; 0x03
 444:	1c 81       	ldd	r17, Y+4	; 0x04
 446:	2d 81       	ldd	r18, Y+5	; 0x05
 448:	3e 81       	ldd	r19, Y+6	; 0x06
 44a:	4f 81       	ldd	r20, Y+7	; 0x07
 44c:	58 85       	ldd	r21, Y+8	; 0x08
 44e:	69 85       	ldd	r22, Y+9	; 0x09
 450:	7a 85       	ldd	r23, Y+10	; 0x0a
 452:	8b 85       	ldd	r24, Y+11	; 0x0b
 454:	a7 de       	rcall	.-690    	; 0x1a4 <message_decoder>
			timerFlag = 0;
 456:	10 92 34 02 	sts	0x0234, r1
			set_bit(PORTD, PD3);
 45a:	5b 9a       	sbi	0x0b, 3	; 11
 45c:	81 ee       	ldi	r24, 0xE1	; 225
 45e:	94 e0       	ldi	r25, 0x04	; 4
 460:	01 97       	sbiw	r24, 0x01	; 1
 462:	f1 f7       	brne	.-4      	; 0x460 <main+0x56>
 464:	00 c0       	rjmp	.+0      	; 0x466 <main+0x5c>
 466:	00 00       	nop
 468:	e2 cf       	rjmp	.-60     	; 0x42e <main+0x24>

0000046a <pwm_timer_init>:
#define set_bit(reg, bit ) (reg |= (1 << bit))
#define clear_bit(reg, bit ) (reg &= ~(1 << bit))

void pwm_timer_init(){
	
	set_bit(DDRB, PB5); //setter OC1A pin til output
 46a:	25 9a       	sbi	0x04, 5	; 4
	
	
	set_bit(TCCR1B, WGM13);
 46c:	a1 e8       	ldi	r26, 0x81	; 129
 46e:	b0 e0       	ldi	r27, 0x00	; 0
 470:	8c 91       	ld	r24, X
 472:	80 61       	ori	r24, 0x10	; 16
 474:	8c 93       	st	X, r24
	set_bit(TCCR1B,WGM12);
 476:	8c 91       	ld	r24, X
 478:	88 60       	ori	r24, 0x08	; 8
 47a:	8c 93       	st	X, r24
	set_bit(TCCR1A,WGM11); // SET fast PWM-mode 
 47c:	e0 e8       	ldi	r30, 0x80	; 128
 47e:	f0 e0       	ldi	r31, 0x00	; 0
 480:	80 81       	ld	r24, Z
 482:	82 60       	ori	r24, 0x02	; 2
 484:	80 83       	st	Z, r24
	clear_bit(TCCR1A,WGM10);
 486:	80 81       	ld	r24, Z
 488:	8e 7f       	andi	r24, 0xFE	; 254
 48a:	80 83       	st	Z, r24
	//
	clear_bit(TCCR1A, COM1A0);
 48c:	80 81       	ld	r24, Z
 48e:	8f 7b       	andi	r24, 0xBF	; 191
 490:	80 83       	st	Z, r24
	set_bit(TCCR1A,COM1A1); //Setter non inverted mode...
 492:	80 81       	ld	r24, Z
 494:	80 68       	ori	r24, 0x80	; 128
 496:	80 83       	st	Z, r24
	//
	set_bit(TCCR1B,CS11); //set prescaler 8
 498:	8c 91       	ld	r24, X
 49a:	82 60       	ori	r24, 0x02	; 2
 49c:	8c 93       	st	X, r24
	//
	ICR1 = 40000; //setter periode til 20ms
 49e:	80 e4       	ldi	r24, 0x40	; 64
 4a0:	9c e9       	ldi	r25, 0x9C	; 156
 4a2:	90 93 87 00 	sts	0x0087, r25
 4a6:	80 93 86 00 	sts	0x0086, r24
	OCR1A = 3000; // setter flagg
 4aa:	88 eb       	ldi	r24, 0xB8	; 184
 4ac:	9b e0       	ldi	r25, 0x0B	; 11
 4ae:	90 93 89 00 	sts	0x0089, r25
 4b2:	80 93 88 00 	sts	0x0088, r24
 4b6:	08 95       	ret

000004b8 <pwm_set_width>:
	
}


void pwm_set_width(int width){
	if ((width < 4200) && (width > 1800)){
 4b8:	9c 01       	movw	r18, r24
 4ba:	29 50       	subi	r18, 0x09	; 9
 4bc:	37 40       	sbci	r19, 0x07	; 7
 4be:	2f 35       	cpi	r18, 0x5F	; 95
 4c0:	39 40       	sbci	r19, 0x09	; 9
 4c2:	20 f4       	brcc	.+8      	; 0x4cc <pwm_set_width+0x14>
		OCR1A = width;
 4c4:	90 93 89 00 	sts	0x0089, r25
 4c8:	80 93 88 00 	sts	0x0088, r24
 4cc:	08 95       	ret

000004ce <SPI_write>:


void SPI_write(uint8_t data)
{
	/* Start transmission */
	SPDR = data;
 4ce:	8e bd       	out	0x2e, r24	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)))/* _delay_ms(20)*/;
 4d0:	0d b4       	in	r0, 0x2d	; 45
 4d2:	07 fe       	sbrs	r0, 7
 4d4:	fd cf       	rjmp	.-6      	; 0x4d0 <SPI_write+0x2>

}
 4d6:	08 95       	ret

000004d8 <SPI_read>:


uint8_t SPI_read()
{
	/* Start transmission */
	SPDR = 0x00;
 4d8:	1e bc       	out	0x2e, r1	; 46
	/* Wait for transmission complete */
	while(!(SPSR & (1<<SPIF)));
 4da:	0d b4       	in	r0, 0x2d	; 45
 4dc:	07 fe       	sbrs	r0, 7
 4de:	fd cf       	rjmp	.-6      	; 0x4da <SPI_read+0x2>
	return SPDR;
 4e0:	8e b5       	in	r24, 0x2e	; 46
}
 4e2:	08 95       	ret

000004e4 <SPI_init>:

void SPI_init(){
	
	/* Set MOSI and SCK output, all others input */
	
	set_bit(DDRB, DDB2);
 4e4:	22 9a       	sbi	0x04, 2	; 4
	set_bit(DDRB, DDB1);
 4e6:	21 9a       	sbi	0x04, 1	; 4
	set_bit(DDRB, DDB7); //set chip-select
 4e8:	27 9a       	sbi	0x04, 7	; 4
	set_bit(PORTB, PB3); //internal pull-up
 4ea:	2b 9a       	sbi	0x05, 3	; 5
	clear_bit(DDRB,PB3);
 4ec:	23 98       	cbi	0x04, 3	; 4
	set_bit(DDRB,PB0);
 4ee:	20 9a       	sbi	0x04, 0	; 4
	*/
	
	
	/* Enable SPI, Master, set clock rate fck/16 */
	
	SPCR |= (1<<SPE)|(1<<MSTR); //|(1<<SPR0);
 4f0:	8c b5       	in	r24, 0x2c	; 44
 4f2:	80 65       	ori	r24, 0x50	; 80
 4f4:	8c bd       	out	0x2c, r24	; 44
 4f6:	08 95       	ret

000004f8 <SPI_chipSelect>:
// 	set_bit(PORTB, PB0);
}

void SPI_chipSelect(uint8_t select){
	
	if(select == 0){
 4f8:	81 11       	cpse	r24, r1
 4fa:	02 c0       	rjmp	.+4      	; 0x500 <SPI_chipSelect+0x8>
		clear_bit(PORTB, PB7);
 4fc:	2f 98       	cbi	0x05, 7	; 5
 4fe:	08 95       	ret
	}
	
	else{
		set_bit(PORTB, PB7);
 500:	2f 9a       	sbi	0x05, 7	; 5
 502:	08 95       	ret

00000504 <timer_init>:

uint8_t* flagPtr_ = NULL;

void timer_init(uint8_t* flagPtr)
{
	set_bit(TCCR3B, WGM32);  // SET CTC-mode
 504:	e1 e9       	ldi	r30, 0x91	; 145
 506:	f0 e0       	ldi	r31, 0x00	; 0
 508:	20 81       	ld	r18, Z
 50a:	28 60       	ori	r18, 0x08	; 8
 50c:	20 83       	st	Z, r18
	//set_bit(TCCR3B,COM1A1); //Setter non inverted mode...
	set_bit(TCCR3B,CS11); //set prescaler 8
 50e:	20 81       	ld	r18, Z
 510:	22 60       	ori	r18, 0x02	; 2
 512:	20 83       	st	Z, r18

	uint8_t ms = 20;
	int value = 16000/8;
	value *= ms;
	value -= 1;
	OCR3A = value;
 514:	2f e3       	ldi	r18, 0x3F	; 63
 516:	3c e9       	ldi	r19, 0x9C	; 156
 518:	30 93 99 00 	sts	0x0099, r19
 51c:	20 93 98 00 	sts	0x0098, r18
	
	flagPtr_ = flagPtr;
 520:	90 93 36 02 	sts	0x0236, r25
 524:	80 93 35 02 	sts	0x0235, r24
	
	//interrupt
	set_bit(TIMSK3, OCIE3A);
 528:	e1 e7       	ldi	r30, 0x71	; 113
 52a:	f0 e0       	ldi	r31, 0x00	; 0
 52c:	80 81       	ld	r24, Z
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	80 83       	st	Z, r24

	sei();
 532:	78 94       	sei
 534:	08 95       	ret

00000536 <__vector_32>:
}


ISR(TIMER3_COMPA_vect){
 536:	1f 92       	push	r1
 538:	0f 92       	push	r0
 53a:	0f b6       	in	r0, 0x3f	; 63
 53c:	0f 92       	push	r0
 53e:	11 24       	eor	r1, r1
 540:	0b b6       	in	r0, 0x3b	; 59
 542:	0f 92       	push	r0
 544:	8f 93       	push	r24
 546:	ef 93       	push	r30
 548:	ff 93       	push	r31
	if(flagPtr_ != NULL)
 54a:	e0 91 35 02 	lds	r30, 0x0235
 54e:	f0 91 36 02 	lds	r31, 0x0236
 552:	30 97       	sbiw	r30, 0x00	; 0
 554:	11 f0       	breq	.+4      	; 0x55a <__vector_32+0x24>
		*flagPtr_ = 1;
 556:	81 e0       	ldi	r24, 0x01	; 1
 558:	80 83       	st	Z, r24

	
 	clear_bit(TIFR3, OCF3A);
 55a:	c1 98       	cbi	0x18, 1	; 24
	
 55c:	ff 91       	pop	r31
 55e:	ef 91       	pop	r30
 560:	8f 91       	pop	r24
 562:	0f 90       	pop	r0
 564:	0b be       	out	0x3b, r0	; 59
 566:	0f 90       	pop	r0
 568:	0f be       	out	0x3f, r0	; 63
 56a:	0f 90       	pop	r0
 56c:	1f 90       	pop	r1
 56e:	18 95       	reti

00000570 <USART_receive>:


unsigned char USART_receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSR0A & (1<<RXC0)) )
 570:	e0 ec       	ldi	r30, 0xC0	; 192
 572:	f0 e0       	ldi	r31, 0x00	; 0
 574:	80 81       	ld	r24, Z
 576:	88 23       	and	r24, r24
 578:	ec f7       	brge	.-6      	; 0x574 <USART_receive+0x4>
	;
	/* Get and return received data from buffer */
	return UDR0;
 57a:	80 91 c6 00 	lds	r24, 0x00C6
}
 57e:	08 95       	ret

00000580 <USART_transmit>:


void USART_transmit( uint8_t data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSR0A & (1<<UDRE0)) )
 580:	e0 ec       	ldi	r30, 0xC0	; 192
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	90 81       	ld	r25, Z
 586:	95 ff       	sbrs	r25, 5
 588:	fd cf       	rjmp	.-6      	; 0x584 <USART_transmit+0x4>
	;

	/* Put data into buffer, sends the data */
	UDR0 = data;
 58a:	80 93 c6 00 	sts	0x00C6, r24
 58e:	08 95       	ret

00000590 <USART_init>:
// 		// Kopiert:
	//UBRR0H = (unsigned char) (ubrr>>8);
	//UBRR0L = (unsigned char) ubrr;
// 	0x0CF
  
	UBRR0L = 0x067;	
 590:	87 e6       	ldi	r24, 0x67	; 103
 592:	80 93 c4 00 	sts	0x00C4, r24
	UBRR0H = 0;
 596:	10 92 c5 00 	sts	0x00C5, r1
	// Enabler reciever og transmitter
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 59a:	88 e1       	ldi	r24, 0x18	; 24
 59c:	80 93 c1 00 	sts	0x00C1, r24
	
	// Setter til 1stop-bit | Setter til 8-bit data | Initialiserer aksessering til UCSRC-registeret
	UCSR0C = (0<<USBS0)|(3<<UCSZ00); //(1<<URSEL0)|
 5a0:	86 e0       	ldi	r24, 0x06	; 6
 5a2:	80 93 c2 00 	sts	0x00C2, r24
	
	fdevopen(USART_transmit, USART_receive);
 5a6:	68 eb       	ldi	r22, 0xB8	; 184
 5a8:	72 e0       	ldi	r23, 0x02	; 2
 5aa:	80 ec       	ldi	r24, 0xC0	; 192
 5ac:	92 e0       	ldi	r25, 0x02	; 2
 5ae:	28 c0       	rjmp	.+80     	; 0x600 <fdevopen>
 5b0:	08 95       	ret

000005b2 <__divmodhi4>:
 5b2:	97 fb       	bst	r25, 7
 5b4:	07 2e       	mov	r0, r23
 5b6:	16 f4       	brtc	.+4      	; 0x5bc <__divmodhi4+0xa>
 5b8:	00 94       	com	r0
 5ba:	06 d0       	rcall	.+12     	; 0x5c8 <__divmodhi4_neg1>
 5bc:	77 fd       	sbrc	r23, 7
 5be:	08 d0       	rcall	.+16     	; 0x5d0 <__divmodhi4_neg2>
 5c0:	0b d0       	rcall	.+22     	; 0x5d8 <__udivmodhi4>
 5c2:	07 fc       	sbrc	r0, 7
 5c4:	05 d0       	rcall	.+10     	; 0x5d0 <__divmodhi4_neg2>
 5c6:	3e f4       	brtc	.+14     	; 0x5d6 <__divmodhi4_exit>

000005c8 <__divmodhi4_neg1>:
 5c8:	90 95       	com	r25
 5ca:	81 95       	neg	r24
 5cc:	9f 4f       	sbci	r25, 0xFF	; 255
 5ce:	08 95       	ret

000005d0 <__divmodhi4_neg2>:
 5d0:	70 95       	com	r23
 5d2:	61 95       	neg	r22
 5d4:	7f 4f       	sbci	r23, 0xFF	; 255

000005d6 <__divmodhi4_exit>:
 5d6:	08 95       	ret

000005d8 <__udivmodhi4>:
 5d8:	aa 1b       	sub	r26, r26
 5da:	bb 1b       	sub	r27, r27
 5dc:	51 e1       	ldi	r21, 0x11	; 17
 5de:	07 c0       	rjmp	.+14     	; 0x5ee <__udivmodhi4_ep>

000005e0 <__udivmodhi4_loop>:
 5e0:	aa 1f       	adc	r26, r26
 5e2:	bb 1f       	adc	r27, r27
 5e4:	a6 17       	cp	r26, r22
 5e6:	b7 07       	cpc	r27, r23
 5e8:	10 f0       	brcs	.+4      	; 0x5ee <__udivmodhi4_ep>
 5ea:	a6 1b       	sub	r26, r22
 5ec:	b7 0b       	sbc	r27, r23

000005ee <__udivmodhi4_ep>:
 5ee:	88 1f       	adc	r24, r24
 5f0:	99 1f       	adc	r25, r25
 5f2:	5a 95       	dec	r21
 5f4:	a9 f7       	brne	.-22     	; 0x5e0 <__udivmodhi4_loop>
 5f6:	80 95       	com	r24
 5f8:	90 95       	com	r25
 5fa:	bc 01       	movw	r22, r24
 5fc:	cd 01       	movw	r24, r26
 5fe:	08 95       	ret

00000600 <fdevopen>:
 600:	0f 93       	push	r16
 602:	1f 93       	push	r17
 604:	cf 93       	push	r28
 606:	df 93       	push	r29
 608:	ec 01       	movw	r28, r24
 60a:	8b 01       	movw	r16, r22
 60c:	00 97       	sbiw	r24, 0x00	; 0
 60e:	31 f4       	brne	.+12     	; 0x61c <fdevopen+0x1c>
 610:	61 15       	cp	r22, r1
 612:	71 05       	cpc	r23, r1
 614:	19 f4       	brne	.+6      	; 0x61c <fdevopen+0x1c>
 616:	80 e0       	ldi	r24, 0x00	; 0
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	37 c0       	rjmp	.+110    	; 0x68a <fdevopen+0x8a>
 61c:	6e e0       	ldi	r22, 0x0E	; 14
 61e:	70 e0       	ldi	r23, 0x00	; 0
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	90 e0       	ldi	r25, 0x00	; 0
 624:	36 d2       	rcall	.+1132   	; 0xa92 <calloc>
 626:	fc 01       	movw	r30, r24
 628:	00 97       	sbiw	r24, 0x00	; 0
 62a:	a9 f3       	breq	.-22     	; 0x616 <fdevopen+0x16>
 62c:	80 e8       	ldi	r24, 0x80	; 128
 62e:	83 83       	std	Z+3, r24	; 0x03
 630:	01 15       	cp	r16, r1
 632:	11 05       	cpc	r17, r1
 634:	71 f0       	breq	.+28     	; 0x652 <fdevopen+0x52>
 636:	13 87       	std	Z+11, r17	; 0x0b
 638:	02 87       	std	Z+10, r16	; 0x0a
 63a:	81 e8       	ldi	r24, 0x81	; 129
 63c:	83 83       	std	Z+3, r24	; 0x03
 63e:	80 91 3b 02 	lds	r24, 0x023B
 642:	90 91 3c 02 	lds	r25, 0x023C
 646:	89 2b       	or	r24, r25
 648:	21 f4       	brne	.+8      	; 0x652 <fdevopen+0x52>
 64a:	f0 93 3c 02 	sts	0x023C, r31
 64e:	e0 93 3b 02 	sts	0x023B, r30
 652:	20 97       	sbiw	r28, 0x00	; 0
 654:	c9 f0       	breq	.+50     	; 0x688 <fdevopen+0x88>
 656:	d1 87       	std	Z+9, r29	; 0x09
 658:	c0 87       	std	Z+8, r28	; 0x08
 65a:	83 81       	ldd	r24, Z+3	; 0x03
 65c:	82 60       	ori	r24, 0x02	; 2
 65e:	83 83       	std	Z+3, r24	; 0x03
 660:	80 91 3d 02 	lds	r24, 0x023D
 664:	90 91 3e 02 	lds	r25, 0x023E
 668:	89 2b       	or	r24, r25
 66a:	71 f4       	brne	.+28     	; 0x688 <fdevopen+0x88>
 66c:	f0 93 3e 02 	sts	0x023E, r31
 670:	e0 93 3d 02 	sts	0x023D, r30
 674:	80 91 3f 02 	lds	r24, 0x023F
 678:	90 91 40 02 	lds	r25, 0x0240
 67c:	89 2b       	or	r24, r25
 67e:	21 f4       	brne	.+8      	; 0x688 <fdevopen+0x88>
 680:	f0 93 40 02 	sts	0x0240, r31
 684:	e0 93 3f 02 	sts	0x023F, r30
 688:	cf 01       	movw	r24, r30
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28
 68e:	1f 91       	pop	r17
 690:	0f 91       	pop	r16
 692:	08 95       	ret

00000694 <printf>:
 694:	cf 93       	push	r28
 696:	df 93       	push	r29
 698:	cd b7       	in	r28, 0x3d	; 61
 69a:	de b7       	in	r29, 0x3e	; 62
 69c:	fe 01       	movw	r30, r28
 69e:	36 96       	adiw	r30, 0x06	; 6
 6a0:	61 91       	ld	r22, Z+
 6a2:	71 91       	ld	r23, Z+
 6a4:	af 01       	movw	r20, r30
 6a6:	80 91 3d 02 	lds	r24, 0x023D
 6aa:	90 91 3e 02 	lds	r25, 0x023E
 6ae:	03 d0       	rcall	.+6      	; 0x6b6 <vfprintf>
 6b0:	df 91       	pop	r29
 6b2:	cf 91       	pop	r28
 6b4:	08 95       	ret

000006b6 <vfprintf>:
 6b6:	2f 92       	push	r2
 6b8:	3f 92       	push	r3
 6ba:	4f 92       	push	r4
 6bc:	5f 92       	push	r5
 6be:	6f 92       	push	r6
 6c0:	7f 92       	push	r7
 6c2:	8f 92       	push	r8
 6c4:	9f 92       	push	r9
 6c6:	af 92       	push	r10
 6c8:	bf 92       	push	r11
 6ca:	cf 92       	push	r12
 6cc:	df 92       	push	r13
 6ce:	ef 92       	push	r14
 6d0:	ff 92       	push	r15
 6d2:	0f 93       	push	r16
 6d4:	1f 93       	push	r17
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
 6de:	2c 97       	sbiw	r28, 0x0c	; 12
 6e0:	0f b6       	in	r0, 0x3f	; 63
 6e2:	f8 94       	cli
 6e4:	de bf       	out	0x3e, r29	; 62
 6e6:	0f be       	out	0x3f, r0	; 63
 6e8:	cd bf       	out	0x3d, r28	; 61
 6ea:	7c 01       	movw	r14, r24
 6ec:	6b 01       	movw	r12, r22
 6ee:	8a 01       	movw	r16, r20
 6f0:	fc 01       	movw	r30, r24
 6f2:	17 82       	std	Z+7, r1	; 0x07
 6f4:	16 82       	std	Z+6, r1	; 0x06
 6f6:	83 81       	ldd	r24, Z+3	; 0x03
 6f8:	81 ff       	sbrs	r24, 1
 6fa:	b0 c1       	rjmp	.+864    	; 0xa5c <vfprintf+0x3a6>
 6fc:	ce 01       	movw	r24, r28
 6fe:	01 96       	adiw	r24, 0x01	; 1
 700:	4c 01       	movw	r8, r24
 702:	f7 01       	movw	r30, r14
 704:	93 81       	ldd	r25, Z+3	; 0x03
 706:	f6 01       	movw	r30, r12
 708:	93 fd       	sbrc	r25, 3
 70a:	85 91       	lpm	r24, Z+
 70c:	93 ff       	sbrs	r25, 3
 70e:	81 91       	ld	r24, Z+
 710:	6f 01       	movw	r12, r30
 712:	88 23       	and	r24, r24
 714:	09 f4       	brne	.+2      	; 0x718 <vfprintf+0x62>
 716:	9e c1       	rjmp	.+828    	; 0xa54 <vfprintf+0x39e>
 718:	85 32       	cpi	r24, 0x25	; 37
 71a:	39 f4       	brne	.+14     	; 0x72a <vfprintf+0x74>
 71c:	93 fd       	sbrc	r25, 3
 71e:	85 91       	lpm	r24, Z+
 720:	93 ff       	sbrs	r25, 3
 722:	81 91       	ld	r24, Z+
 724:	6f 01       	movw	r12, r30
 726:	85 32       	cpi	r24, 0x25	; 37
 728:	21 f4       	brne	.+8      	; 0x732 <vfprintf+0x7c>
 72a:	b7 01       	movw	r22, r14
 72c:	90 e0       	ldi	r25, 0x00	; 0
 72e:	0f d3       	rcall	.+1566   	; 0xd4e <fputc>
 730:	e8 cf       	rjmp	.-48     	; 0x702 <vfprintf+0x4c>
 732:	51 2c       	mov	r5, r1
 734:	31 2c       	mov	r3, r1
 736:	20 e0       	ldi	r18, 0x00	; 0
 738:	20 32       	cpi	r18, 0x20	; 32
 73a:	a0 f4       	brcc	.+40     	; 0x764 <vfprintf+0xae>
 73c:	8b 32       	cpi	r24, 0x2B	; 43
 73e:	69 f0       	breq	.+26     	; 0x75a <vfprintf+0xa4>
 740:	30 f4       	brcc	.+12     	; 0x74e <vfprintf+0x98>
 742:	80 32       	cpi	r24, 0x20	; 32
 744:	59 f0       	breq	.+22     	; 0x75c <vfprintf+0xa6>
 746:	83 32       	cpi	r24, 0x23	; 35
 748:	69 f4       	brne	.+26     	; 0x764 <vfprintf+0xae>
 74a:	20 61       	ori	r18, 0x10	; 16
 74c:	2c c0       	rjmp	.+88     	; 0x7a6 <vfprintf+0xf0>
 74e:	8d 32       	cpi	r24, 0x2D	; 45
 750:	39 f0       	breq	.+14     	; 0x760 <vfprintf+0xaa>
 752:	80 33       	cpi	r24, 0x30	; 48
 754:	39 f4       	brne	.+14     	; 0x764 <vfprintf+0xae>
 756:	21 60       	ori	r18, 0x01	; 1
 758:	26 c0       	rjmp	.+76     	; 0x7a6 <vfprintf+0xf0>
 75a:	22 60       	ori	r18, 0x02	; 2
 75c:	24 60       	ori	r18, 0x04	; 4
 75e:	23 c0       	rjmp	.+70     	; 0x7a6 <vfprintf+0xf0>
 760:	28 60       	ori	r18, 0x08	; 8
 762:	21 c0       	rjmp	.+66     	; 0x7a6 <vfprintf+0xf0>
 764:	27 fd       	sbrc	r18, 7
 766:	27 c0       	rjmp	.+78     	; 0x7b6 <vfprintf+0x100>
 768:	30 ed       	ldi	r19, 0xD0	; 208
 76a:	38 0f       	add	r19, r24
 76c:	3a 30       	cpi	r19, 0x0A	; 10
 76e:	78 f4       	brcc	.+30     	; 0x78e <vfprintf+0xd8>
 770:	26 ff       	sbrs	r18, 6
 772:	06 c0       	rjmp	.+12     	; 0x780 <vfprintf+0xca>
 774:	fa e0       	ldi	r31, 0x0A	; 10
 776:	5f 9e       	mul	r5, r31
 778:	30 0d       	add	r19, r0
 77a:	11 24       	eor	r1, r1
 77c:	53 2e       	mov	r5, r19
 77e:	13 c0       	rjmp	.+38     	; 0x7a6 <vfprintf+0xf0>
 780:	8a e0       	ldi	r24, 0x0A	; 10
 782:	38 9e       	mul	r3, r24
 784:	30 0d       	add	r19, r0
 786:	11 24       	eor	r1, r1
 788:	33 2e       	mov	r3, r19
 78a:	20 62       	ori	r18, 0x20	; 32
 78c:	0c c0       	rjmp	.+24     	; 0x7a6 <vfprintf+0xf0>
 78e:	8e 32       	cpi	r24, 0x2E	; 46
 790:	21 f4       	brne	.+8      	; 0x79a <vfprintf+0xe4>
 792:	26 fd       	sbrc	r18, 6
 794:	5f c1       	rjmp	.+702    	; 0xa54 <vfprintf+0x39e>
 796:	20 64       	ori	r18, 0x40	; 64
 798:	06 c0       	rjmp	.+12     	; 0x7a6 <vfprintf+0xf0>
 79a:	8c 36       	cpi	r24, 0x6C	; 108
 79c:	11 f4       	brne	.+4      	; 0x7a2 <vfprintf+0xec>
 79e:	20 68       	ori	r18, 0x80	; 128
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0xf0>
 7a2:	88 36       	cpi	r24, 0x68	; 104
 7a4:	41 f4       	brne	.+16     	; 0x7b6 <vfprintf+0x100>
 7a6:	f6 01       	movw	r30, r12
 7a8:	93 fd       	sbrc	r25, 3
 7aa:	85 91       	lpm	r24, Z+
 7ac:	93 ff       	sbrs	r25, 3
 7ae:	81 91       	ld	r24, Z+
 7b0:	6f 01       	movw	r12, r30
 7b2:	81 11       	cpse	r24, r1
 7b4:	c1 cf       	rjmp	.-126    	; 0x738 <vfprintf+0x82>
 7b6:	98 2f       	mov	r25, r24
 7b8:	9f 7d       	andi	r25, 0xDF	; 223
 7ba:	95 54       	subi	r25, 0x45	; 69
 7bc:	93 30       	cpi	r25, 0x03	; 3
 7be:	28 f4       	brcc	.+10     	; 0x7ca <vfprintf+0x114>
 7c0:	0c 5f       	subi	r16, 0xFC	; 252
 7c2:	1f 4f       	sbci	r17, 0xFF	; 255
 7c4:	ff e3       	ldi	r31, 0x3F	; 63
 7c6:	f9 83       	std	Y+1, r31	; 0x01
 7c8:	0d c0       	rjmp	.+26     	; 0x7e4 <vfprintf+0x12e>
 7ca:	83 36       	cpi	r24, 0x63	; 99
 7cc:	31 f0       	breq	.+12     	; 0x7da <vfprintf+0x124>
 7ce:	83 37       	cpi	r24, 0x73	; 115
 7d0:	71 f0       	breq	.+28     	; 0x7ee <vfprintf+0x138>
 7d2:	83 35       	cpi	r24, 0x53	; 83
 7d4:	09 f0       	breq	.+2      	; 0x7d8 <vfprintf+0x122>
 7d6:	57 c0       	rjmp	.+174    	; 0x886 <vfprintf+0x1d0>
 7d8:	21 c0       	rjmp	.+66     	; 0x81c <vfprintf+0x166>
 7da:	f8 01       	movw	r30, r16
 7dc:	80 81       	ld	r24, Z
 7de:	89 83       	std	Y+1, r24	; 0x01
 7e0:	0e 5f       	subi	r16, 0xFE	; 254
 7e2:	1f 4f       	sbci	r17, 0xFF	; 255
 7e4:	44 24       	eor	r4, r4
 7e6:	43 94       	inc	r4
 7e8:	51 2c       	mov	r5, r1
 7ea:	54 01       	movw	r10, r8
 7ec:	14 c0       	rjmp	.+40     	; 0x816 <vfprintf+0x160>
 7ee:	38 01       	movw	r6, r16
 7f0:	f2 e0       	ldi	r31, 0x02	; 2
 7f2:	6f 0e       	add	r6, r31
 7f4:	71 1c       	adc	r7, r1
 7f6:	f8 01       	movw	r30, r16
 7f8:	a0 80       	ld	r10, Z
 7fa:	b1 80       	ldd	r11, Z+1	; 0x01
 7fc:	26 ff       	sbrs	r18, 6
 7fe:	03 c0       	rjmp	.+6      	; 0x806 <vfprintf+0x150>
 800:	65 2d       	mov	r22, r5
 802:	70 e0       	ldi	r23, 0x00	; 0
 804:	02 c0       	rjmp	.+4      	; 0x80a <vfprintf+0x154>
 806:	6f ef       	ldi	r22, 0xFF	; 255
 808:	7f ef       	ldi	r23, 0xFF	; 255
 80a:	c5 01       	movw	r24, r10
 80c:	2c 87       	std	Y+12, r18	; 0x0c
 80e:	94 d2       	rcall	.+1320   	; 0xd38 <strnlen>
 810:	2c 01       	movw	r4, r24
 812:	83 01       	movw	r16, r6
 814:	2c 85       	ldd	r18, Y+12	; 0x0c
 816:	2f 77       	andi	r18, 0x7F	; 127
 818:	22 2e       	mov	r2, r18
 81a:	16 c0       	rjmp	.+44     	; 0x848 <vfprintf+0x192>
 81c:	38 01       	movw	r6, r16
 81e:	f2 e0       	ldi	r31, 0x02	; 2
 820:	6f 0e       	add	r6, r31
 822:	71 1c       	adc	r7, r1
 824:	f8 01       	movw	r30, r16
 826:	a0 80       	ld	r10, Z
 828:	b1 80       	ldd	r11, Z+1	; 0x01
 82a:	26 ff       	sbrs	r18, 6
 82c:	03 c0       	rjmp	.+6      	; 0x834 <vfprintf+0x17e>
 82e:	65 2d       	mov	r22, r5
 830:	70 e0       	ldi	r23, 0x00	; 0
 832:	02 c0       	rjmp	.+4      	; 0x838 <vfprintf+0x182>
 834:	6f ef       	ldi	r22, 0xFF	; 255
 836:	7f ef       	ldi	r23, 0xFF	; 255
 838:	c5 01       	movw	r24, r10
 83a:	2c 87       	std	Y+12, r18	; 0x0c
 83c:	6b d2       	rcall	.+1238   	; 0xd14 <strnlen_P>
 83e:	2c 01       	movw	r4, r24
 840:	2c 85       	ldd	r18, Y+12	; 0x0c
 842:	20 68       	ori	r18, 0x80	; 128
 844:	22 2e       	mov	r2, r18
 846:	83 01       	movw	r16, r6
 848:	23 fc       	sbrc	r2, 3
 84a:	19 c0       	rjmp	.+50     	; 0x87e <vfprintf+0x1c8>
 84c:	83 2d       	mov	r24, r3
 84e:	90 e0       	ldi	r25, 0x00	; 0
 850:	48 16       	cp	r4, r24
 852:	59 06       	cpc	r5, r25
 854:	a0 f4       	brcc	.+40     	; 0x87e <vfprintf+0x1c8>
 856:	b7 01       	movw	r22, r14
 858:	80 e2       	ldi	r24, 0x20	; 32
 85a:	90 e0       	ldi	r25, 0x00	; 0
 85c:	78 d2       	rcall	.+1264   	; 0xd4e <fputc>
 85e:	3a 94       	dec	r3
 860:	f5 cf       	rjmp	.-22     	; 0x84c <vfprintf+0x196>
 862:	f5 01       	movw	r30, r10
 864:	27 fc       	sbrc	r2, 7
 866:	85 91       	lpm	r24, Z+
 868:	27 fe       	sbrs	r2, 7
 86a:	81 91       	ld	r24, Z+
 86c:	5f 01       	movw	r10, r30
 86e:	b7 01       	movw	r22, r14
 870:	90 e0       	ldi	r25, 0x00	; 0
 872:	6d d2       	rcall	.+1242   	; 0xd4e <fputc>
 874:	31 10       	cpse	r3, r1
 876:	3a 94       	dec	r3
 878:	f1 e0       	ldi	r31, 0x01	; 1
 87a:	4f 1a       	sub	r4, r31
 87c:	51 08       	sbc	r5, r1
 87e:	41 14       	cp	r4, r1
 880:	51 04       	cpc	r5, r1
 882:	79 f7       	brne	.-34     	; 0x862 <vfprintf+0x1ac>
 884:	de c0       	rjmp	.+444    	; 0xa42 <vfprintf+0x38c>
 886:	84 36       	cpi	r24, 0x64	; 100
 888:	11 f0       	breq	.+4      	; 0x88e <vfprintf+0x1d8>
 88a:	89 36       	cpi	r24, 0x69	; 105
 88c:	31 f5       	brne	.+76     	; 0x8da <vfprintf+0x224>
 88e:	f8 01       	movw	r30, r16
 890:	27 ff       	sbrs	r18, 7
 892:	07 c0       	rjmp	.+14     	; 0x8a2 <vfprintf+0x1ec>
 894:	60 81       	ld	r22, Z
 896:	71 81       	ldd	r23, Z+1	; 0x01
 898:	82 81       	ldd	r24, Z+2	; 0x02
 89a:	93 81       	ldd	r25, Z+3	; 0x03
 89c:	0c 5f       	subi	r16, 0xFC	; 252
 89e:	1f 4f       	sbci	r17, 0xFF	; 255
 8a0:	08 c0       	rjmp	.+16     	; 0x8b2 <vfprintf+0x1fc>
 8a2:	60 81       	ld	r22, Z
 8a4:	71 81       	ldd	r23, Z+1	; 0x01
 8a6:	88 27       	eor	r24, r24
 8a8:	77 fd       	sbrc	r23, 7
 8aa:	80 95       	com	r24
 8ac:	98 2f       	mov	r25, r24
 8ae:	0e 5f       	subi	r16, 0xFE	; 254
 8b0:	1f 4f       	sbci	r17, 0xFF	; 255
 8b2:	2f 76       	andi	r18, 0x6F	; 111
 8b4:	b2 2e       	mov	r11, r18
 8b6:	97 ff       	sbrs	r25, 7
 8b8:	09 c0       	rjmp	.+18     	; 0x8cc <vfprintf+0x216>
 8ba:	90 95       	com	r25
 8bc:	80 95       	com	r24
 8be:	70 95       	com	r23
 8c0:	61 95       	neg	r22
 8c2:	7f 4f       	sbci	r23, 0xFF	; 255
 8c4:	8f 4f       	sbci	r24, 0xFF	; 255
 8c6:	9f 4f       	sbci	r25, 0xFF	; 255
 8c8:	20 68       	ori	r18, 0x80	; 128
 8ca:	b2 2e       	mov	r11, r18
 8cc:	2a e0       	ldi	r18, 0x0A	; 10
 8ce:	30 e0       	ldi	r19, 0x00	; 0
 8d0:	a4 01       	movw	r20, r8
 8d2:	6f d2       	rcall	.+1246   	; 0xdb2 <__ultoa_invert>
 8d4:	a8 2e       	mov	r10, r24
 8d6:	a8 18       	sub	r10, r8
 8d8:	43 c0       	rjmp	.+134    	; 0x960 <vfprintf+0x2aa>
 8da:	85 37       	cpi	r24, 0x75	; 117
 8dc:	29 f4       	brne	.+10     	; 0x8e8 <vfprintf+0x232>
 8de:	2f 7e       	andi	r18, 0xEF	; 239
 8e0:	b2 2e       	mov	r11, r18
 8e2:	2a e0       	ldi	r18, 0x0A	; 10
 8e4:	30 e0       	ldi	r19, 0x00	; 0
 8e6:	25 c0       	rjmp	.+74     	; 0x932 <vfprintf+0x27c>
 8e8:	f2 2f       	mov	r31, r18
 8ea:	f9 7f       	andi	r31, 0xF9	; 249
 8ec:	bf 2e       	mov	r11, r31
 8ee:	8f 36       	cpi	r24, 0x6F	; 111
 8f0:	c1 f0       	breq	.+48     	; 0x922 <vfprintf+0x26c>
 8f2:	18 f4       	brcc	.+6      	; 0x8fa <vfprintf+0x244>
 8f4:	88 35       	cpi	r24, 0x58	; 88
 8f6:	79 f0       	breq	.+30     	; 0x916 <vfprintf+0x260>
 8f8:	ad c0       	rjmp	.+346    	; 0xa54 <vfprintf+0x39e>
 8fa:	80 37       	cpi	r24, 0x70	; 112
 8fc:	19 f0       	breq	.+6      	; 0x904 <vfprintf+0x24e>
 8fe:	88 37       	cpi	r24, 0x78	; 120
 900:	21 f0       	breq	.+8      	; 0x90a <vfprintf+0x254>
 902:	a8 c0       	rjmp	.+336    	; 0xa54 <vfprintf+0x39e>
 904:	2f 2f       	mov	r18, r31
 906:	20 61       	ori	r18, 0x10	; 16
 908:	b2 2e       	mov	r11, r18
 90a:	b4 fe       	sbrs	r11, 4
 90c:	0d c0       	rjmp	.+26     	; 0x928 <vfprintf+0x272>
 90e:	8b 2d       	mov	r24, r11
 910:	84 60       	ori	r24, 0x04	; 4
 912:	b8 2e       	mov	r11, r24
 914:	09 c0       	rjmp	.+18     	; 0x928 <vfprintf+0x272>
 916:	24 ff       	sbrs	r18, 4
 918:	0a c0       	rjmp	.+20     	; 0x92e <vfprintf+0x278>
 91a:	9f 2f       	mov	r25, r31
 91c:	96 60       	ori	r25, 0x06	; 6
 91e:	b9 2e       	mov	r11, r25
 920:	06 c0       	rjmp	.+12     	; 0x92e <vfprintf+0x278>
 922:	28 e0       	ldi	r18, 0x08	; 8
 924:	30 e0       	ldi	r19, 0x00	; 0
 926:	05 c0       	rjmp	.+10     	; 0x932 <vfprintf+0x27c>
 928:	20 e1       	ldi	r18, 0x10	; 16
 92a:	30 e0       	ldi	r19, 0x00	; 0
 92c:	02 c0       	rjmp	.+4      	; 0x932 <vfprintf+0x27c>
 92e:	20 e1       	ldi	r18, 0x10	; 16
 930:	32 e0       	ldi	r19, 0x02	; 2
 932:	f8 01       	movw	r30, r16
 934:	b7 fe       	sbrs	r11, 7
 936:	07 c0       	rjmp	.+14     	; 0x946 <vfprintf+0x290>
 938:	60 81       	ld	r22, Z
 93a:	71 81       	ldd	r23, Z+1	; 0x01
 93c:	82 81       	ldd	r24, Z+2	; 0x02
 93e:	93 81       	ldd	r25, Z+3	; 0x03
 940:	0c 5f       	subi	r16, 0xFC	; 252
 942:	1f 4f       	sbci	r17, 0xFF	; 255
 944:	06 c0       	rjmp	.+12     	; 0x952 <vfprintf+0x29c>
 946:	60 81       	ld	r22, Z
 948:	71 81       	ldd	r23, Z+1	; 0x01
 94a:	80 e0       	ldi	r24, 0x00	; 0
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	0e 5f       	subi	r16, 0xFE	; 254
 950:	1f 4f       	sbci	r17, 0xFF	; 255
 952:	a4 01       	movw	r20, r8
 954:	2e d2       	rcall	.+1116   	; 0xdb2 <__ultoa_invert>
 956:	a8 2e       	mov	r10, r24
 958:	a8 18       	sub	r10, r8
 95a:	fb 2d       	mov	r31, r11
 95c:	ff 77       	andi	r31, 0x7F	; 127
 95e:	bf 2e       	mov	r11, r31
 960:	b6 fe       	sbrs	r11, 6
 962:	0b c0       	rjmp	.+22     	; 0x97a <vfprintf+0x2c4>
 964:	2b 2d       	mov	r18, r11
 966:	2e 7f       	andi	r18, 0xFE	; 254
 968:	a5 14       	cp	r10, r5
 96a:	50 f4       	brcc	.+20     	; 0x980 <vfprintf+0x2ca>
 96c:	b4 fe       	sbrs	r11, 4
 96e:	0a c0       	rjmp	.+20     	; 0x984 <vfprintf+0x2ce>
 970:	b2 fc       	sbrc	r11, 2
 972:	08 c0       	rjmp	.+16     	; 0x984 <vfprintf+0x2ce>
 974:	2b 2d       	mov	r18, r11
 976:	2e 7e       	andi	r18, 0xEE	; 238
 978:	05 c0       	rjmp	.+10     	; 0x984 <vfprintf+0x2ce>
 97a:	7a 2c       	mov	r7, r10
 97c:	2b 2d       	mov	r18, r11
 97e:	03 c0       	rjmp	.+6      	; 0x986 <vfprintf+0x2d0>
 980:	7a 2c       	mov	r7, r10
 982:	01 c0       	rjmp	.+2      	; 0x986 <vfprintf+0x2d0>
 984:	75 2c       	mov	r7, r5
 986:	24 ff       	sbrs	r18, 4
 988:	0d c0       	rjmp	.+26     	; 0x9a4 <vfprintf+0x2ee>
 98a:	fe 01       	movw	r30, r28
 98c:	ea 0d       	add	r30, r10
 98e:	f1 1d       	adc	r31, r1
 990:	80 81       	ld	r24, Z
 992:	80 33       	cpi	r24, 0x30	; 48
 994:	11 f4       	brne	.+4      	; 0x99a <vfprintf+0x2e4>
 996:	29 7e       	andi	r18, 0xE9	; 233
 998:	09 c0       	rjmp	.+18     	; 0x9ac <vfprintf+0x2f6>
 99a:	22 ff       	sbrs	r18, 2
 99c:	06 c0       	rjmp	.+12     	; 0x9aa <vfprintf+0x2f4>
 99e:	73 94       	inc	r7
 9a0:	73 94       	inc	r7
 9a2:	04 c0       	rjmp	.+8      	; 0x9ac <vfprintf+0x2f6>
 9a4:	82 2f       	mov	r24, r18
 9a6:	86 78       	andi	r24, 0x86	; 134
 9a8:	09 f0       	breq	.+2      	; 0x9ac <vfprintf+0x2f6>
 9aa:	73 94       	inc	r7
 9ac:	23 fd       	sbrc	r18, 3
 9ae:	12 c0       	rjmp	.+36     	; 0x9d4 <vfprintf+0x31e>
 9b0:	20 ff       	sbrs	r18, 0
 9b2:	06 c0       	rjmp	.+12     	; 0x9c0 <vfprintf+0x30a>
 9b4:	5a 2c       	mov	r5, r10
 9b6:	73 14       	cp	r7, r3
 9b8:	18 f4       	brcc	.+6      	; 0x9c0 <vfprintf+0x30a>
 9ba:	53 0c       	add	r5, r3
 9bc:	57 18       	sub	r5, r7
 9be:	73 2c       	mov	r7, r3
 9c0:	73 14       	cp	r7, r3
 9c2:	60 f4       	brcc	.+24     	; 0x9dc <vfprintf+0x326>
 9c4:	b7 01       	movw	r22, r14
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	90 e0       	ldi	r25, 0x00	; 0
 9ca:	2c 87       	std	Y+12, r18	; 0x0c
 9cc:	c0 d1       	rcall	.+896    	; 0xd4e <fputc>
 9ce:	73 94       	inc	r7
 9d0:	2c 85       	ldd	r18, Y+12	; 0x0c
 9d2:	f6 cf       	rjmp	.-20     	; 0x9c0 <vfprintf+0x30a>
 9d4:	73 14       	cp	r7, r3
 9d6:	10 f4       	brcc	.+4      	; 0x9dc <vfprintf+0x326>
 9d8:	37 18       	sub	r3, r7
 9da:	01 c0       	rjmp	.+2      	; 0x9de <vfprintf+0x328>
 9dc:	31 2c       	mov	r3, r1
 9de:	24 ff       	sbrs	r18, 4
 9e0:	11 c0       	rjmp	.+34     	; 0xa04 <vfprintf+0x34e>
 9e2:	b7 01       	movw	r22, r14
 9e4:	80 e3       	ldi	r24, 0x30	; 48
 9e6:	90 e0       	ldi	r25, 0x00	; 0
 9e8:	2c 87       	std	Y+12, r18	; 0x0c
 9ea:	b1 d1       	rcall	.+866    	; 0xd4e <fputc>
 9ec:	2c 85       	ldd	r18, Y+12	; 0x0c
 9ee:	22 ff       	sbrs	r18, 2
 9f0:	16 c0       	rjmp	.+44     	; 0xa1e <vfprintf+0x368>
 9f2:	21 ff       	sbrs	r18, 1
 9f4:	03 c0       	rjmp	.+6      	; 0x9fc <vfprintf+0x346>
 9f6:	88 e5       	ldi	r24, 0x58	; 88
 9f8:	90 e0       	ldi	r25, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <vfprintf+0x34a>
 9fc:	88 e7       	ldi	r24, 0x78	; 120
 9fe:	90 e0       	ldi	r25, 0x00	; 0
 a00:	b7 01       	movw	r22, r14
 a02:	0c c0       	rjmp	.+24     	; 0xa1c <vfprintf+0x366>
 a04:	82 2f       	mov	r24, r18
 a06:	86 78       	andi	r24, 0x86	; 134
 a08:	51 f0       	breq	.+20     	; 0xa1e <vfprintf+0x368>
 a0a:	21 fd       	sbrc	r18, 1
 a0c:	02 c0       	rjmp	.+4      	; 0xa12 <vfprintf+0x35c>
 a0e:	80 e2       	ldi	r24, 0x20	; 32
 a10:	01 c0       	rjmp	.+2      	; 0xa14 <vfprintf+0x35e>
 a12:	8b e2       	ldi	r24, 0x2B	; 43
 a14:	27 fd       	sbrc	r18, 7
 a16:	8d e2       	ldi	r24, 0x2D	; 45
 a18:	b7 01       	movw	r22, r14
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	98 d1       	rcall	.+816    	; 0xd4e <fputc>
 a1e:	a5 14       	cp	r10, r5
 a20:	30 f4       	brcc	.+12     	; 0xa2e <vfprintf+0x378>
 a22:	b7 01       	movw	r22, r14
 a24:	80 e3       	ldi	r24, 0x30	; 48
 a26:	90 e0       	ldi	r25, 0x00	; 0
 a28:	92 d1       	rcall	.+804    	; 0xd4e <fputc>
 a2a:	5a 94       	dec	r5
 a2c:	f8 cf       	rjmp	.-16     	; 0xa1e <vfprintf+0x368>
 a2e:	aa 94       	dec	r10
 a30:	f4 01       	movw	r30, r8
 a32:	ea 0d       	add	r30, r10
 a34:	f1 1d       	adc	r31, r1
 a36:	80 81       	ld	r24, Z
 a38:	b7 01       	movw	r22, r14
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	88 d1       	rcall	.+784    	; 0xd4e <fputc>
 a3e:	a1 10       	cpse	r10, r1
 a40:	f6 cf       	rjmp	.-20     	; 0xa2e <vfprintf+0x378>
 a42:	33 20       	and	r3, r3
 a44:	09 f4       	brne	.+2      	; 0xa48 <vfprintf+0x392>
 a46:	5d ce       	rjmp	.-838    	; 0x702 <vfprintf+0x4c>
 a48:	b7 01       	movw	r22, r14
 a4a:	80 e2       	ldi	r24, 0x20	; 32
 a4c:	90 e0       	ldi	r25, 0x00	; 0
 a4e:	7f d1       	rcall	.+766    	; 0xd4e <fputc>
 a50:	3a 94       	dec	r3
 a52:	f7 cf       	rjmp	.-18     	; 0xa42 <vfprintf+0x38c>
 a54:	f7 01       	movw	r30, r14
 a56:	86 81       	ldd	r24, Z+6	; 0x06
 a58:	97 81       	ldd	r25, Z+7	; 0x07
 a5a:	02 c0       	rjmp	.+4      	; 0xa60 <vfprintf+0x3aa>
 a5c:	8f ef       	ldi	r24, 0xFF	; 255
 a5e:	9f ef       	ldi	r25, 0xFF	; 255
 a60:	2c 96       	adiw	r28, 0x0c	; 12
 a62:	0f b6       	in	r0, 0x3f	; 63
 a64:	f8 94       	cli
 a66:	de bf       	out	0x3e, r29	; 62
 a68:	0f be       	out	0x3f, r0	; 63
 a6a:	cd bf       	out	0x3d, r28	; 61
 a6c:	df 91       	pop	r29
 a6e:	cf 91       	pop	r28
 a70:	1f 91       	pop	r17
 a72:	0f 91       	pop	r16
 a74:	ff 90       	pop	r15
 a76:	ef 90       	pop	r14
 a78:	df 90       	pop	r13
 a7a:	cf 90       	pop	r12
 a7c:	bf 90       	pop	r11
 a7e:	af 90       	pop	r10
 a80:	9f 90       	pop	r9
 a82:	8f 90       	pop	r8
 a84:	7f 90       	pop	r7
 a86:	6f 90       	pop	r6
 a88:	5f 90       	pop	r5
 a8a:	4f 90       	pop	r4
 a8c:	3f 90       	pop	r3
 a8e:	2f 90       	pop	r2
 a90:	08 95       	ret

00000a92 <calloc>:
 a92:	0f 93       	push	r16
 a94:	1f 93       	push	r17
 a96:	cf 93       	push	r28
 a98:	df 93       	push	r29
 a9a:	86 9f       	mul	r24, r22
 a9c:	80 01       	movw	r16, r0
 a9e:	87 9f       	mul	r24, r23
 aa0:	10 0d       	add	r17, r0
 aa2:	96 9f       	mul	r25, r22
 aa4:	10 0d       	add	r17, r0
 aa6:	11 24       	eor	r1, r1
 aa8:	c8 01       	movw	r24, r16
 aaa:	0d d0       	rcall	.+26     	; 0xac6 <malloc>
 aac:	ec 01       	movw	r28, r24
 aae:	00 97       	sbiw	r24, 0x00	; 0
 ab0:	21 f0       	breq	.+8      	; 0xaba <calloc+0x28>
 ab2:	a8 01       	movw	r20, r16
 ab4:	60 e0       	ldi	r22, 0x00	; 0
 ab6:	70 e0       	ldi	r23, 0x00	; 0
 ab8:	38 d1       	rcall	.+624    	; 0xd2a <memset>
 aba:	ce 01       	movw	r24, r28
 abc:	df 91       	pop	r29
 abe:	cf 91       	pop	r28
 ac0:	1f 91       	pop	r17
 ac2:	0f 91       	pop	r16
 ac4:	08 95       	ret

00000ac6 <malloc>:
 ac6:	cf 93       	push	r28
 ac8:	df 93       	push	r29
 aca:	82 30       	cpi	r24, 0x02	; 2
 acc:	91 05       	cpc	r25, r1
 ace:	10 f4       	brcc	.+4      	; 0xad4 <malloc+0xe>
 ad0:	82 e0       	ldi	r24, 0x02	; 2
 ad2:	90 e0       	ldi	r25, 0x00	; 0
 ad4:	e0 91 43 02 	lds	r30, 0x0243
 ad8:	f0 91 44 02 	lds	r31, 0x0244
 adc:	20 e0       	ldi	r18, 0x00	; 0
 ade:	30 e0       	ldi	r19, 0x00	; 0
 ae0:	a0 e0       	ldi	r26, 0x00	; 0
 ae2:	b0 e0       	ldi	r27, 0x00	; 0
 ae4:	30 97       	sbiw	r30, 0x00	; 0
 ae6:	39 f1       	breq	.+78     	; 0xb36 <malloc+0x70>
 ae8:	40 81       	ld	r20, Z
 aea:	51 81       	ldd	r21, Z+1	; 0x01
 aec:	48 17       	cp	r20, r24
 aee:	59 07       	cpc	r21, r25
 af0:	b8 f0       	brcs	.+46     	; 0xb20 <malloc+0x5a>
 af2:	48 17       	cp	r20, r24
 af4:	59 07       	cpc	r21, r25
 af6:	71 f4       	brne	.+28     	; 0xb14 <malloc+0x4e>
 af8:	82 81       	ldd	r24, Z+2	; 0x02
 afa:	93 81       	ldd	r25, Z+3	; 0x03
 afc:	10 97       	sbiw	r26, 0x00	; 0
 afe:	29 f0       	breq	.+10     	; 0xb0a <malloc+0x44>
 b00:	13 96       	adiw	r26, 0x03	; 3
 b02:	9c 93       	st	X, r25
 b04:	8e 93       	st	-X, r24
 b06:	12 97       	sbiw	r26, 0x02	; 2
 b08:	2c c0       	rjmp	.+88     	; 0xb62 <malloc+0x9c>
 b0a:	90 93 44 02 	sts	0x0244, r25
 b0e:	80 93 43 02 	sts	0x0243, r24
 b12:	27 c0       	rjmp	.+78     	; 0xb62 <malloc+0x9c>
 b14:	21 15       	cp	r18, r1
 b16:	31 05       	cpc	r19, r1
 b18:	31 f0       	breq	.+12     	; 0xb26 <malloc+0x60>
 b1a:	42 17       	cp	r20, r18
 b1c:	53 07       	cpc	r21, r19
 b1e:	18 f0       	brcs	.+6      	; 0xb26 <malloc+0x60>
 b20:	a9 01       	movw	r20, r18
 b22:	db 01       	movw	r26, r22
 b24:	01 c0       	rjmp	.+2      	; 0xb28 <malloc+0x62>
 b26:	ef 01       	movw	r28, r30
 b28:	9a 01       	movw	r18, r20
 b2a:	bd 01       	movw	r22, r26
 b2c:	df 01       	movw	r26, r30
 b2e:	02 80       	ldd	r0, Z+2	; 0x02
 b30:	f3 81       	ldd	r31, Z+3	; 0x03
 b32:	e0 2d       	mov	r30, r0
 b34:	d7 cf       	rjmp	.-82     	; 0xae4 <malloc+0x1e>
 b36:	21 15       	cp	r18, r1
 b38:	31 05       	cpc	r19, r1
 b3a:	f9 f0       	breq	.+62     	; 0xb7a <malloc+0xb4>
 b3c:	28 1b       	sub	r18, r24
 b3e:	39 0b       	sbc	r19, r25
 b40:	24 30       	cpi	r18, 0x04	; 4
 b42:	31 05       	cpc	r19, r1
 b44:	80 f4       	brcc	.+32     	; 0xb66 <malloc+0xa0>
 b46:	8a 81       	ldd	r24, Y+2	; 0x02
 b48:	9b 81       	ldd	r25, Y+3	; 0x03
 b4a:	61 15       	cp	r22, r1
 b4c:	71 05       	cpc	r23, r1
 b4e:	21 f0       	breq	.+8      	; 0xb58 <malloc+0x92>
 b50:	fb 01       	movw	r30, r22
 b52:	93 83       	std	Z+3, r25	; 0x03
 b54:	82 83       	std	Z+2, r24	; 0x02
 b56:	04 c0       	rjmp	.+8      	; 0xb60 <malloc+0x9a>
 b58:	90 93 44 02 	sts	0x0244, r25
 b5c:	80 93 43 02 	sts	0x0243, r24
 b60:	fe 01       	movw	r30, r28
 b62:	32 96       	adiw	r30, 0x02	; 2
 b64:	44 c0       	rjmp	.+136    	; 0xbee <malloc+0x128>
 b66:	fe 01       	movw	r30, r28
 b68:	e2 0f       	add	r30, r18
 b6a:	f3 1f       	adc	r31, r19
 b6c:	81 93       	st	Z+, r24
 b6e:	91 93       	st	Z+, r25
 b70:	22 50       	subi	r18, 0x02	; 2
 b72:	31 09       	sbc	r19, r1
 b74:	39 83       	std	Y+1, r19	; 0x01
 b76:	28 83       	st	Y, r18
 b78:	3a c0       	rjmp	.+116    	; 0xbee <malloc+0x128>
 b7a:	20 91 41 02 	lds	r18, 0x0241
 b7e:	30 91 42 02 	lds	r19, 0x0242
 b82:	23 2b       	or	r18, r19
 b84:	41 f4       	brne	.+16     	; 0xb96 <malloc+0xd0>
 b86:	20 91 02 02 	lds	r18, 0x0202
 b8a:	30 91 03 02 	lds	r19, 0x0203
 b8e:	30 93 42 02 	sts	0x0242, r19
 b92:	20 93 41 02 	sts	0x0241, r18
 b96:	20 91 00 02 	lds	r18, 0x0200
 b9a:	30 91 01 02 	lds	r19, 0x0201
 b9e:	21 15       	cp	r18, r1
 ba0:	31 05       	cpc	r19, r1
 ba2:	41 f4       	brne	.+16     	; 0xbb4 <malloc+0xee>
 ba4:	2d b7       	in	r18, 0x3d	; 61
 ba6:	3e b7       	in	r19, 0x3e	; 62
 ba8:	40 91 04 02 	lds	r20, 0x0204
 bac:	50 91 05 02 	lds	r21, 0x0205
 bb0:	24 1b       	sub	r18, r20
 bb2:	35 0b       	sbc	r19, r21
 bb4:	e0 91 41 02 	lds	r30, 0x0241
 bb8:	f0 91 42 02 	lds	r31, 0x0242
 bbc:	e2 17       	cp	r30, r18
 bbe:	f3 07       	cpc	r31, r19
 bc0:	a0 f4       	brcc	.+40     	; 0xbea <malloc+0x124>
 bc2:	2e 1b       	sub	r18, r30
 bc4:	3f 0b       	sbc	r19, r31
 bc6:	28 17       	cp	r18, r24
 bc8:	39 07       	cpc	r19, r25
 bca:	78 f0       	brcs	.+30     	; 0xbea <malloc+0x124>
 bcc:	ac 01       	movw	r20, r24
 bce:	4e 5f       	subi	r20, 0xFE	; 254
 bd0:	5f 4f       	sbci	r21, 0xFF	; 255
 bd2:	24 17       	cp	r18, r20
 bd4:	35 07       	cpc	r19, r21
 bd6:	48 f0       	brcs	.+18     	; 0xbea <malloc+0x124>
 bd8:	4e 0f       	add	r20, r30
 bda:	5f 1f       	adc	r21, r31
 bdc:	50 93 42 02 	sts	0x0242, r21
 be0:	40 93 41 02 	sts	0x0241, r20
 be4:	81 93       	st	Z+, r24
 be6:	91 93       	st	Z+, r25
 be8:	02 c0       	rjmp	.+4      	; 0xbee <malloc+0x128>
 bea:	e0 e0       	ldi	r30, 0x00	; 0
 bec:	f0 e0       	ldi	r31, 0x00	; 0
 bee:	cf 01       	movw	r24, r30
 bf0:	df 91       	pop	r29
 bf2:	cf 91       	pop	r28
 bf4:	08 95       	ret

00000bf6 <free>:
 bf6:	cf 93       	push	r28
 bf8:	df 93       	push	r29
 bfa:	00 97       	sbiw	r24, 0x00	; 0
 bfc:	09 f4       	brne	.+2      	; 0xc00 <free+0xa>
 bfe:	87 c0       	rjmp	.+270    	; 0xd0e <free+0x118>
 c00:	fc 01       	movw	r30, r24
 c02:	32 97       	sbiw	r30, 0x02	; 2
 c04:	13 82       	std	Z+3, r1	; 0x03
 c06:	12 82       	std	Z+2, r1	; 0x02
 c08:	c0 91 43 02 	lds	r28, 0x0243
 c0c:	d0 91 44 02 	lds	r29, 0x0244
 c10:	20 97       	sbiw	r28, 0x00	; 0
 c12:	81 f4       	brne	.+32     	; 0xc34 <free+0x3e>
 c14:	20 81       	ld	r18, Z
 c16:	31 81       	ldd	r19, Z+1	; 0x01
 c18:	28 0f       	add	r18, r24
 c1a:	39 1f       	adc	r19, r25
 c1c:	80 91 41 02 	lds	r24, 0x0241
 c20:	90 91 42 02 	lds	r25, 0x0242
 c24:	82 17       	cp	r24, r18
 c26:	93 07       	cpc	r25, r19
 c28:	79 f5       	brne	.+94     	; 0xc88 <free+0x92>
 c2a:	f0 93 42 02 	sts	0x0242, r31
 c2e:	e0 93 41 02 	sts	0x0241, r30
 c32:	6d c0       	rjmp	.+218    	; 0xd0e <free+0x118>
 c34:	de 01       	movw	r26, r28
 c36:	20 e0       	ldi	r18, 0x00	; 0
 c38:	30 e0       	ldi	r19, 0x00	; 0
 c3a:	ae 17       	cp	r26, r30
 c3c:	bf 07       	cpc	r27, r31
 c3e:	50 f4       	brcc	.+20     	; 0xc54 <free+0x5e>
 c40:	12 96       	adiw	r26, 0x02	; 2
 c42:	4d 91       	ld	r20, X+
 c44:	5c 91       	ld	r21, X
 c46:	13 97       	sbiw	r26, 0x03	; 3
 c48:	9d 01       	movw	r18, r26
 c4a:	41 15       	cp	r20, r1
 c4c:	51 05       	cpc	r21, r1
 c4e:	09 f1       	breq	.+66     	; 0xc92 <free+0x9c>
 c50:	da 01       	movw	r26, r20
 c52:	f3 cf       	rjmp	.-26     	; 0xc3a <free+0x44>
 c54:	b3 83       	std	Z+3, r27	; 0x03
 c56:	a2 83       	std	Z+2, r26	; 0x02
 c58:	40 81       	ld	r20, Z
 c5a:	51 81       	ldd	r21, Z+1	; 0x01
 c5c:	84 0f       	add	r24, r20
 c5e:	95 1f       	adc	r25, r21
 c60:	8a 17       	cp	r24, r26
 c62:	9b 07       	cpc	r25, r27
 c64:	71 f4       	brne	.+28     	; 0xc82 <free+0x8c>
 c66:	8d 91       	ld	r24, X+
 c68:	9c 91       	ld	r25, X
 c6a:	11 97       	sbiw	r26, 0x01	; 1
 c6c:	84 0f       	add	r24, r20
 c6e:	95 1f       	adc	r25, r21
 c70:	02 96       	adiw	r24, 0x02	; 2
 c72:	91 83       	std	Z+1, r25	; 0x01
 c74:	80 83       	st	Z, r24
 c76:	12 96       	adiw	r26, 0x02	; 2
 c78:	8d 91       	ld	r24, X+
 c7a:	9c 91       	ld	r25, X
 c7c:	13 97       	sbiw	r26, 0x03	; 3
 c7e:	93 83       	std	Z+3, r25	; 0x03
 c80:	82 83       	std	Z+2, r24	; 0x02
 c82:	21 15       	cp	r18, r1
 c84:	31 05       	cpc	r19, r1
 c86:	29 f4       	brne	.+10     	; 0xc92 <free+0x9c>
 c88:	f0 93 44 02 	sts	0x0244, r31
 c8c:	e0 93 43 02 	sts	0x0243, r30
 c90:	3e c0       	rjmp	.+124    	; 0xd0e <free+0x118>
 c92:	d9 01       	movw	r26, r18
 c94:	13 96       	adiw	r26, 0x03	; 3
 c96:	fc 93       	st	X, r31
 c98:	ee 93       	st	-X, r30
 c9a:	12 97       	sbiw	r26, 0x02	; 2
 c9c:	4d 91       	ld	r20, X+
 c9e:	5d 91       	ld	r21, X+
 ca0:	a4 0f       	add	r26, r20
 ca2:	b5 1f       	adc	r27, r21
 ca4:	ea 17       	cp	r30, r26
 ca6:	fb 07       	cpc	r31, r27
 ca8:	79 f4       	brne	.+30     	; 0xcc8 <free+0xd2>
 caa:	80 81       	ld	r24, Z
 cac:	91 81       	ldd	r25, Z+1	; 0x01
 cae:	84 0f       	add	r24, r20
 cb0:	95 1f       	adc	r25, r21
 cb2:	02 96       	adiw	r24, 0x02	; 2
 cb4:	d9 01       	movw	r26, r18
 cb6:	11 96       	adiw	r26, 0x01	; 1
 cb8:	9c 93       	st	X, r25
 cba:	8e 93       	st	-X, r24
 cbc:	82 81       	ldd	r24, Z+2	; 0x02
 cbe:	93 81       	ldd	r25, Z+3	; 0x03
 cc0:	13 96       	adiw	r26, 0x03	; 3
 cc2:	9c 93       	st	X, r25
 cc4:	8e 93       	st	-X, r24
 cc6:	12 97       	sbiw	r26, 0x02	; 2
 cc8:	e0 e0       	ldi	r30, 0x00	; 0
 cca:	f0 e0       	ldi	r31, 0x00	; 0
 ccc:	8a 81       	ldd	r24, Y+2	; 0x02
 cce:	9b 81       	ldd	r25, Y+3	; 0x03
 cd0:	00 97       	sbiw	r24, 0x00	; 0
 cd2:	19 f0       	breq	.+6      	; 0xcda <free+0xe4>
 cd4:	fe 01       	movw	r30, r28
 cd6:	ec 01       	movw	r28, r24
 cd8:	f9 cf       	rjmp	.-14     	; 0xccc <free+0xd6>
 cda:	ce 01       	movw	r24, r28
 cdc:	02 96       	adiw	r24, 0x02	; 2
 cde:	28 81       	ld	r18, Y
 ce0:	39 81       	ldd	r19, Y+1	; 0x01
 ce2:	82 0f       	add	r24, r18
 ce4:	93 1f       	adc	r25, r19
 ce6:	20 91 41 02 	lds	r18, 0x0241
 cea:	30 91 42 02 	lds	r19, 0x0242
 cee:	28 17       	cp	r18, r24
 cf0:	39 07       	cpc	r19, r25
 cf2:	69 f4       	brne	.+26     	; 0xd0e <free+0x118>
 cf4:	30 97       	sbiw	r30, 0x00	; 0
 cf6:	29 f4       	brne	.+10     	; 0xd02 <free+0x10c>
 cf8:	10 92 44 02 	sts	0x0244, r1
 cfc:	10 92 43 02 	sts	0x0243, r1
 d00:	02 c0       	rjmp	.+4      	; 0xd06 <free+0x110>
 d02:	13 82       	std	Z+3, r1	; 0x03
 d04:	12 82       	std	Z+2, r1	; 0x02
 d06:	d0 93 42 02 	sts	0x0242, r29
 d0a:	c0 93 41 02 	sts	0x0241, r28
 d0e:	df 91       	pop	r29
 d10:	cf 91       	pop	r28
 d12:	08 95       	ret

00000d14 <strnlen_P>:
 d14:	fc 01       	movw	r30, r24
 d16:	05 90       	lpm	r0, Z+
 d18:	61 50       	subi	r22, 0x01	; 1
 d1a:	70 40       	sbci	r23, 0x00	; 0
 d1c:	01 10       	cpse	r0, r1
 d1e:	d8 f7       	brcc	.-10     	; 0xd16 <strnlen_P+0x2>
 d20:	80 95       	com	r24
 d22:	90 95       	com	r25
 d24:	8e 0f       	add	r24, r30
 d26:	9f 1f       	adc	r25, r31
 d28:	08 95       	ret

00000d2a <memset>:
 d2a:	dc 01       	movw	r26, r24
 d2c:	01 c0       	rjmp	.+2      	; 0xd30 <memset+0x6>
 d2e:	6d 93       	st	X+, r22
 d30:	41 50       	subi	r20, 0x01	; 1
 d32:	50 40       	sbci	r21, 0x00	; 0
 d34:	e0 f7       	brcc	.-8      	; 0xd2e <memset+0x4>
 d36:	08 95       	ret

00000d38 <strnlen>:
 d38:	fc 01       	movw	r30, r24
 d3a:	61 50       	subi	r22, 0x01	; 1
 d3c:	70 40       	sbci	r23, 0x00	; 0
 d3e:	01 90       	ld	r0, Z+
 d40:	01 10       	cpse	r0, r1
 d42:	d8 f7       	brcc	.-10     	; 0xd3a <strnlen+0x2>
 d44:	80 95       	com	r24
 d46:	90 95       	com	r25
 d48:	8e 0f       	add	r24, r30
 d4a:	9f 1f       	adc	r25, r31
 d4c:	08 95       	ret

00000d4e <fputc>:
 d4e:	0f 93       	push	r16
 d50:	1f 93       	push	r17
 d52:	cf 93       	push	r28
 d54:	df 93       	push	r29
 d56:	18 2f       	mov	r17, r24
 d58:	09 2f       	mov	r16, r25
 d5a:	eb 01       	movw	r28, r22
 d5c:	8b 81       	ldd	r24, Y+3	; 0x03
 d5e:	81 fd       	sbrc	r24, 1
 d60:	03 c0       	rjmp	.+6      	; 0xd68 <fputc+0x1a>
 d62:	8f ef       	ldi	r24, 0xFF	; 255
 d64:	9f ef       	ldi	r25, 0xFF	; 255
 d66:	20 c0       	rjmp	.+64     	; 0xda8 <fputc+0x5a>
 d68:	82 ff       	sbrs	r24, 2
 d6a:	10 c0       	rjmp	.+32     	; 0xd8c <fputc+0x3e>
 d6c:	4e 81       	ldd	r20, Y+6	; 0x06
 d6e:	5f 81       	ldd	r21, Y+7	; 0x07
 d70:	2c 81       	ldd	r18, Y+4	; 0x04
 d72:	3d 81       	ldd	r19, Y+5	; 0x05
 d74:	42 17       	cp	r20, r18
 d76:	53 07       	cpc	r21, r19
 d78:	7c f4       	brge	.+30     	; 0xd98 <fputc+0x4a>
 d7a:	e8 81       	ld	r30, Y
 d7c:	f9 81       	ldd	r31, Y+1	; 0x01
 d7e:	9f 01       	movw	r18, r30
 d80:	2f 5f       	subi	r18, 0xFF	; 255
 d82:	3f 4f       	sbci	r19, 0xFF	; 255
 d84:	39 83       	std	Y+1, r19	; 0x01
 d86:	28 83       	st	Y, r18
 d88:	10 83       	st	Z, r17
 d8a:	06 c0       	rjmp	.+12     	; 0xd98 <fputc+0x4a>
 d8c:	e8 85       	ldd	r30, Y+8	; 0x08
 d8e:	f9 85       	ldd	r31, Y+9	; 0x09
 d90:	81 2f       	mov	r24, r17
 d92:	19 95       	eicall
 d94:	89 2b       	or	r24, r25
 d96:	29 f7       	brne	.-54     	; 0xd62 <fputc+0x14>
 d98:	2e 81       	ldd	r18, Y+6	; 0x06
 d9a:	3f 81       	ldd	r19, Y+7	; 0x07
 d9c:	2f 5f       	subi	r18, 0xFF	; 255
 d9e:	3f 4f       	sbci	r19, 0xFF	; 255
 da0:	3f 83       	std	Y+7, r19	; 0x07
 da2:	2e 83       	std	Y+6, r18	; 0x06
 da4:	81 2f       	mov	r24, r17
 da6:	90 2f       	mov	r25, r16
 da8:	df 91       	pop	r29
 daa:	cf 91       	pop	r28
 dac:	1f 91       	pop	r17
 dae:	0f 91       	pop	r16
 db0:	08 95       	ret

00000db2 <__ultoa_invert>:
 db2:	fa 01       	movw	r30, r20
 db4:	aa 27       	eor	r26, r26
 db6:	28 30       	cpi	r18, 0x08	; 8
 db8:	51 f1       	breq	.+84     	; 0xe0e <__ultoa_invert+0x5c>
 dba:	20 31       	cpi	r18, 0x10	; 16
 dbc:	81 f1       	breq	.+96     	; 0xe1e <__ultoa_invert+0x6c>
 dbe:	e8 94       	clt
 dc0:	6f 93       	push	r22
 dc2:	6e 7f       	andi	r22, 0xFE	; 254
 dc4:	6e 5f       	subi	r22, 0xFE	; 254
 dc6:	7f 4f       	sbci	r23, 0xFF	; 255
 dc8:	8f 4f       	sbci	r24, 0xFF	; 255
 dca:	9f 4f       	sbci	r25, 0xFF	; 255
 dcc:	af 4f       	sbci	r26, 0xFF	; 255
 dce:	b1 e0       	ldi	r27, 0x01	; 1
 dd0:	3e d0       	rcall	.+124    	; 0xe4e <__ultoa_invert+0x9c>
 dd2:	b4 e0       	ldi	r27, 0x04	; 4
 dd4:	3c d0       	rcall	.+120    	; 0xe4e <__ultoa_invert+0x9c>
 dd6:	67 0f       	add	r22, r23
 dd8:	78 1f       	adc	r23, r24
 dda:	89 1f       	adc	r24, r25
 ddc:	9a 1f       	adc	r25, r26
 dde:	a1 1d       	adc	r26, r1
 de0:	68 0f       	add	r22, r24
 de2:	79 1f       	adc	r23, r25
 de4:	8a 1f       	adc	r24, r26
 de6:	91 1d       	adc	r25, r1
 de8:	a1 1d       	adc	r26, r1
 dea:	6a 0f       	add	r22, r26
 dec:	71 1d       	adc	r23, r1
 dee:	81 1d       	adc	r24, r1
 df0:	91 1d       	adc	r25, r1
 df2:	a1 1d       	adc	r26, r1
 df4:	20 d0       	rcall	.+64     	; 0xe36 <__ultoa_invert+0x84>
 df6:	09 f4       	brne	.+2      	; 0xdfa <__ultoa_invert+0x48>
 df8:	68 94       	set
 dfa:	3f 91       	pop	r19
 dfc:	2a e0       	ldi	r18, 0x0A	; 10
 dfe:	26 9f       	mul	r18, r22
 e00:	11 24       	eor	r1, r1
 e02:	30 19       	sub	r19, r0
 e04:	30 5d       	subi	r19, 0xD0	; 208
 e06:	31 93       	st	Z+, r19
 e08:	de f6       	brtc	.-74     	; 0xdc0 <__ultoa_invert+0xe>
 e0a:	cf 01       	movw	r24, r30
 e0c:	08 95       	ret
 e0e:	46 2f       	mov	r20, r22
 e10:	47 70       	andi	r20, 0x07	; 7
 e12:	40 5d       	subi	r20, 0xD0	; 208
 e14:	41 93       	st	Z+, r20
 e16:	b3 e0       	ldi	r27, 0x03	; 3
 e18:	0f d0       	rcall	.+30     	; 0xe38 <__ultoa_invert+0x86>
 e1a:	c9 f7       	brne	.-14     	; 0xe0e <__ultoa_invert+0x5c>
 e1c:	f6 cf       	rjmp	.-20     	; 0xe0a <__ultoa_invert+0x58>
 e1e:	46 2f       	mov	r20, r22
 e20:	4f 70       	andi	r20, 0x0F	; 15
 e22:	40 5d       	subi	r20, 0xD0	; 208
 e24:	4a 33       	cpi	r20, 0x3A	; 58
 e26:	18 f0       	brcs	.+6      	; 0xe2e <__ultoa_invert+0x7c>
 e28:	49 5d       	subi	r20, 0xD9	; 217
 e2a:	31 fd       	sbrc	r19, 1
 e2c:	40 52       	subi	r20, 0x20	; 32
 e2e:	41 93       	st	Z+, r20
 e30:	02 d0       	rcall	.+4      	; 0xe36 <__ultoa_invert+0x84>
 e32:	a9 f7       	brne	.-22     	; 0xe1e <__ultoa_invert+0x6c>
 e34:	ea cf       	rjmp	.-44     	; 0xe0a <__ultoa_invert+0x58>
 e36:	b4 e0       	ldi	r27, 0x04	; 4
 e38:	a6 95       	lsr	r26
 e3a:	97 95       	ror	r25
 e3c:	87 95       	ror	r24
 e3e:	77 95       	ror	r23
 e40:	67 95       	ror	r22
 e42:	ba 95       	dec	r27
 e44:	c9 f7       	brne	.-14     	; 0xe38 <__ultoa_invert+0x86>
 e46:	00 97       	sbiw	r24, 0x00	; 0
 e48:	61 05       	cpc	r22, r1
 e4a:	71 05       	cpc	r23, r1
 e4c:	08 95       	ret
 e4e:	9b 01       	movw	r18, r22
 e50:	ac 01       	movw	r20, r24
 e52:	0a 2e       	mov	r0, r26
 e54:	06 94       	lsr	r0
 e56:	57 95       	ror	r21
 e58:	47 95       	ror	r20
 e5a:	37 95       	ror	r19
 e5c:	27 95       	ror	r18
 e5e:	ba 95       	dec	r27
 e60:	c9 f7       	brne	.-14     	; 0xe54 <__ultoa_invert+0xa2>
 e62:	62 0f       	add	r22, r18
 e64:	73 1f       	adc	r23, r19
 e66:	84 1f       	adc	r24, r20
 e68:	95 1f       	adc	r25, r21
 e6a:	a0 1d       	adc	r26, r0
 e6c:	08 95       	ret

00000e6e <_exit>:
 e6e:	f8 94       	cli

00000e70 <__stop_program>:
 e70:	ff cf       	rjmp	.-2      	; 0xe70 <__stop_program>
